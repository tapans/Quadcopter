
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000212  00800100  00002eb0  00002f44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002eb0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000008a9  00800312  00800312  00003156  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00003156  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000069b  00000000  00000000  00003176  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000015d8  00000000  00000000  00003811  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000038e  00000000  00000000  00004de9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000010be  00000000  00000000  00005177  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003d0  00000000  00000000  00006238  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006a1  00000000  00000000  00006608  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000666  00000000  00000000  00006ca9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  0000730f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__ctors_end>
       4:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
       8:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
       c:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      10:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      14:	0c 94 19 03 	jmp	0x632	; 0x632 <__vector_5>
      18:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      1c:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      20:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      24:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      28:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      2c:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      30:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      34:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      38:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      3c:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__vector_15>
      40:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <__vector_16>
      44:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      48:	0c 94 22 02 	jmp	0x444	; 0x444 <__vector_18>
      4c:	0c 94 65 02 	jmp	0x4ca	; 0x4ca <__vector_19>
      50:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      54:	0c 94 e9 07 	jmp	0xfd2	; 0xfd2 <__vector_21>
      58:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      5c:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      60:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      64:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      68:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      6c:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      70:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      74:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      78:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      7c:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      80:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      84:	0c 94 13 07 	jmp	0xe26	; 0xe26 <__vector_33>
      88:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      8c:	07 2c       	mov	r0, r7
      8e:	7a a5       	ldd	r23, Y+42	; 0x2a
      90:	ba 6c       	ori	r27, 0xCA	; 202
      92:	c5 90       	lpm	r12, Z+
      94:	da 3b       	cpi	r29, 0xBA	; 186
      96:	93 65       	ori	r25, 0x53	; 83
      98:	fc 8b       	std	Y+20, r31	; 0x14
      9a:	bc 53       	subi	r27, 0x3C	; 60
      9c:	f8 10       	cpse	r15, r8
      9e:	fd 3c       	cpi	r31, 0xCD	; 205
      a0:	56 92       	.word	0x9256	; ????
      a2:	83 4d       	sbci	r24, 0xD3	; 211
      a4:	bd 87       	std	Y+13, r27	; 0x0d
      a6:	9d 3a       	cpi	r25, 0xAD	; 173
      a8:	b6 3d       	cpi	r27, 0xD6	; 214
      aa:	cb c9       	rjmp	.-3178   	; 0xfffff442 <__eeprom_end+0xff7ef442>
      ac:	bf 5b       	subi	r27, 0xBF	; 191
      ae:	be 73       	andi	r27, 0x3E	; 62
      b0:	da 0f       	add	r29, r26
      b2:	c9 3f       	cpi	r28, 0xF9	; 249

000000b4 <pstr_inf>:
      b4:	49 4e 46                                            INF

000000b7 <pstr_inity>:
      b7:	49 4e 49 54 59                                      INITY

000000bc <pstr_nan>:
      bc:	4e 41 4e                                            NAN

000000bf <pwr_m10>:
      bf:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      cf:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000000d7 <pwr_p10>:
      d7:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      e7:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
      f7:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     107:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     117:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     127:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     137:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     147:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     157:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     167:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     177:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     187:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     197:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     1a7:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     1b7:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     1c7:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     1d7:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     1e7:	3d 27 00                                            ='.

000001ea <__ctors_end>:
     1ea:	11 24       	eor	r1, r1
     1ec:	1f be       	out	0x3f, r1	; 63
     1ee:	cf ef       	ldi	r28, 0xFF	; 255
     1f0:	d0 e1       	ldi	r29, 0x10	; 16
     1f2:	de bf       	out	0x3e, r29	; 62
     1f4:	cd bf       	out	0x3d, r28	; 61

000001f6 <__do_copy_data>:
     1f6:	13 e0       	ldi	r17, 0x03	; 3
     1f8:	a0 e0       	ldi	r26, 0x00	; 0
     1fa:	b1 e0       	ldi	r27, 0x01	; 1
     1fc:	e0 eb       	ldi	r30, 0xB0	; 176
     1fe:	fe e2       	ldi	r31, 0x2E	; 46
     200:	00 e0       	ldi	r16, 0x00	; 0
     202:	0b bf       	out	0x3b, r16	; 59
     204:	02 c0       	rjmp	.+4      	; 0x20a <__do_copy_data+0x14>
     206:	07 90       	elpm	r0, Z+
     208:	0d 92       	st	X+, r0
     20a:	a2 31       	cpi	r26, 0x12	; 18
     20c:	b1 07       	cpc	r27, r17
     20e:	d9 f7       	brne	.-10     	; 0x206 <__do_copy_data+0x10>

00000210 <__do_clear_bss>:
     210:	1b e0       	ldi	r17, 0x0B	; 11
     212:	a2 e1       	ldi	r26, 0x12	; 18
     214:	b3 e0       	ldi	r27, 0x03	; 3
     216:	01 c0       	rjmp	.+2      	; 0x21a <.do_clear_bss_start>

00000218 <.do_clear_bss_loop>:
     218:	1d 92       	st	X+, r1

0000021a <.do_clear_bss_start>:
     21a:	ab 3b       	cpi	r26, 0xBB	; 187
     21c:	b1 07       	cpc	r27, r17
     21e:	e1 f7       	brne	.-8      	; 0x218 <.do_clear_bss_loop>
     220:	0e 94 91 08 	call	0x1122	; 0x1122 <main>
     224:	0c 94 56 17 	jmp	0x2eac	; 0x2eac <_exit>

00000228 <__bad_interrupt>:
     228:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022c <init_queue>:


/*
*	Initialize a new FIFOQueue with front at 0, back at QUEUESIZE-1 and count at 0
*/
void init_queue(FIFOQueue *q) {
     22c:	fc 01       	movw	r30, r24
	q->front = 0;
     22e:	e0 50       	subi	r30, 0x00	; 0
     230:	fc 4f       	sbci	r31, 0xFC	; 252
     232:	11 92       	st	Z+, r1
     234:	11 92       	st	Z+, r1
	q->back = QUEUESIZE - 1;
     236:	8f ef       	ldi	r24, 0xFF	; 255
     238:	93 e0       	ldi	r25, 0x03	; 3
     23a:	81 93       	st	Z+, r24
     23c:	91 93       	st	Z+, r25
	q->count = 0;
     23e:	11 82       	std	Z+1, r1	; 0x01
     240:	10 82       	st	Z, r1
}
     242:	08 95       	ret

00000244 <full>:

/*
*	Returns true if the FIFOQueue is Full, false otherwise
*/
bool full(FIFOQueue *q) {
	if(q->count >= QUEUESIZE) {
     244:	20 e0       	ldi	r18, 0x00	; 0
     246:	fc 01       	movw	r30, r24
     248:	ec 5f       	subi	r30, 0xFC	; 252
     24a:	fb 4f       	sbci	r31, 0xFB	; 251
     24c:	80 81       	ld	r24, Z
     24e:	91 81       	ldd	r25, Z+1	; 0x01
     250:	80 50       	subi	r24, 0x00	; 0
     252:	94 40       	sbci	r25, 0x04	; 4
     254:	0c f0       	brlt	.+2      	; 0x258 <full+0x14>
     256:	21 e0       	ldi	r18, 0x01	; 1
		return true;
	}
	return false;
}
     258:	82 2f       	mov	r24, r18
     25a:	08 95       	ret

0000025c <empty>:

/*
*	Returns true if the FIFOQueue is empty, false otherwise
*/
bool empty(FIFOQueue *q) {
	if(q->count <= 0) {
     25c:	20 e0       	ldi	r18, 0x00	; 0
     25e:	fc 01       	movw	r30, r24
     260:	ec 5f       	subi	r30, 0xFC	; 252
     262:	fb 4f       	sbci	r31, 0xFB	; 251
     264:	80 81       	ld	r24, Z
     266:	91 81       	ldd	r25, Z+1	; 0x01
     268:	18 16       	cp	r1, r24
     26a:	19 06       	cpc	r1, r25
     26c:	0c f0       	brlt	.+2      	; 0x270 <empty+0x14>
     26e:	21 e0       	ldi	r18, 0x01	; 1
		return true;
	}
	return false;
}
     270:	82 2f       	mov	r24, r18
     272:	08 95       	ret

00000274 <enqueue>:

/*
*	Adds a new item to the FIFOQueue
*/
bool enqueue(FIFOQueue *q, char c) {
     274:	ef 92       	push	r14
     276:	ff 92       	push	r15
     278:	0f 93       	push	r16
     27a:	1f 93       	push	r17
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
     280:	8c 01       	movw	r16, r24
     282:	46 2f       	mov	r20, r22

/*
*	Returns true if the FIFOQueue is Full, false otherwise
*/
bool full(FIFOQueue *q) {
	if(q->count >= QUEUESIZE) {
     284:	84 e0       	ldi	r24, 0x04	; 4
     286:	e8 2e       	mov	r14, r24
     288:	f8 2e       	mov	r15, r24
     28a:	e0 0e       	add	r14, r16
     28c:	f1 1e       	adc	r15, r17
     28e:	d7 01       	movw	r26, r14
     290:	cd 91       	ld	r28, X+
     292:	dc 91       	ld	r29, X
     294:	b4 e0       	ldi	r27, 0x04	; 4
     296:	c0 30       	cpi	r28, 0x00	; 0
     298:	db 07       	cpc	r29, r27
     29a:	44 f0       	brlt	.+16     	; 0x2ac <enqueue+0x38>
     29c:	80 e0       	ldi	r24, 0x00	; 0
		q->count = q->count + 1;
		return true;
	}

	return false;
}
     29e:	df 91       	pop	r29
     2a0:	cf 91       	pop	r28
     2a2:	1f 91       	pop	r17
     2a4:	0f 91       	pop	r16
     2a6:	ff 90       	pop	r15
     2a8:	ef 90       	pop	r14
     2aa:	08 95       	ret
*	Adds a new item to the FIFOQueue
*/
bool enqueue(FIFOQueue *q, char c) {

	if(full(q) == false) {
		q->back = (q->back + 1) % QUEUESIZE;
     2ac:	98 01       	movw	r18, r16
     2ae:	2e 5f       	subi	r18, 0xFE	; 254
     2b0:	3b 4f       	sbci	r19, 0xFB	; 251
     2b2:	f9 01       	movw	r30, r18
     2b4:	80 81       	ld	r24, Z
     2b6:	91 81       	ldd	r25, Z+1	; 0x01
     2b8:	01 96       	adiw	r24, 0x01	; 1
     2ba:	60 e0       	ldi	r22, 0x00	; 0
     2bc:	74 e0       	ldi	r23, 0x04	; 4
     2be:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <__divmodhi4>
     2c2:	fc 01       	movw	r30, r24
     2c4:	d9 01       	movw	r26, r18
     2c6:	8d 93       	st	X+, r24
     2c8:	9c 93       	st	X, r25
		q->buffer[q->back] = c;
     2ca:	e0 0f       	add	r30, r16
     2cc:	f1 1f       	adc	r31, r17
     2ce:	40 83       	st	Z, r20
		q->count = q->count + 1;
     2d0:	21 96       	adiw	r28, 0x01	; 1
     2d2:	f7 01       	movw	r30, r14
     2d4:	d1 83       	std	Z+1, r29	; 0x01
     2d6:	c0 83       	st	Z, r28
     2d8:	81 e0       	ldi	r24, 0x01	; 1
     2da:	e1 cf       	rjmp	.-62     	; 0x29e <enqueue+0x2a>

000002dc <dequeue>:
}

/*
*	Returns true if an item was dequeued, false otherwise
*/
bool dequeue(FIFOQueue *q, char *data) {
     2dc:	cf 93       	push	r28
     2de:	df 93       	push	r29
     2e0:	ac 01       	movw	r20, r24

/*
*	Returns true if the FIFOQueue is empty, false otherwise
*/
bool empty(FIFOQueue *q) {
	if(q->count <= 0) {
     2e2:	ec 01       	movw	r28, r24
     2e4:	cc 5f       	subi	r28, 0xFC	; 252
     2e6:	db 4f       	sbci	r29, 0xFB	; 251
     2e8:	88 81       	ld	r24, Y
     2ea:	99 81       	ldd	r25, Y+1	; 0x01
     2ec:	18 16       	cp	r1, r24
     2ee:	19 06       	cpc	r1, r25
     2f0:	24 f0       	brlt	.+8      	; 0x2fa <dequeue+0x1e>
     2f2:	80 e0       	ldi	r24, 0x00	; 0
		q->front = (q->front + 1) % QUEUESIZE;
		q->count = q->count - 1;
		return true;
	}
	return false;
}
     2f4:	df 91       	pop	r29
     2f6:	cf 91       	pop	r28
     2f8:	08 95       	ret
*	Returns true if an item was dequeued, false otherwise
*/
bool dequeue(FIFOQueue *q, char *data) {

	if(empty(q) == false) {
		*data = q->buffer[q->front];
     2fa:	9a 01       	movw	r18, r20
     2fc:	20 50       	subi	r18, 0x00	; 0
     2fe:	3c 4f       	sbci	r19, 0xFC	; 252
     300:	d9 01       	movw	r26, r18
     302:	ed 91       	ld	r30, X+
     304:	fc 91       	ld	r31, X
     306:	11 97       	sbiw	r26, 0x01	; 1
     308:	e4 0f       	add	r30, r20
     30a:	f5 1f       	adc	r31, r21
     30c:	80 81       	ld	r24, Z
     30e:	fb 01       	movw	r30, r22
     310:	80 83       	st	Z, r24
		q->front = (q->front + 1) % QUEUESIZE;
     312:	8d 91       	ld	r24, X+
     314:	9c 91       	ld	r25, X
     316:	01 96       	adiw	r24, 0x01	; 1
     318:	60 e0       	ldi	r22, 0x00	; 0
     31a:	74 e0       	ldi	r23, 0x04	; 4
     31c:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <__divmodhi4>
     320:	d9 01       	movw	r26, r18
     322:	8d 93       	st	X+, r24
     324:	9c 93       	st	X, r25
		q->count = q->count - 1;
     326:	88 81       	ld	r24, Y
     328:	99 81       	ldd	r25, Y+1	; 0x01
     32a:	01 97       	sbiw	r24, 0x01	; 1
     32c:	99 83       	std	Y+1, r25	; 0x01
     32e:	88 83       	st	Y, r24
     330:	81 e0       	ldi	r24, 0x01	; 1
     332:	e0 cf       	rjmp	.-64     	; 0x2f4 <dequeue+0x18>

00000334 <terminate_queue>:
}

/*
*	Null terminates a FIFOQueue's buffer
*/
void terminate_queue(FIFOQueue *q) {
     334:	dc 01       	movw	r26, r24

/*
*	Returns true if the FIFOQueue is Full, false otherwise
*/
bool full(FIFOQueue *q) {
	if(q->count >= QUEUESIZE) {
     336:	ac 5f       	subi	r26, 0xFC	; 252
     338:	bb 4f       	sbci	r27, 0xFB	; 251
     33a:	8d 91       	ld	r24, X+
     33c:	9c 91       	ld	r25, X
     33e:	11 97       	sbiw	r26, 0x01	; 1
     340:	a4 50       	subi	r26, 0x04	; 4
     342:	b4 40       	sbci	r27, 0x04	; 4
     344:	80 50       	subi	r24, 0x00	; 0
     346:	94 40       	sbci	r25, 0x04	; 4
     348:	64 f0       	brlt	.+24     	; 0x362 <terminate_queue+0x2e>
void terminate_queue(FIFOQueue *q) {
	if(full(q) == false) {
		enqueue(q, 0x0A);
		return;
	}
	q->buffer[q->back] = 0x0A;
     34a:	ae 5f       	subi	r26, 0xFE	; 254
     34c:	bb 4f       	sbci	r27, 0xFB	; 251
     34e:	ed 91       	ld	r30, X+
     350:	fc 91       	ld	r31, X
     352:	11 97       	sbiw	r26, 0x01	; 1
     354:	a2 50       	subi	r26, 0x02	; 2
     356:	b4 40       	sbci	r27, 0x04	; 4
     358:	ea 0f       	add	r30, r26
     35a:	fb 1f       	adc	r31, r27
     35c:	8a e0       	ldi	r24, 0x0A	; 10
     35e:	80 83       	st	Z, r24
     360:	08 95       	ret
/*
*	Null terminates a FIFOQueue's buffer
*/
void terminate_queue(FIFOQueue *q) {
	if(full(q) == false) {
		enqueue(q, 0x0A);
     362:	cd 01       	movw	r24, r26
     364:	6a e0       	ldi	r22, 0x0A	; 10
     366:	0e 94 3a 01 	call	0x274	; 0x274 <enqueue>
     36a:	08 95       	ret

0000036c <enableRX>:
*	Enables RX Interrupts
*	RXEN0 - Receive Enable flag
*	RXCIE0 - Receive Complete Interrupt flag
*/	
void enableRX(void) { 
	UCSR0B |= (1<<RXEN0) | (1<<RXCIE0);
     36c:	8a b1       	in	r24, 0x0a	; 10
     36e:	80 69       	ori	r24, 0x90	; 144
     370:	8a b9       	out	0x0a, r24	; 10
}
     372:	08 95       	ret

00000374 <enableTX>:
*	TXEN0 - Enables Transmitter USART0
*	UDRIE0 - Enables UDR Empty Interrupt
*/
void enableTX(void) {

	UCSR0B |= (1<<TXEN0) | (1<<UDRIE0);
     374:	8a b1       	in	r24, 0x0a	; 10
     376:	88 62       	ori	r24, 0x28	; 40
     378:	8a b9       	out	0x0a, r24	; 10
}
     37a:	08 95       	ret

0000037c <disableRX>:
*	Disables RX Interrupts
*	RXEN0 - Receive Enable flag
*	RXCIE0 - Receive Complete Interrupt flag
*/
void disableRX(void) {
	UCSR0B &= ~((1<<RXEN0) | (1<<RXCIE0));
     37c:	8a b1       	in	r24, 0x0a	; 10
     37e:	8f 76       	andi	r24, 0x6F	; 111
     380:	8a b9       	out	0x0a, r24	; 10
}
     382:	08 95       	ret

00000384 <disableTX>:
*	Disables Transmitter and UDR Receive Interrupt
*	TXEN0 - Enables Transmitter USART0
*	UDRIE0 - Enables UDR Empty Interrupt
*/
void disableTX(void) {
	UCSR0B &= ~((1<<TXEN0)|(1<<UDRIE0));
     384:	8a b1       	in	r24, 0x0a	; 10
     386:	87 7d       	andi	r24, 0xD7	; 215
     388:	8a b9       	out	0x0a, r24	; 10
}
     38a:	08 95       	ret

0000038c <USARTWriteChar>:


/*
*	Writes a single character to USART TX. 
*/
void USARTWriteChar(char data){
     38c:	98 2f       	mov	r25, r24
*	TXEN0 - Enables Transmitter USART0
*	UDRIE0 - Enables UDR Empty Interrupt
*/
void enableTX(void) {

	UCSR0B |= (1<<TXEN0) | (1<<UDRIE0);
     38e:	8a b1       	in	r24, 0x0a	; 10
     390:	88 62       	ori	r24, 0x28	; 40
     392:	8a b9       	out	0x0a, r24	; 10
*/
void USARTWriteChar(char data){
	
	enableTX();
	
	while(!(UCSR0A & (1<<UDRE0))) {
     394:	5d 9b       	sbis	0x0b, 5	; 11
     396:	fe cf       	rjmp	.-4      	; 0x394 <USARTWriteChar+0x8>
		//wait until UDR0 is writeable
	}
	UDR0=data;
     398:	9c b9       	out	0x0c, r25	; 12
*	Disables Transmitter and UDR Receive Interrupt
*	TXEN0 - Enables Transmitter USART0
*	UDRIE0 - Enables UDR Empty Interrupt
*/
void disableTX(void) {
	UCSR0B &= ~((1<<TXEN0)|(1<<UDRIE0));
     39a:	8a b1       	in	r24, 0x0a	; 10
     39c:	87 7d       	andi	r24, 0xD7	; 215
     39e:	8a b9       	out	0x0a, r24	; 10
	}
	UDR0=data;
	
	disableTX();
	
}
     3a0:	08 95       	ret

000003a2 <USARTReadChar>:
/*
*	Reads a single character from RX
*/
char USARTReadChar(void){
	
   while(!(UCSR0A & (1<<RXC0))){
     3a2:	5f 9b       	sbis	0x0b, 7	; 11
     3a4:	fe cf       	rjmp	.-4      	; 0x3a2 <USARTReadChar>
	//wait for the character
   }
   
   return UDR0;
     3a6:	8c b1       	in	r24, 0x0c	; 12
}
     3a8:	08 95       	ret

000003aa <printQueue>:
}

/*
*	Prints the content of a FIFOQueue's buffer
*/
void printQueue(FIFOQueue *q) {
     3aa:	ef 92       	push	r14
     3ac:	ff 92       	push	r15
     3ae:	0f 93       	push	r16
     3b0:	1f 93       	push	r17
     3b2:	df 93       	push	r29
     3b4:	cf 93       	push	r28
     3b6:	0f 92       	push	r0
     3b8:	cd b7       	in	r28, 0x3d	; 61
     3ba:	de b7       	in	r29, 0x3e	; 62
     3bc:	8c 01       	movw	r16, r24

	char c;

	while(dequeue(q, &c)) {
     3be:	7e 01       	movw	r14, r28
     3c0:	08 94       	sec
     3c2:	e1 1c       	adc	r14, r1
     3c4:	f1 1c       	adc	r15, r1
     3c6:	03 c0       	rjmp	.+6      	; 0x3ce <printQueue+0x24>
		//printf("%c", c);
		USARTWriteChar(c);
     3c8:	89 81       	ldd	r24, Y+1	; 0x01
     3ca:	0e 94 c6 01 	call	0x38c	; 0x38c <USARTWriteChar>
*/
void printQueue(FIFOQueue *q) {

	char c;

	while(dequeue(q, &c)) {
     3ce:	c8 01       	movw	r24, r16
     3d0:	b7 01       	movw	r22, r14
     3d2:	0e 94 6e 01 	call	0x2dc	; 0x2dc <dequeue>
     3d6:	88 23       	and	r24, r24
     3d8:	b9 f7       	brne	.-18     	; 0x3c8 <printQueue+0x1e>
		//printf("%c", c);
		USARTWriteChar(c);
	}

	//printf("\n");
}
     3da:	0f 90       	pop	r0
     3dc:	cf 91       	pop	r28
     3de:	df 91       	pop	r29
     3e0:	1f 91       	pop	r17
     3e2:	0f 91       	pop	r16
     3e4:	ff 90       	pop	r15
     3e6:	ef 90       	pop	r14
     3e8:	08 95       	ret

000003ea <USART_Init>:
/*
*	Initializes a new UART session
*/
void USART_Init(void (*ptrParseFunction)(FIFOQueue*, FIFOQueue*)) {
	
	cli();
     3ea:	f8 94       	cli
	//set the pointer to the function that will handle parsing
	parseHandler = (*ptrParseFunction);
     3ec:	90 93 ac 0b 	sts	0x0BAC, r25
     3f0:	80 93 ab 0b 	sts	0x0BAB, r24
	
	//Set the prescaler for the BAUD as well as the BAUD
	UBRR0H = (unsigned char)(MYUBRR>>8); 
     3f4:	10 92 90 00 	sts	0x0090, r1
	UBRR0L = (unsigned char)MYUBRR;
     3f8:	87 e6       	ldi	r24, 0x67	; 103
     3fa:	89 b9       	out	0x09, r24	; 9

	/* Set frame format: 8data, 2stop bit */ 
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
     3fc:	8e e0       	ldi	r24, 0x0E	; 14
     3fe:	80 93 95 00 	sts	0x0095, r24

/*
*	Initialize a new FIFOQueue with front at 0, back at QUEUESIZE-1 and count at 0
*/
void init_queue(FIFOQueue *q) {
	q->front = 0;
     402:	10 92 96 0b 	sts	0x0B96, r1
     406:	10 92 95 0b 	sts	0x0B95, r1
	q->back = QUEUESIZE - 1;
     40a:	8f ef       	ldi	r24, 0xFF	; 255
     40c:	93 e0       	ldi	r25, 0x03	; 3
     40e:	90 93 98 0b 	sts	0x0B98, r25
     412:	80 93 97 0b 	sts	0x0B97, r24
	q->count = 0;
     416:	10 92 9a 0b 	sts	0x0B9A, r1
     41a:	10 92 99 0b 	sts	0x0B99, r1

/*
*	Initialize a new FIFOQueue with front at 0, back at QUEUESIZE-1 and count at 0
*/
void init_queue(FIFOQueue *q) {
	q->front = 0;
     41e:	10 92 8f 07 	sts	0x078F, r1
     422:	10 92 8e 07 	sts	0x078E, r1
	q->back = QUEUESIZE - 1;
     426:	90 93 91 07 	sts	0x0791, r25
     42a:	80 93 90 07 	sts	0x0790, r24
	q->count = 0;
     42e:	10 92 93 07 	sts	0x0793, r1
     432:	10 92 92 07 	sts	0x0792, r1
*	Disables Transmitter and UDR Receive Interrupt
*	TXEN0 - Enables Transmitter USART0
*	UDRIE0 - Enables UDR Empty Interrupt
*/
void disableTX(void) {
	UCSR0B &= ~((1<<TXEN0)|(1<<UDRIE0));
     436:	8a b1       	in	r24, 0x0a	; 10
     438:	87 7d       	andi	r24, 0xD7	; 215
     43a:	8a b9       	out	0x0a, r24	; 10
*	Enables RX Interrupts
*	RXEN0 - Receive Enable flag
*	RXCIE0 - Receive Complete Interrupt flag
*/	
void enableRX(void) { 
	UCSR0B |= (1<<RXEN0) | (1<<RXCIE0);
     43c:	8a b1       	in	r24, 0x0a	; 10
     43e:	80 69       	ori	r24, 0x90	; 144
     440:	8a b9       	out	0x0a, r24	; 10
	//disable transmit
	disableTX();
	
	//enable receiver
	enableRX();
}
     442:	08 95       	ret

00000444 <__vector_18>:

/*
*	Interrupt fires when Data is available in UDR1
*/
ISR(USART0_RX_vect){ 
     444:	1f 92       	push	r1
     446:	0f 92       	push	r0
     448:	0f b6       	in	r0, 0x3f	; 63
     44a:	0f 92       	push	r0
     44c:	0b b6       	in	r0, 0x3b	; 59
     44e:	0f 92       	push	r0
     450:	11 24       	eor	r1, r1
     452:	2f 93       	push	r18
     454:	3f 93       	push	r19
     456:	4f 93       	push	r20
     458:	5f 93       	push	r21
     45a:	6f 93       	push	r22
     45c:	7f 93       	push	r23
     45e:	8f 93       	push	r24
     460:	9f 93       	push	r25
     462:	af 93       	push	r26
     464:	bf 93       	push	r27
     466:	ef 93       	push	r30
     468:	ff 93       	push	r31

	
	
	//Received byte gets stored here
	recByte = UDR0; 
     46a:	6c b1       	in	r22, 0x0c	; 12
     46c:	60 93 7a 03 	sts	0x037A, r22

/*
*	Returns true if the FIFOQueue is Full, false otherwise
*/
bool full(FIFOQueue *q) {
	if(q->count >= QUEUESIZE) {
     470:	80 91 99 0b 	lds	r24, 0x0B99
     474:	90 91 9a 0b 	lds	r25, 0x0B9A
     478:	80 50       	subi	r24, 0x00	; 0
     47a:	94 40       	sbci	r25, 0x04	; 4
     47c:	84 f0       	brlt	.+32     	; 0x49e <__vector_18+0x5a>
     47e:	05 c0       	rjmp	.+10     	; 0x48a <__vector_18+0x46>
		
		parseHandler(&readQueue, &writeQueue); 		
		
	}else if(recByte != 0x0A) {
		//queue the data to be read
		enqueue(&readQueue, recByte); 	
     480:	85 e9       	ldi	r24, 0x95	; 149
     482:	97 e0       	ldi	r25, 0x07	; 7
     484:	0e 94 3a 01 	call	0x274	; 0x274 <enqueue>
     488:	0d c0       	rjmp	.+26     	; 0x4a4 <__vector_18+0x60>
		
	}else if(recByte == 0x0A) {
		//since the end of string was reached this must be a command
		
		parseHandler(&readQueue, &writeQueue);		
     48a:	e0 91 ab 0b 	lds	r30, 0x0BAB
     48e:	f0 91 ac 0b 	lds	r31, 0x0BAC
     492:	85 e9       	ldi	r24, 0x95	; 149
     494:	97 e0       	ldi	r25, 0x07	; 7
     496:	6e e8       	ldi	r22, 0x8E	; 142
     498:	73 e0       	ldi	r23, 0x03	; 3
     49a:	09 95       	icall
     49c:	03 c0       	rjmp	.+6      	; 0x4a4 <__vector_18+0x60>
	if(full(&readQueue) == true) { 	
		
		
		parseHandler(&readQueue, &writeQueue); 		
		
	}else if(recByte != 0x0A) {
     49e:	6a 30       	cpi	r22, 0x0A	; 10
     4a0:	a1 f3       	breq	.-24     	; 0x48a <__vector_18+0x46>
     4a2:	ee cf       	rjmp	.-36     	; 0x480 <__vector_18+0x3c>
		
	}else{
		
	}
	
}	
     4a4:	ff 91       	pop	r31
     4a6:	ef 91       	pop	r30
     4a8:	bf 91       	pop	r27
     4aa:	af 91       	pop	r26
     4ac:	9f 91       	pop	r25
     4ae:	8f 91       	pop	r24
     4b0:	7f 91       	pop	r23
     4b2:	6f 91       	pop	r22
     4b4:	5f 91       	pop	r21
     4b6:	4f 91       	pop	r20
     4b8:	3f 91       	pop	r19
     4ba:	2f 91       	pop	r18
     4bc:	0f 90       	pop	r0
     4be:	0b be       	out	0x3b, r0	; 59
     4c0:	0f 90       	pop	r0
     4c2:	0f be       	out	0x3f, r0	; 63
     4c4:	0f 90       	pop	r0
     4c6:	1f 90       	pop	r1
     4c8:	18 95       	reti

000004ca <__vector_19>:

ISR(USART0_UDRE_vect) {
     4ca:	1f 92       	push	r1
     4cc:	0f 92       	push	r0
     4ce:	0f b6       	in	r0, 0x3f	; 63
     4d0:	0f 92       	push	r0
     4d2:	0b b6       	in	r0, 0x3b	; 59
     4d4:	0f 92       	push	r0
     4d6:	11 24       	eor	r1, r1
     4d8:	2f 93       	push	r18
     4da:	3f 93       	push	r19
     4dc:	4f 93       	push	r20
     4de:	5f 93       	push	r21
     4e0:	6f 93       	push	r22
     4e2:	7f 93       	push	r23
     4e4:	8f 93       	push	r24
     4e6:	9f 93       	push	r25
     4e8:	af 93       	push	r26
     4ea:	bf 93       	push	r27
     4ec:	ef 93       	push	r30
     4ee:	ff 93       	push	r31

	if(dequeue(&writeQueue, &sendByte) == false) {
     4f0:	8e e8       	ldi	r24, 0x8E	; 142
     4f2:	93 e0       	ldi	r25, 0x03	; 3
     4f4:	69 e7       	ldi	r22, 0x79	; 121
     4f6:	73 e0       	ldi	r23, 0x03	; 3
     4f8:	0e 94 6e 01 	call	0x2dc	; 0x2dc <dequeue>
     4fc:	88 23       	and	r24, r24
     4fe:	09 f5       	brne	.+66     	; 0x542 <__vector_19+0x78>

/*
*	Initialize a new FIFOQueue with front at 0, back at QUEUESIZE-1 and count at 0
*/
void init_queue(FIFOQueue *q) {
	q->front = 0;
     500:	10 92 96 0b 	sts	0x0B96, r1
     504:	10 92 95 0b 	sts	0x0B95, r1
	q->back = QUEUESIZE - 1;
     508:	8f ef       	ldi	r24, 0xFF	; 255
     50a:	93 e0       	ldi	r25, 0x03	; 3
     50c:	90 93 98 0b 	sts	0x0B98, r25
     510:	80 93 97 0b 	sts	0x0B97, r24
	q->count = 0;
     514:	10 92 9a 0b 	sts	0x0B9A, r1
     518:	10 92 99 0b 	sts	0x0B99, r1

/*
*	Initialize a new FIFOQueue with front at 0, back at QUEUESIZE-1 and count at 0
*/
void init_queue(FIFOQueue *q) {
	q->front = 0;
     51c:	10 92 8f 07 	sts	0x078F, r1
     520:	10 92 8e 07 	sts	0x078E, r1
	q->back = QUEUESIZE - 1;
     524:	90 93 91 07 	sts	0x0791, r25
     528:	80 93 90 07 	sts	0x0790, r24
	q->count = 0;
     52c:	10 92 93 07 	sts	0x0793, r1
     530:	10 92 92 07 	sts	0x0792, r1
*	Disables Transmitter and UDR Receive Interrupt
*	TXEN0 - Enables Transmitter USART0
*	UDRIE0 - Enables UDR Empty Interrupt
*/
void disableTX(void) {
	UCSR0B &= ~((1<<TXEN0)|(1<<UDRIE0));
     534:	8a b1       	in	r24, 0x0a	; 10
     536:	87 7d       	andi	r24, 0xD7	; 215
     538:	8a b9       	out	0x0a, r24	; 10
*	Enables RX Interrupts
*	RXEN0 - Receive Enable flag
*	RXCIE0 - Receive Complete Interrupt flag
*/	
void enableRX(void) { 
	UCSR0B |= (1<<RXEN0) | (1<<RXCIE0);
     53a:	8a b1       	in	r24, 0x0a	; 10
     53c:	80 69       	ori	r24, 0x90	; 144
     53e:	8a b9       	out	0x0a, r24	; 10
     540:	03 c0       	rjmp	.+6      	; 0x548 <__vector_19+0x7e>
		init_queue(&readQueue);
		init_queue(&writeQueue);
		disableTX();
		enableRX();
	}else {
		UDR0 = sendByte;
     542:	80 91 79 03 	lds	r24, 0x0379
     546:	8c b9       	out	0x0c, r24	; 12
	}
	
}
     548:	ff 91       	pop	r31
     54a:	ef 91       	pop	r30
     54c:	bf 91       	pop	r27
     54e:	af 91       	pop	r26
     550:	9f 91       	pop	r25
     552:	8f 91       	pop	r24
     554:	7f 91       	pop	r23
     556:	6f 91       	pop	r22
     558:	5f 91       	pop	r21
     55a:	4f 91       	pop	r20
     55c:	3f 91       	pop	r19
     55e:	2f 91       	pop	r18
     560:	0f 90       	pop	r0
     562:	0b be       	out	0x3b, r0	; 59
     564:	0f 90       	pop	r0
     566:	0f be       	out	0x3f, r0	; 63
     568:	0f 90       	pop	r0
     56a:	1f 90       	pop	r1
     56c:	18 95       	reti

0000056e <toCentimeters>:
 		
volatile uint16_t pulse_distance = 0;
volatile uint8_t pulse_flag, timing_flag;
volatile uint32_t pulse_count, pulse_time;

uint16_t toCentimeters(uint16_t result){
     56e:	9c 01       	movw	r18, r24
     570:	44 e0       	ldi	r20, 0x04	; 4
     572:	22 0f       	add	r18, r18
     574:	33 1f       	adc	r19, r19
     576:	4a 95       	dec	r20
     578:	e1 f7       	brne	.-8      	; 0x572 <toCentimeters+0x4>
     57a:	a9 01       	movw	r20, r18
     57c:	48 1b       	sub	r20, r24
     57e:	59 0b       	sbc	r21, r25
     580:	ca 01       	movw	r24, r20
     582:	6a e3       	ldi	r22, 0x3A	; 58
     584:	70 e0       	ldi	r23, 0x00	; 0
     586:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <__udivmodhi4>
     58a:	cb 01       	movw	r24, r22
	return (result*15)/58;
}
     58c:	08 95       	ret

0000058e <calibrate>:

uint16_t calibrate(uint16_t distance, int calibrationFactor){
     58e:	68 0f       	add	r22, r24
     590:	79 1f       	adc	r23, r25
	return (distance+calibrationFactor);
}
     592:	cb 01       	movw	r24, r22
     594:	08 95       	ret

00000596 <timer_init>:


void timer_init(void){
	TCCR0 |= (1<<WGM01);
     596:	83 b7       	in	r24, 0x33	; 51
     598:	88 60       	ori	r24, 0x08	; 8
     59a:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1<<CS00);
     59c:	83 b7       	in	r24, 0x33	; 51
     59e:	81 60       	ori	r24, 0x01	; 1
     5a0:	83 bf       	out	0x33, r24	; 51
	OCR0=240;
     5a2:	80 ef       	ldi	r24, 0xF0	; 240
     5a4:	81 bf       	out	0x31, r24	; 49
	TIMSK |= (1<<OCIE0);
     5a6:	87 b7       	in	r24, 0x37	; 55
     5a8:	82 60       	ori	r24, 0x02	; 2
     5aa:	87 bf       	out	0x37, r24	; 55
	
	pulse_flag=0;
     5ac:	10 92 94 07 	sts	0x0794, r1
	timing_flag=0;
     5b0:	10 92 8d 03 	sts	0x038D, r1

}
     5b4:	08 95       	ret

000005b6 <trigger>:

void trigger(void){
	PORTB |= (1<<PIN4);
     5b6:	c4 9a       	sbi	0x18, 4	; 24
	pulse_flag=1;
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	80 93 94 07 	sts	0x0794, r24
	TCNT0=0;
     5be:	12 be       	out	0x32, r1	; 50
}
     5c0:	08 95       	ret

000005c2 <__vector_15>:

ISR(TIMER0_COMP_vect){
     5c2:	1f 92       	push	r1
     5c4:	0f 92       	push	r0
     5c6:	0f b6       	in	r0, 0x3f	; 63
     5c8:	0f 92       	push	r0
     5ca:	11 24       	eor	r1, r1
     5cc:	8f 93       	push	r24
     5ce:	9f 93       	push	r25
     5d0:	af 93       	push	r26
     5d2:	bf 93       	push	r27

	if (pulse_flag == 1){
     5d4:	80 91 94 07 	lds	r24, 0x0794
     5d8:	81 30       	cpi	r24, 0x01	; 1
     5da:	61 f4       	brne	.+24     	; 0x5f4 <__vector_15+0x32>
		PORTB &= ~(1<<PIN4);
     5dc:	c4 98       	cbi	0x18, 4	; 24
		pulse_flag=0;
     5de:	10 92 94 07 	sts	0x0794, r1
		pulse_count=0;
     5e2:	10 92 9b 0b 	sts	0x0B9B, r1
     5e6:	10 92 9c 0b 	sts	0x0B9C, r1
     5ea:	10 92 9d 0b 	sts	0x0B9D, r1
     5ee:	10 92 9e 0b 	sts	0x0B9E, r1
     5f2:	16 c0       	rjmp	.+44     	; 0x620 <__vector_15+0x5e>
	} else {
		pulse_count++;
     5f4:	80 91 9b 0b 	lds	r24, 0x0B9B
     5f8:	90 91 9c 0b 	lds	r25, 0x0B9C
     5fc:	a0 91 9d 0b 	lds	r26, 0x0B9D
     600:	b0 91 9e 0b 	lds	r27, 0x0B9E
     604:	01 96       	adiw	r24, 0x01	; 1
     606:	a1 1d       	adc	r26, r1
     608:	b1 1d       	adc	r27, r1
     60a:	80 93 9b 0b 	sts	0x0B9B, r24
     60e:	90 93 9c 0b 	sts	0x0B9C, r25
     612:	a0 93 9d 0b 	sts	0x0B9D, r26
     616:	b0 93 9e 0b 	sts	0x0B9E, r27
		timing_flag=1;
     61a:	81 e0       	ldi	r24, 0x01	; 1
     61c:	80 93 8d 03 	sts	0x038D, r24
	}
}
     620:	bf 91       	pop	r27
     622:	af 91       	pop	r26
     624:	9f 91       	pop	r25
     626:	8f 91       	pop	r24
     628:	0f 90       	pop	r0
     62a:	0f be       	out	0x3f, r0	; 63
     62c:	0f 90       	pop	r0
     62e:	1f 90       	pop	r1
     630:	18 95       	reti

00000632 <__vector_5>:

ISR(INT4_vect){
     632:	1f 92       	push	r1
     634:	0f 92       	push	r0
     636:	0f b6       	in	r0, 0x3f	; 63
     638:	0f 92       	push	r0
     63a:	0b b6       	in	r0, 0x3b	; 59
     63c:	0f 92       	push	r0
     63e:	11 24       	eor	r1, r1
     640:	2f 93       	push	r18
     642:	3f 93       	push	r19
     644:	4f 93       	push	r20
     646:	5f 93       	push	r21
     648:	6f 93       	push	r22
     64a:	7f 93       	push	r23
     64c:	8f 93       	push	r24
     64e:	9f 93       	push	r25
     650:	af 93       	push	r26
     652:	bf 93       	push	r27
     654:	ef 93       	push	r30
     656:	ff 93       	push	r31
	//enableTX();
	//writeString(&writeQueue, "in INT4");
	if (timing_flag==1){
     658:	80 91 8d 03 	lds	r24, 0x038D
     65c:	81 30       	cpi	r24, 0x01	; 1
     65e:	01 f5       	brne	.+64     	; 0x6a0 <__vector_5+0x6e>
		pulse_time=pulse_count;
     660:	80 91 9b 0b 	lds	r24, 0x0B9B
     664:	90 91 9c 0b 	lds	r25, 0x0B9C
     668:	a0 91 9d 0b 	lds	r26, 0x0B9D
     66c:	b0 91 9e 0b 	lds	r27, 0x0B9E
     670:	80 93 b1 0b 	sts	0x0BB1, r24
     674:	90 93 b2 0b 	sts	0x0BB2, r25
     678:	a0 93 b3 0b 	sts	0x0BB3, r26
     67c:	b0 93 b4 0b 	sts	0x0BB4, r27
		timing_flag=0;
     680:	10 92 8d 03 	sts	0x038D, r1
		pulse_distance=toCentimeters(pulse_time);
     684:	80 91 b1 0b 	lds	r24, 0x0BB1
     688:	90 91 b2 0b 	lds	r25, 0x0BB2
     68c:	a0 91 b3 0b 	lds	r26, 0x0BB3
     690:	b0 91 b4 0b 	lds	r27, 0x0BB4
     694:	0e 94 b7 02 	call	0x56e	; 0x56e <toCentimeters>
     698:	90 93 13 03 	sts	0x0313, r25
     69c:	80 93 12 03 	sts	0x0312, r24
	}
}
     6a0:	ff 91       	pop	r31
     6a2:	ef 91       	pop	r30
     6a4:	bf 91       	pop	r27
     6a6:	af 91       	pop	r26
     6a8:	9f 91       	pop	r25
     6aa:	8f 91       	pop	r24
     6ac:	7f 91       	pop	r23
     6ae:	6f 91       	pop	r22
     6b0:	5f 91       	pop	r21
     6b2:	4f 91       	pop	r20
     6b4:	3f 91       	pop	r19
     6b6:	2f 91       	pop	r18
     6b8:	0f 90       	pop	r0
     6ba:	0b be       	out	0x3b, r0	; 59
     6bc:	0f 90       	pop	r0
     6be:	0f be       	out	0x3f, r0	; 63
     6c0:	0f 90       	pop	r0
     6c2:	1f 90       	pop	r1
     6c4:	18 95       	reti

000006c6 <RF_init>:

void RF_init(void){
	timer_init();
     6c6:	0e 94 cb 02 	call	0x596	; 0x596 <timer_init>
	
	DDRB |= (1<<PIN4);
     6ca:	bc 9a       	sbi	0x17, 4	; 23
	//PORTB |= (1<<PIN4);
	DDRE&=~(1<<PIN4);
     6cc:	14 98       	cbi	0x02, 4	; 2
	PORTE |=(1<<PIN4);
     6ce:	1c 9a       	sbi	0x03, 4	; 3
	EIMSK |= (1<<INT4);
     6d0:	89 b7       	in	r24, 0x39	; 57
     6d2:	80 61       	ori	r24, 0x10	; 16
     6d4:	89 bf       	out	0x39, r24	; 57
	//EICRB|=(1<<ISC41);
	EICRB|=(1<<ISC40);
     6d6:	8a b7       	in	r24, 0x3a	; 58
     6d8:	81 60       	ori	r24, 0x01	; 1
     6da:	8a bf       	out	0x3a, r24	; 58

}
     6dc:	08 95       	ret

000006de <i2c_send_start>:

/*
*	I2C Start command
*/
void i2c_send_start(void) {
	TWCR |= (1<<TWINT) | (1<<TWSTA) | (1<<TWEN) | (1<<TWIE);
     6de:	e4 e7       	ldi	r30, 0x74	; 116
     6e0:	f0 e0       	ldi	r31, 0x00	; 0
     6e2:	80 81       	ld	r24, Z
     6e4:	85 6a       	ori	r24, 0xA5	; 165
     6e6:	80 83       	st	Z, r24
}
     6e8:	08 95       	ret

000006ea <i2c_send_data>:

/*
*	Send a byte of data via I2C
*/
void i2c_send_data(uint8_t data) {
	TWDR = data;
     6ea:	80 93 73 00 	sts	0x0073, r24
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWIE);
     6ee:	85 e8       	ldi	r24, 0x85	; 133
     6f0:	80 93 74 00 	sts	0x0074, r24
}
     6f4:	08 95       	ret

000006f6 <i2c_stop>:

/*
*	Stop I2C Communications
*/
void i2c_stop(void) {
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     6f6:	84 e9       	ldi	r24, 0x94	; 148
     6f8:	80 93 74 00 	sts	0x0074, r24
}
     6fc:	08 95       	ret

000006fe <readGyroCallback>:

/*
*	Callback function for Gyroscope after data has been received
*/
void readGyroCallback(void) {
     6fe:	0f 93       	push	r16
     700:	1f 93       	push	r17
	// Put the HIGH/LOW outputs to form a 16-bit value
	// Also add an offset that will serve as the calibration factor
	gyro_x = (((SENS_DATA[5] << 8 | SENS_DATA[4]) + gyro_offx)/14.375);
     702:	00 91 af 0b 	lds	r16, 0x0BAF
     706:	10 91 b0 0b 	lds	r17, 0x0BB0
     70a:	f8 01       	movw	r30, r16
     70c:	72 85       	ldd	r23, Z+10	; 0x0a
     70e:	60 e0       	ldi	r22, 0x00	; 0
     710:	20 85       	ldd	r18, Z+8	; 0x08
     712:	31 85       	ldd	r19, Z+9	; 0x09
     714:	62 2b       	or	r22, r18
     716:	73 2b       	or	r23, r19
     718:	20 91 08 03 	lds	r18, 0x0308
     71c:	30 91 09 03 	lds	r19, 0x0309
     720:	62 0f       	add	r22, r18
     722:	73 1f       	adc	r23, r19
     724:	88 27       	eor	r24, r24
     726:	77 fd       	sbrc	r23, 7
     728:	80 95       	com	r24
     72a:	98 2f       	mov	r25, r24
     72c:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <__floatsisf>
     730:	20 e0       	ldi	r18, 0x00	; 0
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	46 e6       	ldi	r20, 0x66	; 102
     736:	51 e4       	ldi	r21, 0x41	; 65
     738:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__divsf3>
     73c:	60 93 25 03 	sts	0x0325, r22
     740:	70 93 26 03 	sts	0x0326, r23
     744:	80 93 27 03 	sts	0x0327, r24
     748:	90 93 28 03 	sts	0x0328, r25
	gyro_y = (((SENS_DATA[3] << 8 | SENS_DATA[2]) + gyro_offy)/14.375);
     74c:	f8 01       	movw	r30, r16
     74e:	76 81       	ldd	r23, Z+6	; 0x06
     750:	60 e0       	ldi	r22, 0x00	; 0
     752:	24 81       	ldd	r18, Z+4	; 0x04
     754:	35 81       	ldd	r19, Z+5	; 0x05
     756:	62 2b       	or	r22, r18
     758:	73 2b       	or	r23, r19
     75a:	20 91 0a 03 	lds	r18, 0x030A
     75e:	30 91 0b 03 	lds	r19, 0x030B
     762:	62 0f       	add	r22, r18
     764:	73 1f       	adc	r23, r19
     766:	88 27       	eor	r24, r24
     768:	77 fd       	sbrc	r23, 7
     76a:	80 95       	com	r24
     76c:	98 2f       	mov	r25, r24
     76e:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <__floatsisf>
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	46 e6       	ldi	r20, 0x66	; 102
     778:	51 e4       	ldi	r21, 0x41	; 65
     77a:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__divsf3>
     77e:	60 93 29 03 	sts	0x0329, r22
     782:	70 93 2a 03 	sts	0x032A, r23
     786:	80 93 2b 03 	sts	0x032B, r24
     78a:	90 93 2c 03 	sts	0x032C, r25
	gyro_z = (((SENS_DATA[1] << 8 | SENS_DATA[0]) + gyro_offz)/14.375);
     78e:	f8 01       	movw	r30, r16
     790:	72 81       	ldd	r23, Z+2	; 0x02
     792:	60 e0       	ldi	r22, 0x00	; 0
     794:	20 81       	ld	r18, Z
     796:	31 81       	ldd	r19, Z+1	; 0x01
     798:	62 2b       	or	r22, r18
     79a:	73 2b       	or	r23, r19
     79c:	20 91 3d 03 	lds	r18, 0x033D
     7a0:	30 91 3e 03 	lds	r19, 0x033E
     7a4:	62 0f       	add	r22, r18
     7a6:	73 1f       	adc	r23, r19
     7a8:	88 27       	eor	r24, r24
     7aa:	77 fd       	sbrc	r23, 7
     7ac:	80 95       	com	r24
     7ae:	98 2f       	mov	r25, r24
     7b0:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <__floatsisf>
     7b4:	20 e0       	ldi	r18, 0x00	; 0
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	46 e6       	ldi	r20, 0x66	; 102
     7ba:	51 e4       	ldi	r21, 0x41	; 65
     7bc:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__divsf3>
     7c0:	60 93 2d 03 	sts	0x032D, r22
     7c4:	70 93 2e 03 	sts	0x032E, r23
     7c8:	80 93 2f 03 	sts	0x032F, r24
     7cc:	90 93 30 03 	sts	0x0330, r25
	
//	gyro_angle_x+= (gyro_x*(count0-lastCount));
	//gyro_angle_y+= (gyro_y*(count0-lastCount));
	//gyro_angle_z+= (gyro_z*(count0-lastCount));
	//lastCount = count0;
}
     7d0:	1f 91       	pop	r17
     7d2:	0f 91       	pop	r16
     7d4:	08 95       	ret

000007d6 <writeCompleteCallback>:
/*
*	Callback function after I2C Write is complete
*/
void writeCompleteCallback(void) {
	//whatever you wanna do after a write is complete, can be done here
}
     7d6:	08 95       	ret

000007d8 <readSensorData>:

void readSensorData(int sensor_addr_r, int sensor_addr_w, int sensor_register_addr, int bursts, int* data_reg, void (*callback)(void)){
     7d8:	ef 92       	push	r14
     7da:	ff 92       	push	r15
     7dc:	0f 93       	push	r16
     7de:	1f 93       	push	r17
	/*
		setup generic values used in the I2C communications
		Since everything is interrupt driven we have to make sure
		all the necessary information is present for that
	*/
	SENS_AD_R = sensor_addr_r;
     7e0:	90 93 1d 03 	sts	0x031D, r25
     7e4:	80 93 1c 03 	sts	0x031C, r24
	SENS_AD_W = sensor_addr_w;
     7e8:	70 93 1f 03 	sts	0x031F, r23
     7ec:	60 93 1e 03 	sts	0x031E, r22
	SENS_RA	  = sensor_register_addr;
     7f0:	50 93 21 03 	sts	0x0321, r21
     7f4:	40 93 20 03 	sts	0x0320, r20
	SENS_BURSTS = bursts;
     7f8:	20 93 24 03 	sts	0x0324, r18
	SENS_DATA = data_reg;
     7fc:	10 93 b0 0b 	sts	0x0BB0, r17
     800:	00 93 af 0b 	sts	0x0BAF, r16
	ptrSensCallback = callback;
     804:	f0 92 ae 0b 	sts	0x0BAE, r15
     808:	e0 92 ad 0b 	sts	0x0BAD, r14

/*
*	I2C Start command
*/
void i2c_send_start(void) {
	TWCR |= (1<<TWINT) | (1<<TWSTA) | (1<<TWEN) | (1<<TWIE);
     80c:	e4 e7       	ldi	r30, 0x74	; 116
     80e:	f0 e0       	ldi	r31, 0x00	; 0
     810:	80 81       	ld	r24, Z
     812:	85 6a       	ori	r24, 0xA5	; 165
     814:	80 83       	st	Z, r24
	SENS_RA	  = sensor_register_addr;
	SENS_BURSTS = bursts;
	SENS_DATA = data_reg;
	ptrSensCallback = callback;
	i2c_send_start();
}
     816:	1f 91       	pop	r17
     818:	0f 91       	pop	r16
     81a:	ff 90       	pop	r15
     81c:	ef 90       	pop	r14
     81e:	08 95       	ret

00000820 <writeToSensor>:

void writeToSensor(int sensor_addr_w, int sensor_register_addr, int sensor_data, void (*callback)(void)) {
	
	SENS_WRITE_MODE = true; //turn on write mode
     820:	e1 e0       	ldi	r30, 0x01	; 1
     822:	e0 93 1a 03 	sts	0x031A, r30
	SENS_DATA_SENT = false;
     826:	10 92 1b 03 	sts	0x031B, r1
	SENS_AD_W = sensor_addr_w;
     82a:	90 93 1f 03 	sts	0x031F, r25
     82e:	80 93 1e 03 	sts	0x031E, r24
	SENS_BURSTS = 0;
     832:	10 92 24 03 	sts	0x0324, r1
	SENS_RA	  = sensor_register_addr;
     836:	70 93 21 03 	sts	0x0321, r23
     83a:	60 93 20 03 	sts	0x0320, r22
	SENS_RA_DATA = sensor_data;
     83e:	50 93 23 03 	sts	0x0323, r21
     842:	40 93 22 03 	sts	0x0322, r20
	ptrSensCallback = callback;
     846:	30 93 ae 0b 	sts	0x0BAE, r19
     84a:	20 93 ad 0b 	sts	0x0BAD, r18

/*
*	I2C Start command
*/
void i2c_send_start(void) {
	TWCR |= (1<<TWINT) | (1<<TWSTA) | (1<<TWEN) | (1<<TWIE);
     84e:	e4 e7       	ldi	r30, 0x74	; 116
     850:	f0 e0       	ldi	r31, 0x00	; 0
     852:	80 81       	ld	r24, Z
     854:	85 6a       	ori	r24, 0xA5	; 165
     856:	80 83       	st	Z, r24
	SENS_BURSTS = 0;
	SENS_RA	  = sensor_register_addr;
	SENS_RA_DATA = sensor_data;
	ptrSensCallback = callback;
	i2c_send_start();
}
     858:	08 95       	ret

0000085a <init_i2c>:

void init_i2c(void) {
	//set bitrate 100Khz
	TWBR = 0x48;
     85a:	88 e4       	ldi	r24, 0x48	; 72
     85c:	80 93 70 00 	sts	0x0070, r24
		TWEN - Enables two wire interface
		TWIE - Enables TWI interrupts
		TWEA - Enable Acknowledge Bit so ACK pulse is generated when slave
			   address or data bas been received
	*/
	TWCR = 1<<TWEA;
     860:	80 e4       	ldi	r24, 0x40	; 64
     862:	80 93 74 00 	sts	0x0074, r24
}
     866:	08 95       	ret

00000868 <init_gyro>:
	i2c_send_start();
}

void writeToSensor(int sensor_addr_w, int sensor_register_addr, int sensor_data, void (*callback)(void)) {
	
	SENS_WRITE_MODE = true; //turn on write mode
     868:	91 e0       	ldi	r25, 0x01	; 1
     86a:	90 93 1a 03 	sts	0x031A, r25
	SENS_DATA_SENT = false;
     86e:	10 92 1b 03 	sts	0x031B, r1
	SENS_AD_W = sensor_addr_w;
	SENS_BURSTS = 0;
     872:	10 92 24 03 	sts	0x0324, r1

/*
*	I2C Start command
*/
void i2c_send_start(void) {
	TWCR |= (1<<TWINT) | (1<<TWSTA) | (1<<TWEN) | (1<<TWIE);
     876:	e4 e7       	ldi	r30, 0x74	; 116
     878:	f0 e0       	ldi	r31, 0x00	; 0
     87a:	80 81       	ld	r24, Z
     87c:	85 6a       	ori	r24, 0xA5	; 165
     87e:	80 83       	st	Z, r24
	i2c_send_start();
}

void writeToSensor(int sensor_addr_w, int sensor_register_addr, int sensor_data, void (*callback)(void)) {
	
	SENS_WRITE_MODE = true; //turn on write mode
     880:	90 93 1a 03 	sts	0x031A, r25
	SENS_DATA_SENT = false;
     884:	10 92 1b 03 	sts	0x031B, r1
	SENS_AD_W = sensor_addr_w;
     888:	80 ed       	ldi	r24, 0xD0	; 208
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	90 93 1f 03 	sts	0x031F, r25
     890:	80 93 1e 03 	sts	0x031E, r24
	SENS_BURSTS = 0;
     894:	10 92 24 03 	sts	0x0324, r1
	SENS_RA	  = sensor_register_addr;
     898:	86 e1       	ldi	r24, 0x16	; 22
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	90 93 21 03 	sts	0x0321, r25
     8a0:	80 93 20 03 	sts	0x0320, r24
	SENS_RA_DATA = sensor_data;
     8a4:	8e e1       	ldi	r24, 0x1E	; 30
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	90 93 23 03 	sts	0x0323, r25
     8ac:	80 93 22 03 	sts	0x0322, r24
	ptrSensCallback = callback;
     8b0:	8b ee       	ldi	r24, 0xEB	; 235
     8b2:	93 e0       	ldi	r25, 0x03	; 3
     8b4:	90 93 ae 0b 	sts	0x0BAE, r25
     8b8:	80 93 ad 0b 	sts	0x0BAD, r24

/*
*	I2C Start command
*/
void i2c_send_start(void) {
	TWCR |= (1<<TWINT) | (1<<TWSTA) | (1<<TWEN) | (1<<TWIE);
     8bc:	80 81       	ld	r24, Z
     8be:	85 6a       	ori	r24, 0xA5	; 165
     8c0:	80 83       	st	Z, r24
void init_gyro(void) {
	//set the sample division rate for the sensor at 125Hz
	writeToSensor(WHO_AM_I_W, SMPLRT_DIV, 0x07, &writeCompleteCallback);
	//turn on 5Hz Low Pass filter, set mode to 2000deg/sec
	writeToSensor(WHO_AM_I_W, DLPF_FS, 0x1E, &writeCompleteCallback);
}
     8c2:	08 95       	ret

000008c4 <start_timer>:
*	This method must be called before reading x,y,z data
*/

void start_timer(void) {
	//select default clock source without prescaling
	TCCR0|=(1<<CS00);
     8c4:	83 b7       	in	r24, 0x33	; 51
     8c6:	81 60       	ori	r24, 0x01	; 1
     8c8:	83 bf       	out	0x33, r24	; 51

	//Enable Overflow Interrupt (fires when max count value reached)
	TIMSK|=(1<<TOIE0);
     8ca:	87 b7       	in	r24, 0x37	; 55
     8cc:	81 60       	ori	r24, 0x01	; 1
     8ce:	87 bf       	out	0x37, r24	; 55
	
	//initialize counter
	TCNT0=0;
     8d0:	12 be       	out	0x32, r1	; 50
}
     8d2:	08 95       	ret

000008d4 <init_accl>:
	i2c_send_start();
}

void writeToSensor(int sensor_addr_w, int sensor_register_addr, int sensor_data, void (*callback)(void)) {
	
	SENS_WRITE_MODE = true; //turn on write mode
     8d4:	91 e0       	ldi	r25, 0x01	; 1
     8d6:	90 93 1a 03 	sts	0x031A, r25
	SENS_DATA_SENT = false;
     8da:	10 92 1b 03 	sts	0x031B, r1
	SENS_AD_W = sensor_addr_w;
	SENS_BURSTS = 0;
     8de:	10 92 24 03 	sts	0x0324, r1

/*
*	I2C Start command
*/
void i2c_send_start(void) {
	TWCR |= (1<<TWINT) | (1<<TWSTA) | (1<<TWEN) | (1<<TWIE);
     8e2:	e4 e7       	ldi	r30, 0x74	; 116
     8e4:	f0 e0       	ldi	r31, 0x00	; 0
     8e6:	80 81       	ld	r24, Z
     8e8:	85 6a       	ori	r24, 0xA5	; 165
     8ea:	80 83       	st	Z, r24
	i2c_send_start();
}

void writeToSensor(int sensor_addr_w, int sensor_register_addr, int sensor_data, void (*callback)(void)) {
	
	SENS_WRITE_MODE = true; //turn on write mode
     8ec:	90 93 1a 03 	sts	0x031A, r25
	SENS_DATA_SENT = false;
     8f0:	10 92 1b 03 	sts	0x031B, r1
	SENS_AD_W = sensor_addr_w;
	SENS_BURSTS = 0;
     8f4:	10 92 24 03 	sts	0x0324, r1

/*
*	I2C Start command
*/
void i2c_send_start(void) {
	TWCR |= (1<<TWINT) | (1<<TWSTA) | (1<<TWEN) | (1<<TWIE);
     8f8:	80 81       	ld	r24, Z
     8fa:	85 6a       	ori	r24, 0xA5	; 165
     8fc:	80 83       	st	Z, r24
	i2c_send_start();
}

void writeToSensor(int sensor_addr_w, int sensor_register_addr, int sensor_data, void (*callback)(void)) {
	
	SENS_WRITE_MODE = true; //turn on write mode
     8fe:	90 93 1a 03 	sts	0x031A, r25
	SENS_DATA_SENT = false;
     902:	10 92 1b 03 	sts	0x031B, r1
	SENS_AD_W = sensor_addr_w;
     906:	86 ea       	ldi	r24, 0xA6	; 166
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	90 93 1f 03 	sts	0x031F, r25
     90e:	80 93 1e 03 	sts	0x031E, r24
	SENS_BURSTS = 0;
     912:	10 92 24 03 	sts	0x0324, r1
	SENS_RA	  = sensor_register_addr;
     916:	8d e2       	ldi	r24, 0x2D	; 45
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	90 93 21 03 	sts	0x0321, r25
     91e:	80 93 20 03 	sts	0x0320, r24
	SENS_RA_DATA = sensor_data;
     922:	88 e0       	ldi	r24, 0x08	; 8
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	90 93 23 03 	sts	0x0323, r25
     92a:	80 93 22 03 	sts	0x0322, r24
	ptrSensCallback = callback;
     92e:	8b ee       	ldi	r24, 0xEB	; 235
     930:	93 e0       	ldi	r25, 0x03	; 3
     932:	90 93 ae 0b 	sts	0x0BAE, r25
     936:	80 93 ad 0b 	sts	0x0BAD, r24

/*
*	I2C Start command
*/
void i2c_send_start(void) {
	TWCR |= (1<<TWINT) | (1<<TWSTA) | (1<<TWEN) | (1<<TWIE);
     93a:	80 81       	ld	r24, Z
     93c:	85 6a       	ori	r24, 0xA5	; 165
     93e:	80 83       	st	Z, r24
	writeToSensor(ACCL_WHO_AM_I_W, ACCL_POWER_CTL, 0x10, &writeCompleteCallback);
	//set to full resolution, +-2g, left justified
	//writeToSensor(ACCL_WHO_AM_I_W, ACCL_DATA_FORMAT, 0x04, &writeCompleteCallback);
	//place in measurement mode
	writeToSensor(ACCL_WHO_AM_I_W, ACCL_POWER_CTL, 0x08, &writeCompleteCallback);
}
     940:	08 95       	ret

00000942 <i2c_test>:
	/*
		setup generic values used in the I2C communications
		Since everything is interrupt driven we have to make sure
		all the necessary information is present for that
	*/
	SENS_AD_R = sensor_addr_r;
     942:	87 ea       	ldi	r24, 0xA7	; 167
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	90 93 1d 03 	sts	0x031D, r25
     94a:	80 93 1c 03 	sts	0x031C, r24
	SENS_AD_W = sensor_addr_w;
     94e:	86 ea       	ldi	r24, 0xA6	; 166
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	90 93 1f 03 	sts	0x031F, r25
     956:	80 93 1e 03 	sts	0x031E, r24
	SENS_RA	  = sensor_register_addr;
     95a:	82 e3       	ldi	r24, 0x32	; 50
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	90 93 21 03 	sts	0x0321, r25
     962:	80 93 20 03 	sts	0x0320, r24
	SENS_BURSTS = bursts;
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	80 93 24 03 	sts	0x0324, r24
	SENS_DATA = data_reg;
     96c:	8f e9       	ldi	r24, 0x9F	; 159
     96e:	9b e0       	ldi	r25, 0x0B	; 11
     970:	90 93 b0 0b 	sts	0x0BB0, r25
     974:	80 93 af 0b 	sts	0x0BAF, r24
	ptrSensCallback = callback;
     978:	81 e2       	ldi	r24, 0x21	; 33
     97a:	9a e0       	ldi	r25, 0x0A	; 10
     97c:	90 93 ae 0b 	sts	0x0BAE, r25
     980:	80 93 ad 0b 	sts	0x0BAD, r24

/*
*	I2C Start command
*/
void i2c_send_start(void) {
	TWCR |= (1<<TWINT) | (1<<TWSTA) | (1<<TWEN) | (1<<TWIE);
     984:	e4 e7       	ldi	r30, 0x74	; 116
     986:	f0 e0       	ldi	r31, 0x00	; 0
     988:	80 81       	ld	r24, Z
     98a:	85 6a       	ori	r24, 0xA5	; 165
     98c:	80 83       	st	Z, r24

void i2c_test(void) {
	
	readSensorData(ACCL_WHO_AM_I_R, ACCL_WHO_AM_I_W, ACCL_DATAX0, 1, ACCL_DATA, &readAcclCallback);
	//readSensorData(WHO_AM_I_R, WHO_AM_I_W, GYRO_XOUT_H, 6, GYRO_DATA, &readGyroCallback);
}
     98e:	08 95       	ret

00000990 <Wait>:

void Wait(void){
     990:	40 e0       	ldi	r20, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     992:	20 e0       	ldi	r18, 0x00	; 0
     994:	30 e0       	ldi	r19, 0x00	; 0
     996:	c9 01       	movw	r24, r18
     998:	01 97       	sbiw	r24, 0x01	; 1
     99a:	f1 f7       	brne	.-4      	; 0x998 <Wait+0x8>
   uint8_t i;
   for(i=0;i<60;i++) {
     99c:	c9 01       	movw	r24, r18
     99e:	01 97       	sbiw	r24, 0x01	; 1
     9a0:	f1 f7       	brne	.-4      	; 0x99e <Wait+0xe>
     9a2:	c9 01       	movw	r24, r18
     9a4:	01 97       	sbiw	r24, 0x01	; 1
     9a6:	f1 f7       	brne	.-4      	; 0x9a4 <Wait+0x14>
     9a8:	4f 5f       	subi	r20, 0xFF	; 255
     9aa:	4c 33       	cpi	r20, 0x3C	; 60
     9ac:	a1 f7       	brne	.-24     	; 0x996 <Wait+0x6>
      _delay_loop_2(0);
      _delay_loop_2(0);
      _delay_loop_2(0);
   }
}
     9ae:	08 95       	ret

000009b0 <init_pwm>:
		//Formula for calculating PWM stuff
		Top = [ cpu_clk_speed Hz / (Prescaler) * (Frequency Hz) ] - 1
		
	*/
	
	TCCR1A |= 1<<WGM11 | 1<<COM1A1 | 1<<COM1A0 | 1<<COM1B1 | 1<<COM1B0 | 1<<COM1C1 | 1<<COM1C0;
     9b0:	8f b5       	in	r24, 0x2f	; 47
     9b2:	8e 6f       	ori	r24, 0xFE	; 254
     9b4:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= 1<<WGM12 | 1<<WGM13 | 1<<CS11;
     9b6:	8e b5       	in	r24, 0x2e	; 46
     9b8:	8a 61       	ori	r24, 0x1A	; 26
     9ba:	8e bd       	out	0x2e, r24	; 46
	TCCR3A |= 1<<WGM31 | 1<<COM3A1 | 1<<COM3A0; //uncomment to activate pwm for OCR3A i.e. PINE3
     9bc:	eb e8       	ldi	r30, 0x8B	; 139
     9be:	f0 e0       	ldi	r31, 0x00	; 0
     9c0:	80 81       	ld	r24, Z
     9c2:	82 6c       	ori	r24, 0xC2	; 194
     9c4:	80 83       	st	Z, r24
	TCCR3B |= 1<<WGM33 | 1<<WGM32 | 1<<CS31;
     9c6:	ea e8       	ldi	r30, 0x8A	; 138
     9c8:	f0 e0       	ldi	r31, 0x00	; 0
     9ca:	80 81       	ld	r24, Z
     9cc:	8a 61       	ori	r24, 0x1A	; 26
     9ce:	80 83       	st	Z, r24
	
	ICR1 = 19999;
     9d0:	8f e1       	ldi	r24, 0x1F	; 31
     9d2:	9e e4       	ldi	r25, 0x4E	; 78
     9d4:	97 bd       	out	0x27, r25	; 39
     9d6:	86 bd       	out	0x26, r24	; 38
	ICR3 = 19999;
     9d8:	90 93 81 00 	sts	0x0081, r25
     9dc:	80 93 80 00 	sts	0x0080, r24
	
	//zero out so there is no signal
	OCR1A = ICR1; //north
     9e0:	86 b5       	in	r24, 0x26	; 38
     9e2:	97 b5       	in	r25, 0x27	; 39
     9e4:	9b bd       	out	0x2b, r25	; 43
     9e6:	8a bd       	out	0x2a, r24	; 42
	OCR1B = ICR1; //south
     9e8:	86 b5       	in	r24, 0x26	; 38
     9ea:	97 b5       	in	r25, 0x27	; 39
     9ec:	99 bd       	out	0x29, r25	; 41
     9ee:	88 bd       	out	0x28, r24	; 40
	OCR1C = ICR1; //east
     9f0:	86 b5       	in	r24, 0x26	; 38
     9f2:	97 b5       	in	r25, 0x27	; 39
     9f4:	90 93 79 00 	sts	0x0079, r25
     9f8:	80 93 78 00 	sts	0x0078, r24
	OCR3A = ICR1; //west
     9fc:	86 b5       	in	r24, 0x26	; 38
     9fe:	97 b5       	in	r25, 0x27	; 39
     a00:	90 93 87 00 	sts	0x0087, r25
     a04:	80 93 86 00 	sts	0x0086, r24
}
     a08:	08 95       	ret

00000a0a <init_motors>:

void init_motors(void) {
     a0a:	ef 92       	push	r14
     a0c:	ff 92       	push	r15
     a0e:	0f 93       	push	r16
     a10:	1f 93       	push	r17
	
	motors_ddr1 |= (1<<north_motor) | (1<<south_motor) | (1<<east_motor);
     a12:	87 b3       	in	r24, 0x17	; 23
     a14:	80 6e       	ori	r24, 0xE0	; 224
     a16:	87 bb       	out	0x17, r24	; 23
	motors_ddr2 |= (1<<west_motor);
     a18:	13 9a       	sbi	0x02, 3	; 2
	
	//2ms pwm square wave
	OCR1A = ICR1 - ESC_HIGH;
     a1a:	86 b5       	in	r24, 0x26	; 38
     a1c:	97 b5       	in	r25, 0x27	; 39
     a1e:	80 5a       	subi	r24, 0xA0	; 160
     a20:	9f 40       	sbci	r25, 0x0F	; 15
     a22:	9b bd       	out	0x2b, r25	; 43
     a24:	8a bd       	out	0x2a, r24	; 42
	OCR1B = ICR1 - ESC_HIGH;
     a26:	86 b5       	in	r24, 0x26	; 38
     a28:	97 b5       	in	r25, 0x27	; 39
     a2a:	80 5a       	subi	r24, 0xA0	; 160
     a2c:	9f 40       	sbci	r25, 0x0F	; 15
     a2e:	99 bd       	out	0x29, r25	; 41
     a30:	88 bd       	out	0x28, r24	; 40
	OCR1C = ICR1 - ESC_HIGH;
     a32:	86 b5       	in	r24, 0x26	; 38
     a34:	97 b5       	in	r25, 0x27	; 39
     a36:	80 5a       	subi	r24, 0xA0	; 160
     a38:	9f 40       	sbci	r25, 0x0F	; 15
     a3a:	58 e7       	ldi	r21, 0x78	; 120
     a3c:	e5 2e       	mov	r14, r21
     a3e:	f1 2c       	mov	r15, r1
     a40:	f7 01       	movw	r30, r14
     a42:	91 83       	std	Z+1, r25	; 0x01
     a44:	80 83       	st	Z, r24
	OCR3A = ICR1 - ESC_HIGH;
     a46:	86 b5       	in	r24, 0x26	; 38
     a48:	97 b5       	in	r25, 0x27	; 39
     a4a:	80 5a       	subi	r24, 0xA0	; 160
     a4c:	9f 40       	sbci	r25, 0x0F	; 15
     a4e:	06 e8       	ldi	r16, 0x86	; 134
     a50:	10 e0       	ldi	r17, 0x00	; 0
     a52:	f8 01       	movw	r30, r16
     a54:	91 83       	std	Z+1, r25	; 0x01
     a56:	80 83       	st	Z, r24
	Wait();
     a58:	0e 94 c8 04 	call	0x990	; 0x990 <Wait>
	
	//1ms pwm square wave
	OCR1A = ICR1 - ESC_LOW;
     a5c:	86 b5       	in	r24, 0x26	; 38
     a5e:	97 b5       	in	r25, 0x27	; 39
     a60:	80 5d       	subi	r24, 0xD0	; 208
     a62:	97 40       	sbci	r25, 0x07	; 7
     a64:	9b bd       	out	0x2b, r25	; 43
     a66:	8a bd       	out	0x2a, r24	; 42
	OCR1B = ICR1 - ESC_LOW;
     a68:	86 b5       	in	r24, 0x26	; 38
     a6a:	97 b5       	in	r25, 0x27	; 39
     a6c:	80 5d       	subi	r24, 0xD0	; 208
     a6e:	97 40       	sbci	r25, 0x07	; 7
     a70:	99 bd       	out	0x29, r25	; 41
     a72:	88 bd       	out	0x28, r24	; 40
	OCR1C = ICR1 - ESC_LOW;
     a74:	86 b5       	in	r24, 0x26	; 38
     a76:	97 b5       	in	r25, 0x27	; 39
     a78:	80 5d       	subi	r24, 0xD0	; 208
     a7a:	97 40       	sbci	r25, 0x07	; 7
     a7c:	f7 01       	movw	r30, r14
     a7e:	91 83       	std	Z+1, r25	; 0x01
     a80:	80 83       	st	Z, r24
	OCR3A = ICR1 - ESC_LOW;
     a82:	86 b5       	in	r24, 0x26	; 38
     a84:	97 b5       	in	r25, 0x27	; 39
     a86:	80 5d       	subi	r24, 0xD0	; 208
     a88:	97 40       	sbci	r25, 0x07	; 7
     a8a:	f8 01       	movw	r30, r16
     a8c:	91 83       	std	Z+1, r25	; 0x01
     a8e:	80 83       	st	Z, r24
	Wait();
     a90:	0e 94 c8 04 	call	0x990	; 0x990 <Wait>
}
     a94:	1f 91       	pop	r17
     a96:	0f 91       	pop	r16
     a98:	ff 90       	pop	r15
     a9a:	ef 90       	pop	r14
     a9c:	08 95       	ret

00000a9e <stop_pwm>:
/*
*	Flatlines the PWM frequency
*/	
void stop_pwm(void) {
	
	stop = 1; //kill everything depending on this bit
     a9e:	81 e0       	ldi	r24, 0x01	; 1
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	90 93 6c 03 	sts	0x036C, r25
     aa6:	80 93 6b 03 	sts	0x036B, r24
	motors_ddr1 &= ~((1<<north_motor) | (1<<south_motor) | (1<<east_motor));
     aaa:	87 b3       	in	r24, 0x17	; 23
     aac:	8f 71       	andi	r24, 0x1F	; 31
     aae:	87 bb       	out	0x17, r24	; 23
	motors_ddr2 &= ~(1<<west_motor);
     ab0:	13 98       	cbi	0x02, 3	; 2

}
     ab2:	08 95       	ret

00000ab4 <init_adc>:



void init_adc(void) {
	//enable ADC and set prescaler to 128
	ADCSRA |= 1<<ADPS0 | 1<<ADPS1 | 1<<ADPS2;
     ab4:	86 b1       	in	r24, 0x06	; 6
     ab6:	87 60       	ori	r24, 0x07	; 7
     ab8:	86 b9       	out	0x06, r24	; 6
	//setup volate references
	ADMUX |= 1<<REFS0;
     aba:	3e 9a       	sbi	0x07, 6	; 7
	//enable ADC and ADC interrupts
	ADCSRA |= 1<<ADEN | 1<<ADIE;
     abc:	86 b1       	in	r24, 0x06	; 6
     abe:	88 68       	ori	r24, 0x88	; 136
     ac0:	86 b9       	out	0x06, r24	; 6
	
	sei();
     ac2:	78 94       	sei
	stop = 0;
     ac4:	10 92 6c 03 	sts	0x036C, r1
     ac8:	10 92 6b 03 	sts	0x036B, r1
}
     acc:	08 95       	ret

00000ace <poll_adc>:
     ace:	20 e9       	ldi	r18, 0x90	; 144
     ad0:	31 e0       	ldi	r19, 0x01	; 1
     ad2:	08 c0       	rjmp	.+16     	; 0xae4 <poll_adc+0x16>

void poll_adc(void) {

	while(stop == 0) {
		//get new conversion from ADC
		ADCSRA |= 1<<ADSC;
     ad4:	36 9a       	sbi	0x06, 6	; 6
     ad6:	84 ef       	ldi	r24, 0xF4	; 244
     ad8:	91 e0       	ldi	r25, 0x01	; 1
     ada:	f9 01       	movw	r30, r18
     adc:	31 97       	sbiw	r30, 0x01	; 1
     ade:	f1 f7       	brne	.-4      	; 0xadc <poll_adc+0xe>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ae0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ae2:	d9 f7       	brne	.-10     	; 0xada <poll_adc+0xc>
}


void poll_adc(void) {

	while(stop == 0) {
     ae4:	80 91 6b 03 	lds	r24, 0x036B
     ae8:	90 91 6c 03 	lds	r25, 0x036C
     aec:	89 2b       	or	r24, r25
     aee:	91 f3       	breq	.-28     	; 0xad4 <poll_adc+0x6>
		//get new conversion from ADC
		ADCSRA |= 1<<ADSC;
		//refresh the value every 100ms
		_delay_ms(50);
	}
}
     af0:	08 95       	ret

00000af2 <set_speed_north>:

/*
*	Sets the speed of the NORTH motor
*/
void set_speed_north(float multiplier) {
     af2:	af 92       	push	r10
     af4:	bf 92       	push	r11
     af6:	cf 92       	push	r12
     af8:	df 92       	push	r13
     afa:	ef 92       	push	r14
     afc:	ff 92       	push	r15
     afe:	0f 93       	push	r16
     b00:	1f 93       	push	r17
     b02:	7b 01       	movw	r14, r22
     b04:	8c 01       	movw	r16, r24

	float finalSpeed = ESC_LOW + (multiplier * (ESC_HIGH - ESC_LOW));
	OCR1A = ICR1 - finalSpeed;
     b06:	66 b5       	in	r22, 0x26	; 38
     b08:	77 b5       	in	r23, 0x27	; 39
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <__floatunsisf>
     b12:	5b 01       	movw	r10, r22
     b14:	6c 01       	movw	r12, r24
     b16:	c8 01       	movw	r24, r16
     b18:	b7 01       	movw	r22, r14
     b1a:	20 e0       	ldi	r18, 0x00	; 0
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	4a ef       	ldi	r20, 0xFA	; 250
     b20:	54 e4       	ldi	r21, 0x44	; 68
     b22:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <__mulsf3>
     b26:	20 e0       	ldi	r18, 0x00	; 0
     b28:	30 e0       	ldi	r19, 0x00	; 0
     b2a:	4a ef       	ldi	r20, 0xFA	; 250
     b2c:	54 e4       	ldi	r21, 0x44	; 68
     b2e:	0e 94 3f 0c 	call	0x187e	; 0x187e <__addsf3>
     b32:	9b 01       	movw	r18, r22
     b34:	ac 01       	movw	r20, r24
     b36:	c6 01       	movw	r24, r12
     b38:	b5 01       	movw	r22, r10
     b3a:	0e 94 3e 0c 	call	0x187c	; 0x187c <__subsf3>
     b3e:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <__fixunssfsi>
     b42:	7b bd       	out	0x2b, r23	; 43
     b44:	6a bd       	out	0x2a, r22	; 42
}
     b46:	1f 91       	pop	r17
     b48:	0f 91       	pop	r16
     b4a:	ff 90       	pop	r15
     b4c:	ef 90       	pop	r14
     b4e:	df 90       	pop	r13
     b50:	cf 90       	pop	r12
     b52:	bf 90       	pop	r11
     b54:	af 90       	pop	r10
     b56:	08 95       	ret

00000b58 <set_speed_south>:

/*
*	Sets the speed of the SOUTH motor
*/
void set_speed_south(float multiplier) {
     b58:	af 92       	push	r10
     b5a:	bf 92       	push	r11
     b5c:	cf 92       	push	r12
     b5e:	df 92       	push	r13
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	7b 01       	movw	r14, r22
     b6a:	8c 01       	movw	r16, r24
	
	float finalSpeed = ESC_LOW + (multiplier * (ESC_HIGH - ESC_LOW));
	OCR1B = ICR1 - finalSpeed;
     b6c:	66 b5       	in	r22, 0x26	; 38
     b6e:	77 b5       	in	r23, 0x27	; 39
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <__floatunsisf>
     b78:	5b 01       	movw	r10, r22
     b7a:	6c 01       	movw	r12, r24
     b7c:	c8 01       	movw	r24, r16
     b7e:	b7 01       	movw	r22, r14
     b80:	20 e0       	ldi	r18, 0x00	; 0
     b82:	30 e0       	ldi	r19, 0x00	; 0
     b84:	4a ef       	ldi	r20, 0xFA	; 250
     b86:	54 e4       	ldi	r21, 0x44	; 68
     b88:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <__mulsf3>
     b8c:	20 e0       	ldi	r18, 0x00	; 0
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	4a ef       	ldi	r20, 0xFA	; 250
     b92:	54 e4       	ldi	r21, 0x44	; 68
     b94:	0e 94 3f 0c 	call	0x187e	; 0x187e <__addsf3>
     b98:	9b 01       	movw	r18, r22
     b9a:	ac 01       	movw	r20, r24
     b9c:	c6 01       	movw	r24, r12
     b9e:	b5 01       	movw	r22, r10
     ba0:	0e 94 3e 0c 	call	0x187c	; 0x187c <__subsf3>
     ba4:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <__fixunssfsi>
     ba8:	79 bd       	out	0x29, r23	; 41
     baa:	68 bd       	out	0x28, r22	; 40
	
}
     bac:	1f 91       	pop	r17
     bae:	0f 91       	pop	r16
     bb0:	ff 90       	pop	r15
     bb2:	ef 90       	pop	r14
     bb4:	df 90       	pop	r13
     bb6:	cf 90       	pop	r12
     bb8:	bf 90       	pop	r11
     bba:	af 90       	pop	r10
     bbc:	08 95       	ret

00000bbe <set_speed_east>:


/*
*	Sets the speed of the EAST motor
*/
void set_speed_east(float multiplier) {
     bbe:	af 92       	push	r10
     bc0:	bf 92       	push	r11
     bc2:	cf 92       	push	r12
     bc4:	df 92       	push	r13
     bc6:	ef 92       	push	r14
     bc8:	ff 92       	push	r15
     bca:	0f 93       	push	r16
     bcc:	1f 93       	push	r17
     bce:	7b 01       	movw	r14, r22
     bd0:	8c 01       	movw	r16, r24

	float finalSpeed = ESC_LOW + (multiplier * (ESC_HIGH - ESC_LOW));
	OCR1C = ICR1 - finalSpeed;
     bd2:	66 b5       	in	r22, 0x26	; 38
     bd4:	77 b5       	in	r23, 0x27	; 39
     bd6:	80 e0       	ldi	r24, 0x00	; 0
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <__floatunsisf>
     bde:	5b 01       	movw	r10, r22
     be0:	6c 01       	movw	r12, r24
     be2:	c8 01       	movw	r24, r16
     be4:	b7 01       	movw	r22, r14
     be6:	20 e0       	ldi	r18, 0x00	; 0
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	4a ef       	ldi	r20, 0xFA	; 250
     bec:	54 e4       	ldi	r21, 0x44	; 68
     bee:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <__mulsf3>
     bf2:	20 e0       	ldi	r18, 0x00	; 0
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	4a ef       	ldi	r20, 0xFA	; 250
     bf8:	54 e4       	ldi	r21, 0x44	; 68
     bfa:	0e 94 3f 0c 	call	0x187e	; 0x187e <__addsf3>
     bfe:	9b 01       	movw	r18, r22
     c00:	ac 01       	movw	r20, r24
     c02:	c6 01       	movw	r24, r12
     c04:	b5 01       	movw	r22, r10
     c06:	0e 94 3e 0c 	call	0x187c	; 0x187c <__subsf3>
     c0a:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <__fixunssfsi>
     c0e:	70 93 79 00 	sts	0x0079, r23
     c12:	60 93 78 00 	sts	0x0078, r22
}
     c16:	1f 91       	pop	r17
     c18:	0f 91       	pop	r16
     c1a:	ff 90       	pop	r15
     c1c:	ef 90       	pop	r14
     c1e:	df 90       	pop	r13
     c20:	cf 90       	pop	r12
     c22:	bf 90       	pop	r11
     c24:	af 90       	pop	r10
     c26:	08 95       	ret

00000c28 <set_speed_west>:

/*
*	Sets the speed of the WEST motor
*/
void set_speed_west(float multiplier) {
     c28:	af 92       	push	r10
     c2a:	bf 92       	push	r11
     c2c:	cf 92       	push	r12
     c2e:	df 92       	push	r13
     c30:	ef 92       	push	r14
     c32:	ff 92       	push	r15
     c34:	0f 93       	push	r16
     c36:	1f 93       	push	r17
     c38:	7b 01       	movw	r14, r22
     c3a:	8c 01       	movw	r16, r24

	float finalSpeed = ESC_LOW + (multiplier * (ESC_HIGH - ESC_LOW));
	OCR3A = ICR1 - finalSpeed;
     c3c:	66 b5       	in	r22, 0x26	; 38
     c3e:	77 b5       	in	r23, 0x27	; 39
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <__floatunsisf>
     c48:	5b 01       	movw	r10, r22
     c4a:	6c 01       	movw	r12, r24
     c4c:	c8 01       	movw	r24, r16
     c4e:	b7 01       	movw	r22, r14
     c50:	20 e0       	ldi	r18, 0x00	; 0
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	4a ef       	ldi	r20, 0xFA	; 250
     c56:	54 e4       	ldi	r21, 0x44	; 68
     c58:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <__mulsf3>
     c5c:	20 e0       	ldi	r18, 0x00	; 0
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	4a ef       	ldi	r20, 0xFA	; 250
     c62:	54 e4       	ldi	r21, 0x44	; 68
     c64:	0e 94 3f 0c 	call	0x187e	; 0x187e <__addsf3>
     c68:	9b 01       	movw	r18, r22
     c6a:	ac 01       	movw	r20, r24
     c6c:	c6 01       	movw	r24, r12
     c6e:	b5 01       	movw	r22, r10
     c70:	0e 94 3e 0c 	call	0x187c	; 0x187c <__subsf3>
     c74:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <__fixunssfsi>
     c78:	70 93 87 00 	sts	0x0087, r23
     c7c:	60 93 86 00 	sts	0x0086, r22
}
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	cf 90       	pop	r12
     c8c:	bf 90       	pop	r11
     c8e:	af 90       	pop	r10
     c90:	08 95       	ret

00000c92 <speed_adc_north>:

/*
*	Computes the multiplier for the NORTH motor
*/
void speed_adc_north(float speed) {
     c92:	af 92       	push	r10
     c94:	bf 92       	push	r11
     c96:	cf 92       	push	r12
     c98:	df 92       	push	r13
     c9a:	ef 92       	push	r14
     c9c:	ff 92       	push	r15
     c9e:	0f 93       	push	r16
     ca0:	1f 93       	push	r17
     ca2:	7b 01       	movw	r14, r22
     ca4:	8c 01       	movw	r16, r24
*	Sets the speed of the NORTH motor
*/
void set_speed_north(float multiplier) {

	float finalSpeed = ESC_LOW + (multiplier * (ESC_HIGH - ESC_LOW));
	OCR1A = ICR1 - finalSpeed;
     ca6:	66 b5       	in	r22, 0x26	; 38
     ca8:	77 b5       	in	r23, 0x27	; 39
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <__floatunsisf>
     cb2:	5b 01       	movw	r10, r22
     cb4:	6c 01       	movw	r12, r24
     cb6:	c8 01       	movw	r24, r16
     cb8:	b7 01       	movw	r22, r14
     cba:	20 e0       	ldi	r18, 0x00	; 0
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	40 e8       	ldi	r20, 0x80	; 128
     cc0:	5a e3       	ldi	r21, 0x3A	; 58
     cc2:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <__mulsf3>
     cc6:	20 e0       	ldi	r18, 0x00	; 0
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	4a ef       	ldi	r20, 0xFA	; 250
     ccc:	54 e4       	ldi	r21, 0x44	; 68
     cce:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <__mulsf3>
     cd2:	20 e0       	ldi	r18, 0x00	; 0
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	4a ef       	ldi	r20, 0xFA	; 250
     cd8:	54 e4       	ldi	r21, 0x44	; 68
     cda:	0e 94 3f 0c 	call	0x187e	; 0x187e <__addsf3>
     cde:	9b 01       	movw	r18, r22
     ce0:	ac 01       	movw	r20, r24
     ce2:	c6 01       	movw	r24, r12
     ce4:	b5 01       	movw	r22, r10
     ce6:	0e 94 3e 0c 	call	0x187c	; 0x187c <__subsf3>
     cea:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <__fixunssfsi>
     cee:	7b bd       	out	0x2b, r23	; 43
     cf0:	6a bd       	out	0x2a, r22	; 42
*/
void speed_adc_north(float speed) {
	//change the speed of the motors
	float multiplier = speed / 1024;
	set_speed_north(multiplier);
}
     cf2:	1f 91       	pop	r17
     cf4:	0f 91       	pop	r16
     cf6:	ff 90       	pop	r15
     cf8:	ef 90       	pop	r14
     cfa:	df 90       	pop	r13
     cfc:	cf 90       	pop	r12
     cfe:	bf 90       	pop	r11
     d00:	af 90       	pop	r10
     d02:	08 95       	ret

00000d04 <speed_adc_south>:

/*
*	Computes the multiplier for the SOUTH motor
*/
void speed_adc_south(float speed) {
     d04:	af 92       	push	r10
     d06:	bf 92       	push	r11
     d08:	cf 92       	push	r12
     d0a:	df 92       	push	r13
     d0c:	ef 92       	push	r14
     d0e:	ff 92       	push	r15
     d10:	0f 93       	push	r16
     d12:	1f 93       	push	r17
     d14:	7b 01       	movw	r14, r22
     d16:	8c 01       	movw	r16, r24
*	Sets the speed of the SOUTH motor
*/
void set_speed_south(float multiplier) {
	
	float finalSpeed = ESC_LOW + (multiplier * (ESC_HIGH - ESC_LOW));
	OCR1B = ICR1 - finalSpeed;
     d18:	66 b5       	in	r22, 0x26	; 38
     d1a:	77 b5       	in	r23, 0x27	; 39
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <__floatunsisf>
     d24:	5b 01       	movw	r10, r22
     d26:	6c 01       	movw	r12, r24
     d28:	c8 01       	movw	r24, r16
     d2a:	b7 01       	movw	r22, r14
     d2c:	20 e0       	ldi	r18, 0x00	; 0
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	40 e8       	ldi	r20, 0x80	; 128
     d32:	5a e3       	ldi	r21, 0x3A	; 58
     d34:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <__mulsf3>
     d38:	20 e0       	ldi	r18, 0x00	; 0
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	4a ef       	ldi	r20, 0xFA	; 250
     d3e:	54 e4       	ldi	r21, 0x44	; 68
     d40:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <__mulsf3>
     d44:	20 e0       	ldi	r18, 0x00	; 0
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	4a ef       	ldi	r20, 0xFA	; 250
     d4a:	54 e4       	ldi	r21, 0x44	; 68
     d4c:	0e 94 3f 0c 	call	0x187e	; 0x187e <__addsf3>
     d50:	9b 01       	movw	r18, r22
     d52:	ac 01       	movw	r20, r24
     d54:	c6 01       	movw	r24, r12
     d56:	b5 01       	movw	r22, r10
     d58:	0e 94 3e 0c 	call	0x187c	; 0x187c <__subsf3>
     d5c:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <__fixunssfsi>
     d60:	79 bd       	out	0x29, r23	; 41
     d62:	68 bd       	out	0x28, r22	; 40
void speed_adc_south(float speed) {
	
	//change the speed of the motors
	float multiplier = speed / 1024;
	set_speed_south(multiplier);
}
     d64:	1f 91       	pop	r17
     d66:	0f 91       	pop	r16
     d68:	ff 90       	pop	r15
     d6a:	ef 90       	pop	r14
     d6c:	df 90       	pop	r13
     d6e:	cf 90       	pop	r12
     d70:	bf 90       	pop	r11
     d72:	af 90       	pop	r10
     d74:	08 95       	ret

00000d76 <__vector_16>:
		
		i2c_stop(); //Stop I2C communications
	}

}
ISR(TIMER0_OVF_vect) {
     d76:	1f 92       	push	r1
     d78:	0f 92       	push	r0
     d7a:	0f b6       	in	r0, 0x3f	; 63
     d7c:	0f 92       	push	r0
     d7e:	11 24       	eor	r1, r1
     d80:	8f 93       	push	r24
     d82:	9f 93       	push	r25
	//timer/counter reached its max value=2^8=255, update global counter for timer0
		count_ovf++;
     d84:	80 91 14 03 	lds	r24, 0x0314
     d88:	90 91 15 03 	lds	r25, 0x0315
     d8c:	01 96       	adiw	r24, 0x01	; 1
     d8e:	90 93 15 03 	sts	0x0315, r25
     d92:	80 93 14 03 	sts	0x0314, r24
	count_ovf_main++;
     d96:	80 91 16 03 	lds	r24, 0x0316
     d9a:	90 91 17 03 	lds	r25, 0x0317
     d9e:	01 96       	adiw	r24, 0x01	; 1
     da0:	90 93 17 03 	sts	0x0317, r25
     da4:	80 93 16 03 	sts	0x0316, r24
     da8:	9f 91       	pop	r25
     daa:	8f 91       	pop	r24
     dac:	0f 90       	pop	r0
     dae:	0f be       	out	0x3f, r0	; 63
     db0:	0f 90       	pop	r0
     db2:	1f 90       	pop	r1
     db4:	18 95       	reti

00000db6 <writeString>:


/*
*	Writes a String into a FIFOQueue's buffer
*/
void writeString(char* str) {
     db6:	ef 92       	push	r14
     db8:	ff 92       	push	r15
     dba:	0f 93       	push	r16
     dbc:	1f 93       	push	r17
     dbe:	cf 93       	push	r28
     dc0:	df 93       	push	r29
     dc2:	7c 01       	movw	r14, r24

	int length = strlen(str);
     dc4:	dc 01       	movw	r26, r24
     dc6:	0d 90       	ld	r0, X+
     dc8:	00 20       	and	r0, r0
     dca:	e9 f7       	brne	.-6      	; 0xdc6 <writeString+0x10>
     dcc:	8d 01       	movw	r16, r26
     dce:	01 50       	subi	r16, 0x01	; 1
     dd0:	10 40       	sbci	r17, 0x00	; 0
     dd2:	08 1b       	sub	r16, r24
     dd4:	19 0b       	sbc	r17, r25
     dd6:	c0 e0       	ldi	r28, 0x00	; 0
     dd8:	d0 e0       	ldi	r29, 0x00	; 0
     dda:	09 c0       	rjmp	.+18     	; 0xdee <writeString+0x38>
	int i = 0;

	while((full(&writeQueue) == false) && (length-- > 0)) {
		enqueue(&writeQueue, str[i]);
     ddc:	f7 01       	movw	r30, r14
     dde:	ec 0f       	add	r30, r28
     de0:	fd 1f       	adc	r31, r29
     de2:	8e e8       	ldi	r24, 0x8E	; 142
     de4:	93 e0       	ldi	r25, 0x03	; 3
     de6:	60 81       	ld	r22, Z
     de8:	0e 94 3a 01 	call	0x274	; 0x274 <enqueue>
		i++;
     dec:	21 96       	adiw	r28, 0x01	; 1

/*
*	Returns true if the FIFOQueue is Full, false otherwise
*/
bool full(FIFOQueue *q) {
	if(q->count >= QUEUESIZE) {
     dee:	80 91 92 07 	lds	r24, 0x0792
     df2:	90 91 93 07 	lds	r25, 0x0793
     df6:	80 50       	subi	r24, 0x00	; 0
     df8:	94 40       	sbci	r25, 0x04	; 4
     dfa:	74 f0       	brlt	.+28     	; 0xe18 <writeString+0x62>
	while((full(&writeQueue) == false) && (length-- > 0)) {
		enqueue(&writeQueue, str[i]);
		i++;
	}

	terminate_queue(&writeQueue);
     dfc:	8e e8       	ldi	r24, 0x8E	; 142
     dfe:	93 e0       	ldi	r25, 0x03	; 3
     e00:	0e 94 9a 01 	call	0x334	; 0x334 <terminate_queue>
*	TXEN0 - Enables Transmitter USART0
*	UDRIE0 - Enables UDR Empty Interrupt
*/
void enableTX(void) {

	UCSR0B |= (1<<TXEN0) | (1<<UDRIE0);
     e04:	8a b1       	in	r24, 0x0a	; 10
     e06:	88 62       	ori	r24, 0x28	; 40
     e08:	8a b9       	out	0x0a, r24	; 10
		i++;
	}

	terminate_queue(&writeQueue);
	enableTX();
}
     e0a:	df 91       	pop	r29
     e0c:	cf 91       	pop	r28
     e0e:	1f 91       	pop	r17
     e10:	0f 91       	pop	r16
     e12:	ff 90       	pop	r15
     e14:	ef 90       	pop	r14
     e16:	08 95       	ret
void writeString(char* str) {

	int length = strlen(str);
	int i = 0;

	while((full(&writeQueue) == false) && (length-- > 0)) {
     e18:	c8 01       	movw	r24, r16
     e1a:	8c 1b       	sub	r24, r28
     e1c:	9d 0b       	sbc	r25, r29
     e1e:	18 16       	cp	r1, r24
     e20:	19 06       	cpc	r1, r25
     e22:	e4 f2       	brlt	.-72     	; 0xddc <writeString+0x26>
     e24:	eb cf       	rjmp	.-42     	; 0xdfc <writeString+0x46>

00000e26 <__vector_33>:
		speed_adc_south(theTenBitResult);
		ADMUX=0x40;
	}
}

ISR(TWI_vect) {
     e26:	1f 92       	push	r1
     e28:	0f 92       	push	r0
     e2a:	0f b6       	in	r0, 0x3f	; 63
     e2c:	0f 92       	push	r0
     e2e:	0b b6       	in	r0, 0x3b	; 59
     e30:	0f 92       	push	r0
     e32:	11 24       	eor	r1, r1
     e34:	0f 93       	push	r16
     e36:	1f 93       	push	r17
     e38:	2f 93       	push	r18
     e3a:	3f 93       	push	r19
     e3c:	4f 93       	push	r20
     e3e:	5f 93       	push	r21
     e40:	6f 93       	push	r22
     e42:	7f 93       	push	r23
     e44:	8f 93       	push	r24
     e46:	9f 93       	push	r25
     e48:	af 93       	push	r26
     e4a:	bf 93       	push	r27
     e4c:	ef 93       	push	r30
     e4e:	ff 93       	push	r31
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
     e58:	2a 97       	sbiw	r28, 0x0a	; 10
     e5a:	de bf       	out	0x3e, r29	; 62
     e5c:	cd bf       	out	0x3d, r28	; 61
	
	char str[10];
	
	if (TW_STATUS==TW_START){
     e5e:	80 91 71 00 	lds	r24, 0x0071
     e62:	88 7f       	andi	r24, 0xF8	; 248
     e64:	88 30       	cpi	r24, 0x08	; 8
     e66:	19 f4       	brne	.+6      	; 0xe6e <__vector_33+0x48>
		//writeString("start");
		//enableTX();
		
		i2c_send_data(SENS_AD_W);
     e68:	80 91 1e 03 	lds	r24, 0x031E
     e6c:	0f c0       	rjmp	.+30     	; 0xe8c <__vector_33+0x66>
		
	}else if(TW_STATUS==TW_REP_START){
     e6e:	80 91 71 00 	lds	r24, 0x0071
     e72:	88 7f       	andi	r24, 0xF8	; 248
     e74:	80 31       	cpi	r24, 0x10	; 16
     e76:	19 f4       	brne	.+6      	; 0xe7e <__vector_33+0x58>
		//writeString("Repeat start");
		//enableTX();
		
		i2c_send_data(SENS_AD_R);
     e78:	80 91 1c 03 	lds	r24, 0x031C
     e7c:	07 c0       	rjmp	.+14     	; 0xe8c <__vector_33+0x66>
	}
	else if (TW_STATUS == TW_MT_SLA_ACK){ // Master transmit mode
     e7e:	80 91 71 00 	lds	r24, 0x0071
     e82:	88 7f       	andi	r24, 0xF8	; 248
     e84:	88 31       	cpi	r24, 0x18	; 24
     e86:	29 f4       	brne	.+10     	; 0xe92 <__vector_33+0x6c>
		//writeString("Acknowledged I2c Address..sending Reg Addr");
		//enableTX();
	
		i2c_send_data(SENS_RA); //sending register address
     e88:	80 91 20 03 	lds	r24, 0x0320

/*
*	Send a byte of data via I2C
*/
void i2c_send_data(uint8_t data) {
	TWDR = data;
     e8c:	80 93 73 00 	sts	0x0073, r24
     e90:	67 c0       	rjmp	.+206    	; 0xf60 <__vector_33+0x13a>
		//writeString("Acknowledged I2c Address..sending Reg Addr");
		//enableTX();
	
		i2c_send_data(SENS_RA); //sending register address

	}else if (TW_STATUS==TW_MT_DATA_ACK){ //Sensor received data
     e92:	80 91 71 00 	lds	r24, 0x0071
     e96:	88 7f       	andi	r24, 0xF8	; 248
     e98:	88 32       	cpi	r24, 0x28	; 40
     e9a:	11 f5       	brne	.+68     	; 0xee0 <__vector_33+0xba>
		
		/*
			If write mode, SEND DATA here
			else send repeat START
		*/
		if(SENS_WRITE_MODE == true) {
     e9c:	80 91 1a 03 	lds	r24, 0x031A
     ea0:	88 23       	and	r24, r24
     ea2:	d1 f0       	breq	.+52     	; 0xed8 <__vector_33+0xb2>
			if(SENS_DATA_SENT == false) {
     ea4:	80 91 1b 03 	lds	r24, 0x031B
     ea8:	88 23       	and	r24, r24
     eaa:	59 f4       	brne	.+22     	; 0xec2 <__vector_33+0x9c>
				i2c_send_data(SENS_RA_DATA);
     eac:	80 91 22 03 	lds	r24, 0x0322

/*
*	Send a byte of data via I2C
*/
void i2c_send_data(uint8_t data) {
	TWDR = data;
     eb0:	80 93 73 00 	sts	0x0073, r24
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWIE);
     eb4:	85 e8       	ldi	r24, 0x85	; 133
     eb6:	80 93 74 00 	sts	0x0074, r24
		if(SENS_WRITE_MODE == true) {
			if(SENS_DATA_SENT == false) {
				i2c_send_data(SENS_RA_DATA);
				
				//set the flag after data sent
				SENS_DATA_SENT = true;
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	80 93 1b 03 	sts	0x031B, r24
     ec0:	6e c0       	rjmp	.+220    	; 0xf9e <__vector_33+0x178>
			}else {
				
				//turn off writing
				SENS_WRITE_MODE = false;
     ec2:	10 92 1a 03 	sts	0x031A, r1

/*
*	Stop I2C Communications
*/
void i2c_stop(void) {
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     ec6:	84 e9       	ldi	r24, 0x94	; 148
     ec8:	80 93 74 00 	sts	0x0074, r24
				//turn off writing
				SENS_WRITE_MODE = false;
				i2c_stop();
				
				//callback after complete
				ptrSensCallback();
     ecc:	e0 91 ad 0b 	lds	r30, 0x0BAD
     ed0:	f0 91 ae 0b 	lds	r31, 0x0BAE
     ed4:	09 95       	icall
     ed6:	63 c0       	rjmp	.+198    	; 0xf9e <__vector_33+0x178>

/*
*	I2C Start command
*/
void i2c_send_start(void) {
	TWCR |= (1<<TWINT) | (1<<TWSTA) | (1<<TWEN) | (1<<TWIE);
     ed8:	80 91 74 00 	lds	r24, 0x0074
     edc:	85 6a       	ori	r24, 0xA5	; 165
     ede:	5d c0       	rjmp	.+186    	; 0xf9a <__vector_33+0x174>
		}else {
			i2c_send_start(); //second start
		}
		
		
	}else if(TW_STATUS==TW_MR_SLA_ACK){
     ee0:	80 91 71 00 	lds	r24, 0x0071
     ee4:	88 7f       	andi	r24, 0xF8	; 248
     ee6:	80 34       	cpi	r24, 0x40	; 64
     ee8:	71 f1       	breq	.+92     	; 0xf46 <__vector_33+0x120>
		}else {
			//Send a NACK to the sensor to terminate transmission
			TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWIE);
		}
		
 	}else if(TW_STATUS==TW_MR_DATA_NACK){
     eea:	80 91 71 00 	lds	r24, 0x0071
     eee:	88 7f       	andi	r24, 0xF8	; 248
     ef0:	88 35       	cpi	r24, 0x58	; 88
     ef2:	a9 f4       	brne	.+42     	; 0xf1e <__vector_33+0xf8>
	
		//writeString("Sending data....");
		//enableTX();
		
		SENS_DATA[SENS_BURSTS] = TWDR;
     ef4:	80 91 24 03 	lds	r24, 0x0324
     ef8:	20 91 73 00 	lds	r18, 0x0073
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	e0 91 af 0b 	lds	r30, 0x0BAF
     f06:	f0 91 b0 0b 	lds	r31, 0x0BB0
     f0a:	e8 0f       	add	r30, r24
     f0c:	f9 1f       	adc	r31, r25
     f0e:	20 83       	st	Z, r18
     f10:	11 82       	std	Z+1, r1	; 0x01
		
		//itoa(SENS_DATA[SENS_BURSTS], str, 10);
		//writeString(str);
		//enableTX();
		
		ptrSensCallback();
     f12:	e0 91 ad 0b 	lds	r30, 0x0BAD
     f16:	f0 91 ae 0b 	lds	r31, 0x0BAE
     f1a:	09 95       	icall
     f1c:	3d c0       	rjmp	.+122    	; 0xf98 <__vector_33+0x172>
		
		i2c_stop();
		
	}else if(TW_STATUS==TW_MR_DATA_ACK){
     f1e:	80 91 71 00 	lds	r24, 0x0071
     f22:	88 7f       	andi	r24, 0xF8	; 248
     f24:	80 35       	cpi	r24, 0x50	; 80
     f26:	f1 f4       	brne	.+60     	; 0xf64 <__vector_33+0x13e>
		
		//writeString("Acknowledged received data MR_DATA_ACK");
		//enableTX();
		
		SENS_DATA[SENS_BURSTS] = TWDR;
     f28:	80 91 24 03 	lds	r24, 0x0324
     f2c:	20 91 73 00 	lds	r18, 0x0073
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	88 0f       	add	r24, r24
     f34:	99 1f       	adc	r25, r25
     f36:	e0 91 af 0b 	lds	r30, 0x0BAF
     f3a:	f0 91 b0 0b 	lds	r31, 0x0BB0
     f3e:	e8 0f       	add	r30, r24
     f40:	f9 1f       	adc	r31, r25
     f42:	20 83       	st	Z, r18
     f44:	11 82       	std	Z+1, r1	; 0x01
		
		//itoa(SENS_DATA[SENS_BURSTS], str, 10);
		//writeString(str);
		//enableTX();
		
		SENS_BURSTS--;
     f46:	80 91 24 03 	lds	r24, 0x0324
     f4a:	81 50       	subi	r24, 0x01	; 1
     f4c:	80 93 24 03 	sts	0x0324, r24
		
		if(SENS_BURSTS > 0) {
     f50:	80 91 24 03 	lds	r24, 0x0324
     f54:	88 23       	and	r24, r24
     f56:	21 f0       	breq	.+8      	; 0xf60 <__vector_33+0x13a>
			//Send ACK to Sensor to perform a BURST read
			//BURST is controlled by the TWEA bit, if set ACK is sent
			TWCR |= (1<<TWINT) | (1<<TWEN) | (1<<TWIE) | (1<<TWEA); 
     f58:	80 91 74 00 	lds	r24, 0x0074
     f5c:	85 6c       	ori	r24, 0xC5	; 197
     f5e:	1d c0       	rjmp	.+58     	; 0xf9a <__vector_33+0x174>
		}else {
			//Send a NACK to the sensor to terminate transmission
			TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWIE);
     f60:	85 e8       	ldi	r24, 0x85	; 133
     f62:	1b c0       	rjmp	.+54     	; 0xf9a <__vector_33+0x174>
		}
		
	}else{
		writeString("Unhandled State (Status Code):");
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	91 e0       	ldi	r25, 0x01	; 1
     f68:	0e 94 db 06 	call	0xdb6	; 0xdb6 <writeString>
*	TXEN0 - Enables Transmitter USART0
*	UDRIE0 - Enables UDR Empty Interrupt
*/
void enableTX(void) {

	UCSR0B |= (1<<TXEN0) | (1<<UDRIE0);
     f6c:	8a b1       	in	r24, 0x0a	; 10
     f6e:	88 62       	ori	r24, 0x28	; 40
     f70:	8a b9       	out	0x0a, r24	; 10
		enableTX();
	
		//Print out the unhandled status code
		itoa(TW_STATUS, str, 10);
     f72:	80 91 71 00 	lds	r24, 0x0071
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	88 7f       	andi	r24, 0xF8	; 248
     f7a:	90 70       	andi	r25, 0x00	; 0
     f7c:	8e 01       	movw	r16, r28
     f7e:	0f 5f       	subi	r16, 0xFF	; 255
     f80:	1f 4f       	sbci	r17, 0xFF	; 255
     f82:	b8 01       	movw	r22, r16
     f84:	4a e0       	ldi	r20, 0x0A	; 10
     f86:	50 e0       	ldi	r21, 0x00	; 0
     f88:	0e 94 3b 10 	call	0x2076	; 0x2076 <itoa>
		writeString(str);
     f8c:	c8 01       	movw	r24, r16
     f8e:	0e 94 db 06 	call	0xdb6	; 0xdb6 <writeString>
     f92:	8a b1       	in	r24, 0x0a	; 10
     f94:	88 62       	ori	r24, 0x28	; 40
     f96:	8a b9       	out	0x0a, r24	; 10

/*
*	Stop I2C Communications
*/
void i2c_stop(void) {
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     f98:	84 e9       	ldi	r24, 0x94	; 148
     f9a:	80 93 74 00 	sts	0x0074, r24
		enableTX();
		
		i2c_stop(); //Stop I2C communications
	}

}
     f9e:	2a 96       	adiw	r28, 0x0a	; 10
     fa0:	de bf       	out	0x3e, r29	; 62
     fa2:	cd bf       	out	0x3d, r28	; 61
     fa4:	cf 91       	pop	r28
     fa6:	df 91       	pop	r29
     fa8:	ff 91       	pop	r31
     faa:	ef 91       	pop	r30
     fac:	bf 91       	pop	r27
     fae:	af 91       	pop	r26
     fb0:	9f 91       	pop	r25
     fb2:	8f 91       	pop	r24
     fb4:	7f 91       	pop	r23
     fb6:	6f 91       	pop	r22
     fb8:	5f 91       	pop	r21
     fba:	4f 91       	pop	r20
     fbc:	3f 91       	pop	r19
     fbe:	2f 91       	pop	r18
     fc0:	1f 91       	pop	r17
     fc2:	0f 91       	pop	r16
     fc4:	0f 90       	pop	r0
     fc6:	0b be       	out	0x3b, r0	; 59
     fc8:	0f 90       	pop	r0
     fca:	0f be       	out	0x3f, r0	; 63
     fcc:	0f 90       	pop	r0
     fce:	1f 90       	pop	r1
     fd0:	18 95       	reti

00000fd2 <__vector_21>:
		}
		
	}
}

ISR(ADC_vect) {
     fd2:	1f 92       	push	r1
     fd4:	0f 92       	push	r0
     fd6:	0f b6       	in	r0, 0x3f	; 63
     fd8:	0f 92       	push	r0
     fda:	0b b6       	in	r0, 0x3b	; 59
     fdc:	0f 92       	push	r0
     fde:	11 24       	eor	r1, r1
     fe0:	2f 93       	push	r18
     fe2:	3f 93       	push	r19
     fe4:	4f 93       	push	r20
     fe6:	5f 93       	push	r21
     fe8:	6f 93       	push	r22
     fea:	7f 93       	push	r23
     fec:	8f 93       	push	r24
     fee:	9f 93       	push	r25
     ff0:	af 93       	push	r26
     ff2:	bf 93       	push	r27
     ff4:	cf 93       	push	r28
     ff6:	df 93       	push	r29
     ff8:	ef 93       	push	r30
     ffa:	ff 93       	push	r31

	uint8_t theLow = ADCL;
     ffc:	34 b1       	in	r19, 0x04	; 4
	uint16_t theTenBitResult = ADCH<<8 | theLow;
     ffe:	25 b1       	in	r18, 0x05	; 5
    1000:	92 2f       	mov	r25, r18
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	c3 2f       	mov	r28, r19
    1006:	d0 e0       	ldi	r29, 0x00	; 0
    1008:	c8 2b       	or	r28, r24
    100a:	d9 2b       	or	r29, r25

	itoa(theTenBitResult, adcResult1, 10);
    100c:	ce 01       	movw	r24, r28
    100e:	6b e7       	ldi	r22, 0x7B	; 123
    1010:	73 e0       	ldi	r23, 0x03	; 3
    1012:	4a e0       	ldi	r20, 0x0A	; 10
    1014:	50 e0       	ldi	r21, 0x00	; 0
    1016:	0e 94 3b 10 	call	0x2076	; 0x2076 <itoa>
	writeString(adcResult1);
    101a:	8b e7       	ldi	r24, 0x7B	; 123
    101c:	93 e0       	ldi	r25, 0x03	; 3
    101e:	0e 94 db 06 	call	0xdb6	; 0xdb6 <writeString>
    1022:	8a b1       	in	r24, 0x0a	; 10
    1024:	88 62       	ori	r24, 0x28	; 40
    1026:	8a b9       	out	0x0a, r24	; 10
	enableTX();
	
	
	if ( ADMUX==0x40 ){
    1028:	87 b1       	in	r24, 0x07	; 7
    102a:	80 34       	cpi	r24, 0x40	; 64
    102c:	81 f4       	brne	.+32     	; 0x104e <__vector_21+0x7c>
		writeString(adcResult1);
    102e:	8b e7       	ldi	r24, 0x7B	; 123
    1030:	93 e0       	ldi	r25, 0x03	; 3
    1032:	0e 94 db 06 	call	0xdb6	; 0xdb6 <writeString>
    1036:	8a b1       	in	r24, 0x0a	; 10
    1038:	88 62       	ori	r24, 0x28	; 40
    103a:	8a b9       	out	0x0a, r24	; 10
		enableTX();
		speed_adc_north(theTenBitResult);
    103c:	be 01       	movw	r22, r28
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <__floatunsisf>
    1046:	0e 94 49 06 	call	0xc92	; 0xc92 <speed_adc_north>
		ADMUX=0x41;
    104a:	81 e4       	ldi	r24, 0x41	; 65
    104c:	12 c0       	rjmp	.+36     	; 0x1072 <__vector_21+0xa0>
	}
	else if( ADMUX==0x41 ){
    104e:	87 b1       	in	r24, 0x07	; 7
    1050:	81 34       	cpi	r24, 0x41	; 65
    1052:	81 f4       	brne	.+32     	; 0x1074 <__vector_21+0xa2>
		writeString(adcResult1);
    1054:	8b e7       	ldi	r24, 0x7B	; 123
    1056:	93 e0       	ldi	r25, 0x03	; 3
    1058:	0e 94 db 06 	call	0xdb6	; 0xdb6 <writeString>
    105c:	8a b1       	in	r24, 0x0a	; 10
    105e:	88 62       	ori	r24, 0x28	; 40
    1060:	8a b9       	out	0x0a, r24	; 10
		enableTX();
		speed_adc_south(theTenBitResult);
    1062:	be 01       	movw	r22, r28
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <__floatunsisf>
    106c:	0e 94 82 06 	call	0xd04	; 0xd04 <speed_adc_south>
		ADMUX=0x40;
    1070:	80 e4       	ldi	r24, 0x40	; 64
    1072:	87 b9       	out	0x07, r24	; 7
	}
}
    1074:	ff 91       	pop	r31
    1076:	ef 91       	pop	r30
    1078:	df 91       	pop	r29
    107a:	cf 91       	pop	r28
    107c:	bf 91       	pop	r27
    107e:	af 91       	pop	r26
    1080:	9f 91       	pop	r25
    1082:	8f 91       	pop	r24
    1084:	7f 91       	pop	r23
    1086:	6f 91       	pop	r22
    1088:	5f 91       	pop	r21
    108a:	4f 91       	pop	r20
    108c:	3f 91       	pop	r19
    108e:	2f 91       	pop	r18
    1090:	0f 90       	pop	r0
    1092:	0b be       	out	0x3b, r0	; 59
    1094:	0f 90       	pop	r0
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	0f 90       	pop	r0
    109a:	1f 90       	pop	r1
    109c:	18 95       	reti

0000109e <printRfData>:
	
	writeString(acclMsg);
	enableTX();
}

void printRfData(void){
    109e:	0f 93       	push	r16
    10a0:	1f 93       	push	r17
    10a2:	df 93       	push	r29
    10a4:	cf 93       	push	r28
    10a6:	cd b7       	in	r28, 0x3d	; 61
    10a8:	de b7       	in	r29, 0x3e	; 62
    10aa:	64 97       	sbiw	r28, 0x14	; 20
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	f8 94       	cli
    10b0:	de bf       	out	0x3e, r29	; 62
    10b2:	0f be       	out	0x3f, r0	; 63
    10b4:	cd bf       	out	0x3d, r28	; 61
	char str[20];
	sprintf(str, "(rF) %d", calibrate(pulse_distance, -3));
    10b6:	20 91 12 03 	lds	r18, 0x0312
    10ba:	30 91 13 03 	lds	r19, 0x0313
    10be:	00 d0       	rcall	.+0      	; 0x10c0 <printRfData+0x22>
    10c0:	00 d0       	rcall	.+0      	; 0x10c2 <printRfData+0x24>
    10c2:	00 d0       	rcall	.+0      	; 0x10c4 <printRfData+0x26>
    10c4:	ed b7       	in	r30, 0x3d	; 61
    10c6:	fe b7       	in	r31, 0x3e	; 62
    10c8:	31 96       	adiw	r30, 0x01	; 1
    10ca:	8e 01       	movw	r16, r28
    10cc:	0f 5f       	subi	r16, 0xFF	; 255
    10ce:	1f 4f       	sbci	r17, 0xFF	; 255
    10d0:	ad b7       	in	r26, 0x3d	; 61
    10d2:	be b7       	in	r27, 0x3e	; 62
    10d4:	12 96       	adiw	r26, 0x02	; 2
    10d6:	1c 93       	st	X, r17
    10d8:	0e 93       	st	-X, r16
    10da:	11 97       	sbiw	r26, 0x01	; 1
    10dc:	8f e1       	ldi	r24, 0x1F	; 31
    10de:	91 e0       	ldi	r25, 0x01	; 1
    10e0:	93 83       	std	Z+3, r25	; 0x03
    10e2:	82 83       	std	Z+2, r24	; 0x02
    10e4:	23 50       	subi	r18, 0x03	; 3
    10e6:	30 40       	sbci	r19, 0x00	; 0
    10e8:	35 83       	std	Z+5, r19	; 0x05
    10ea:	24 83       	std	Z+4, r18	; 0x04
    10ec:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <sprintf>
	writeString(str);
    10f0:	8d b7       	in	r24, 0x3d	; 61
    10f2:	9e b7       	in	r25, 0x3e	; 62
    10f4:	06 96       	adiw	r24, 0x06	; 6
    10f6:	0f b6       	in	r0, 0x3f	; 63
    10f8:	f8 94       	cli
    10fa:	9e bf       	out	0x3e, r25	; 62
    10fc:	0f be       	out	0x3f, r0	; 63
    10fe:	8d bf       	out	0x3d, r24	; 61
    1100:	c8 01       	movw	r24, r16
    1102:	0e 94 db 06 	call	0xdb6	; 0xdb6 <writeString>
    1106:	8a b1       	in	r24, 0x0a	; 10
    1108:	88 62       	ori	r24, 0x28	; 40
    110a:	8a b9       	out	0x0a, r24	; 10
	enableTX();

}
    110c:	64 96       	adiw	r28, 0x14	; 20
    110e:	0f b6       	in	r0, 0x3f	; 63
    1110:	f8 94       	cli
    1112:	de bf       	out	0x3e, r29	; 62
    1114:	0f be       	out	0x3f, r0	; 63
    1116:	cd bf       	out	0x3d, r28	; 61
    1118:	cf 91       	pop	r28
    111a:	df 91       	pop	r29
    111c:	1f 91       	pop	r17
    111e:	0f 91       	pop	r16
    1120:	08 95       	ret

00001122 <main>:


int main(void) {
    1122:	8f 92       	push	r8
    1124:	9f 92       	push	r9
    1126:	af 92       	push	r10
    1128:	bf 92       	push	r11
    112a:	cf 92       	push	r12
    112c:	df 92       	push	r13
    112e:	ef 92       	push	r14
    1130:	ff 92       	push	r15
    1132:	0f 93       	push	r16
    1134:	1f 93       	push	r17
    1136:	cf 93       	push	r28
    1138:	df 93       	push	r29
	
	RF_init();
    113a:	0e 94 63 03 	call	0x6c6	; 0x6c6 <RF_init>
	//store the pointer to the parseCommand() method
	ptrParseFunction = parseCommand;
    113e:	86 e0       	ldi	r24, 0x06	; 6
    1140:	9b e0       	ldi	r25, 0x0B	; 11
    1142:	90 93 8c 03 	sts	0x038C, r25
    1146:	80 93 8b 03 	sts	0x038B, r24
	
	//begin USART session
	USART_Init(ptrParseFunction);
    114a:	0e 94 f5 01 	call	0x3ea	; 0x3ea <USART_Init>
	
	//set interrputs
	sei();
    114e:	78 94       	sei
	i2c_send_start();
}

void init_i2c(void) {
	//set bitrate 100Khz
	TWBR = 0x48;
    1150:	88 e4       	ldi	r24, 0x48	; 72
    1152:	80 93 70 00 	sts	0x0070, r24
		TWEN - Enables two wire interface
		TWIE - Enables TWI interrupts
		TWEA - Enable Acknowledge Bit so ACK pulse is generated when slave
			   address or data bas been received
	*/
	TWCR = 1<<TWEA;
    1156:	80 e4       	ldi	r24, 0x40	; 64
    1158:	80 93 74 00 	sts	0x0074, r24
	
	//init_pwm();
	
	init_i2c();
	
	init_accl();
    115c:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <init_accl>

}

void trigger(void){
	PORTB |= (1<<PIN4);
	pulse_flag=1;
    1160:	88 24       	eor	r8, r8
    1162:	83 94       	inc	r8
		all the necessary information is present for that
	*/
	SENS_AD_R = sensor_addr_r;
	SENS_AD_W = sensor_addr_w;
	SENS_RA	  = sensor_register_addr;
	SENS_BURSTS = bursts;
    1164:	b6 e0       	ldi	r27, 0x06	; 6
    1166:	9b 2e       	mov	r9, r27
	/*
		setup generic values used in the I2C communications
		Since everything is interrupt driven we have to make sure
		all the necessary information is present for that
	*/
	SENS_AD_R = sensor_addr_r;
    1168:	a7 ea       	ldi	r26, 0xA7	; 167
    116a:	aa 2e       	mov	r10, r26
    116c:	b1 2c       	mov	r11, r1
	SENS_AD_W = sensor_addr_w;
    116e:	f6 ea       	ldi	r31, 0xA6	; 166
    1170:	cf 2e       	mov	r12, r31
    1172:	d1 2c       	mov	r13, r1
	SENS_RA	  = sensor_register_addr;
    1174:	e2 e3       	ldi	r30, 0x32	; 50
    1176:	ee 2e       	mov	r14, r30
    1178:	f1 2c       	mov	r15, r1
	SENS_BURSTS = bursts;
	SENS_DATA = data_reg;
    117a:	0f e9       	ldi	r16, 0x9F	; 159
    117c:	1b e0       	ldi	r17, 0x0B	; 11
	ptrSensCallback = callback;
    117e:	c1 e2       	ldi	r28, 0x21	; 33
    1180:	da e0       	ldi	r29, 0x0A	; 10
	timing_flag=0;

}

void trigger(void){
	PORTB |= (1<<PIN4);
    1182:	c4 9a       	sbi	0x18, 4	; 24
	pulse_flag=1;
    1184:	80 92 94 07 	sts	0x0794, r8
	TCNT0=0;
    1188:	12 be       	out	0x32, r1	; 50
	while(1) {
		trigger();
		//_delay_ms(50);
		
		
		if (count_ovf_main >= 2500){
    118a:	80 91 16 03 	lds	r24, 0x0316
    118e:	90 91 17 03 	lds	r25, 0x0317
    1192:	84 5c       	subi	r24, 0xC4	; 196
    1194:	99 40       	sbci	r25, 0x09	; 9
    1196:	a8 f3       	brcs	.-22     	; 0x1182 <main+0x60>
			count_ovf_main=0;
    1198:	10 92 17 03 	sts	0x0317, r1
    119c:	10 92 16 03 	sts	0x0316, r1
			printRfData();
    11a0:	0e 94 4f 08 	call	0x109e	; 0x109e <printRfData>
		all the necessary information is present for that
	*/
	SENS_AD_R = sensor_addr_r;
	SENS_AD_W = sensor_addr_w;
	SENS_RA	  = sensor_register_addr;
	SENS_BURSTS = bursts;
    11a4:	90 92 24 03 	sts	0x0324, r9

/*
*	I2C Start command
*/
void i2c_send_start(void) {
	TWCR |= (1<<TWINT) | (1<<TWSTA) | (1<<TWEN) | (1<<TWIE);
    11a8:	80 91 74 00 	lds	r24, 0x0074
    11ac:	85 6a       	ori	r24, 0xA5	; 165
    11ae:	80 93 74 00 	sts	0x0074, r24
	/*
		setup generic values used in the I2C communications
		Since everything is interrupt driven we have to make sure
		all the necessary information is present for that
	*/
	SENS_AD_R = sensor_addr_r;
    11b2:	b0 92 1d 03 	sts	0x031D, r11
    11b6:	a0 92 1c 03 	sts	0x031C, r10
	SENS_AD_W = sensor_addr_w;
    11ba:	d0 92 1f 03 	sts	0x031F, r13
    11be:	c0 92 1e 03 	sts	0x031E, r12
	SENS_RA	  = sensor_register_addr;
    11c2:	f0 92 21 03 	sts	0x0321, r15
    11c6:	e0 92 20 03 	sts	0x0320, r14
	SENS_BURSTS = bursts;
    11ca:	90 92 24 03 	sts	0x0324, r9
	SENS_DATA = data_reg;
    11ce:	10 93 b0 0b 	sts	0x0BB0, r17
    11d2:	00 93 af 0b 	sts	0x0BAF, r16
	ptrSensCallback = callback;
    11d6:	d0 93 ae 0b 	sts	0x0BAE, r29
    11da:	c0 93 ad 0b 	sts	0x0BAD, r28

/*
*	I2C Start command
*/
void i2c_send_start(void) {
	TWCR |= (1<<TWINT) | (1<<TWSTA) | (1<<TWEN) | (1<<TWIE);
    11de:	80 91 74 00 	lds	r24, 0x0074
    11e2:	85 6a       	ori	r24, 0xA5	; 165
    11e4:	80 93 74 00 	sts	0x0074, r24
    11e8:	cc cf       	rjmp	.-104    	; 0x1182 <main+0x60>

000011ea <printAcclData>:


/*
*	Prints a string representation of the Accelerometer Data
*/
void printAcclData(void) {
    11ea:	af 92       	push	r10
    11ec:	bf 92       	push	r11
    11ee:	cf 92       	push	r12
    11f0:	df 92       	push	r13
    11f2:	ef 92       	push	r14
    11f4:	ff 92       	push	r15
    11f6:	0f 93       	push	r16
    11f8:	1f 93       	push	r17
    11fa:	df 93       	push	r29
    11fc:	cf 93       	push	r28
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
    1202:	c2 58       	subi	r28, 0x82	; 130
    1204:	d0 40       	sbci	r29, 0x00	; 0
    1206:	0f b6       	in	r0, 0x3f	; 63
    1208:	f8 94       	cli
    120a:	de bf       	out	0x3e, r29	; 62
    120c:	0f be       	out	0x3f, r0	; 63
    120e:	cd bf       	out	0x3d, r28	; 61
	char acclMsg[100];
	char x[10];
	char y[10];
	char z[10];
	
	dtostrf(accl_x, 1 , 2, x);
    1210:	60 91 3f 03 	lds	r22, 0x033F
    1214:	70 91 40 03 	lds	r23, 0x0340
    1218:	80 91 41 03 	lds	r24, 0x0341
    121c:	90 91 42 03 	lds	r25, 0x0342
    1220:	41 e0       	ldi	r20, 0x01	; 1
    1222:	22 e0       	ldi	r18, 0x02	; 2
    1224:	5e 01       	movw	r10, r28
    1226:	08 94       	sec
    1228:	a1 1c       	adc	r10, r1
    122a:	b1 1c       	adc	r11, r1
    122c:	85 01       	movw	r16, r10
    122e:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <dtostrf>
	dtostrf(accl_y, 1 , 2, y);
    1232:	60 91 43 03 	lds	r22, 0x0343
    1236:	70 91 44 03 	lds	r23, 0x0344
    123a:	80 91 45 03 	lds	r24, 0x0345
    123e:	90 91 46 03 	lds	r25, 0x0346
    1242:	0b e0       	ldi	r16, 0x0B	; 11
    1244:	c0 2e       	mov	r12, r16
    1246:	d1 2c       	mov	r13, r1
    1248:	cc 0e       	add	r12, r28
    124a:	dd 1e       	adc	r13, r29
    124c:	41 e0       	ldi	r20, 0x01	; 1
    124e:	22 e0       	ldi	r18, 0x02	; 2
    1250:	86 01       	movw	r16, r12
    1252:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <dtostrf>
	dtostrf(accl_z, 1 , 2, z);
    1256:	60 91 47 03 	lds	r22, 0x0347
    125a:	70 91 48 03 	lds	r23, 0x0348
    125e:	80 91 49 03 	lds	r24, 0x0349
    1262:	90 91 4a 03 	lds	r25, 0x034A
    1266:	15 e1       	ldi	r17, 0x15	; 21
    1268:	e1 2e       	mov	r14, r17
    126a:	f1 2c       	mov	r15, r1
    126c:	ec 0e       	add	r14, r28
    126e:	fd 1e       	adc	r15, r29
    1270:	41 e0       	ldi	r20, 0x01	; 1
    1272:	22 e0       	ldi	r18, 0x02	; 2
    1274:	87 01       	movw	r16, r14
    1276:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <dtostrf>
	
	sprintf(acclMsg, "(aX) %s (aY) %s (aZ) %s", x, y, z);
    127a:	8d b7       	in	r24, 0x3d	; 61
    127c:	9e b7       	in	r25, 0x3e	; 62
    127e:	0a 97       	sbiw	r24, 0x0a	; 10
    1280:	0f b6       	in	r0, 0x3f	; 63
    1282:	f8 94       	cli
    1284:	9e bf       	out	0x3e, r25	; 62
    1286:	0f be       	out	0x3f, r0	; 63
    1288:	8d bf       	out	0x3d, r24	; 61
    128a:	ed b7       	in	r30, 0x3d	; 61
    128c:	fe b7       	in	r31, 0x3e	; 62
    128e:	31 96       	adiw	r30, 0x01	; 1
    1290:	8e 01       	movw	r16, r28
    1292:	01 5e       	subi	r16, 0xE1	; 225
    1294:	1f 4f       	sbci	r17, 0xFF	; 255
    1296:	ad b7       	in	r26, 0x3d	; 61
    1298:	be b7       	in	r27, 0x3e	; 62
    129a:	12 96       	adiw	r26, 0x02	; 2
    129c:	1c 93       	st	X, r17
    129e:	0e 93       	st	-X, r16
    12a0:	11 97       	sbiw	r26, 0x01	; 1
    12a2:	87 e2       	ldi	r24, 0x27	; 39
    12a4:	91 e0       	ldi	r25, 0x01	; 1
    12a6:	93 83       	std	Z+3, r25	; 0x03
    12a8:	82 83       	std	Z+2, r24	; 0x02
    12aa:	b5 82       	std	Z+5, r11	; 0x05
    12ac:	a4 82       	std	Z+4, r10	; 0x04
    12ae:	d7 82       	std	Z+7, r13	; 0x07
    12b0:	c6 82       	std	Z+6, r12	; 0x06
    12b2:	f1 86       	std	Z+9, r15	; 0x09
    12b4:	e0 86       	std	Z+8, r14	; 0x08
    12b6:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <sprintf>
	
	writeString(acclMsg);
    12ba:	8d b7       	in	r24, 0x3d	; 61
    12bc:	9e b7       	in	r25, 0x3e	; 62
    12be:	0a 96       	adiw	r24, 0x0a	; 10
    12c0:	0f b6       	in	r0, 0x3f	; 63
    12c2:	f8 94       	cli
    12c4:	9e bf       	out	0x3e, r25	; 62
    12c6:	0f be       	out	0x3f, r0	; 63
    12c8:	8d bf       	out	0x3d, r24	; 61
    12ca:	c8 01       	movw	r24, r16
    12cc:	0e 94 db 06 	call	0xdb6	; 0xdb6 <writeString>
    12d0:	8a b1       	in	r24, 0x0a	; 10
    12d2:	88 62       	ori	r24, 0x28	; 40
    12d4:	8a b9       	out	0x0a, r24	; 10
	enableTX();
}
    12d6:	ce 57       	subi	r28, 0x7E	; 126
    12d8:	df 4f       	sbci	r29, 0xFF	; 255
    12da:	0f b6       	in	r0, 0x3f	; 63
    12dc:	f8 94       	cli
    12de:	de bf       	out	0x3e, r29	; 62
    12e0:	0f be       	out	0x3f, r0	; 63
    12e2:	cd bf       	out	0x3d, r28	; 61
    12e4:	cf 91       	pop	r28
    12e6:	df 91       	pop	r29
    12e8:	1f 91       	pop	r17
    12ea:	0f 91       	pop	r16
    12ec:	ff 90       	pop	r15
    12ee:	ef 90       	pop	r14
    12f0:	df 90       	pop	r13
    12f2:	cf 90       	pop	r12
    12f4:	bf 90       	pop	r11
    12f6:	af 90       	pop	r10
    12f8:	08 95       	ret

000012fa <printGyroData>:
}

/*
*	Prints a string representation of the Gyroscope Data
*/
void printGyroData(void) {
    12fa:	ef 92       	push	r14
    12fc:	ff 92       	push	r15
    12fe:	0f 93       	push	r16
    1300:	1f 93       	push	r17
    1302:	df 93       	push	r29
    1304:	cf 93       	push	r28
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
    130a:	c4 56       	subi	r28, 0x64	; 100
    130c:	d0 40       	sbci	r29, 0x00	; 0
    130e:	0f b6       	in	r0, 0x3f	; 63
    1310:	f8 94       	cli
    1312:	de bf       	out	0x3e, r29	; 62
    1314:	0f be       	out	0x3f, r0	; 63
    1316:	cd bf       	out	0x3d, r28	; 61

	char gyroMsg[100];

	//sprintf(gyroMsg, "(gX) %d (gY) %d (gZ) %d", (int) gyro_angle_x, (int) gyro_angle_y, (int) gyro_angle_z);
	sprintf(gyroMsg, "(gX) %d (gY) %d (gZ) %d", (int) gyro_x, (int) gyro_y, (int) gyro_z);
    1318:	8d b7       	in	r24, 0x3d	; 61
    131a:	9e b7       	in	r25, 0x3e	; 62
    131c:	0a 97       	sbiw	r24, 0x0a	; 10
    131e:	0f b6       	in	r0, 0x3f	; 63
    1320:	f8 94       	cli
    1322:	9e bf       	out	0x3e, r25	; 62
    1324:	0f be       	out	0x3f, r0	; 63
    1326:	8d bf       	out	0x3d, r24	; 61
    1328:	0d b7       	in	r16, 0x3d	; 61
    132a:	1e b7       	in	r17, 0x3e	; 62
    132c:	0f 5f       	subi	r16, 0xFF	; 255
    132e:	1f 4f       	sbci	r17, 0xFF	; 255
    1330:	7e 01       	movw	r14, r28
    1332:	08 94       	sec
    1334:	e1 1c       	adc	r14, r1
    1336:	f1 1c       	adc	r15, r1
    1338:	ed b7       	in	r30, 0x3d	; 61
    133a:	fe b7       	in	r31, 0x3e	; 62
    133c:	f2 82       	std	Z+2, r15	; 0x02
    133e:	e1 82       	std	Z+1, r14	; 0x01
    1340:	8f e3       	ldi	r24, 0x3F	; 63
    1342:	91 e0       	ldi	r25, 0x01	; 1
    1344:	f8 01       	movw	r30, r16
    1346:	93 83       	std	Z+3, r25	; 0x03
    1348:	82 83       	std	Z+2, r24	; 0x02
    134a:	60 91 25 03 	lds	r22, 0x0325
    134e:	70 91 26 03 	lds	r23, 0x0326
    1352:	80 91 27 03 	lds	r24, 0x0327
    1356:	90 91 28 03 	lds	r25, 0x0328
    135a:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <__fixsfsi>
    135e:	f8 01       	movw	r30, r16
    1360:	75 83       	std	Z+5, r23	; 0x05
    1362:	64 83       	std	Z+4, r22	; 0x04
    1364:	60 91 29 03 	lds	r22, 0x0329
    1368:	70 91 2a 03 	lds	r23, 0x032A
    136c:	80 91 2b 03 	lds	r24, 0x032B
    1370:	90 91 2c 03 	lds	r25, 0x032C
    1374:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <__fixsfsi>
    1378:	f8 01       	movw	r30, r16
    137a:	77 83       	std	Z+7, r23	; 0x07
    137c:	66 83       	std	Z+6, r22	; 0x06
    137e:	60 91 2d 03 	lds	r22, 0x032D
    1382:	70 91 2e 03 	lds	r23, 0x032E
    1386:	80 91 2f 03 	lds	r24, 0x032F
    138a:	90 91 30 03 	lds	r25, 0x0330
    138e:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <__fixsfsi>
    1392:	f8 01       	movw	r30, r16
    1394:	71 87       	std	Z+9, r23	; 0x09
    1396:	60 87       	std	Z+8, r22	; 0x08
    1398:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <sprintf>
	
	writeString(gyroMsg);
    139c:	8d b7       	in	r24, 0x3d	; 61
    139e:	9e b7       	in	r25, 0x3e	; 62
    13a0:	0a 96       	adiw	r24, 0x0a	; 10
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	f8 94       	cli
    13a6:	9e bf       	out	0x3e, r25	; 62
    13a8:	0f be       	out	0x3f, r0	; 63
    13aa:	8d bf       	out	0x3d, r24	; 61
    13ac:	c7 01       	movw	r24, r14
    13ae:	0e 94 db 06 	call	0xdb6	; 0xdb6 <writeString>
    13b2:	8a b1       	in	r24, 0x0a	; 10
    13b4:	88 62       	ori	r24, 0x28	; 40
    13b6:	8a b9       	out	0x0a, r24	; 10
	enableTX();
}	
    13b8:	cc 59       	subi	r28, 0x9C	; 156
    13ba:	df 4f       	sbci	r29, 0xFF	; 255
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	f8 94       	cli
    13c0:	de bf       	out	0x3e, r29	; 62
    13c2:	0f be       	out	0x3f, r0	; 63
    13c4:	cd bf       	out	0x3d, r28	; 61
    13c6:	cf 91       	pop	r28
    13c8:	df 91       	pop	r29
    13ca:	1f 91       	pop	r17
    13cc:	0f 91       	pop	r16
    13ce:	ff 90       	pop	r15
    13d0:	ef 90       	pop	r14
    13d2:	08 95       	ret

000013d4 <stringContains>:
*	fullString - String to be checked against
*	subsString - String that should be at the beginning of fullString
*/
bool stringContains(char* fullString, char* substring) {

	if(strncasecmp(fullString, substring, strlen(substring)) == 0) {
    13d4:	db 01       	movw	r26, r22
    13d6:	0d 90       	ld	r0, X+
    13d8:	00 20       	and	r0, r0
    13da:	e9 f7       	brne	.-6      	; 0x13d6 <stringContains+0x2>
    13dc:	11 97       	sbiw	r26, 0x01	; 1
    13de:	a6 1b       	sub	r26, r22
    13e0:	b7 0b       	sbc	r27, r23
    13e2:	ad 01       	movw	r20, r26
    13e4:	0e 94 15 10 	call	0x202a	; 0x202a <strncasecmp>
    13e8:	20 e0       	ldi	r18, 0x00	; 0
    13ea:	89 2b       	or	r24, r25
    13ec:	09 f4       	brne	.+2      	; 0x13f0 <stringContains+0x1c>
    13ee:	21 e0       	ldi	r18, 0x01	; 1
		return true;
	}
	return false;
}
    13f0:	82 2f       	mov	r24, r18
    13f2:	08 95       	ret

000013f4 <stripLettersFromFloat>:
/*
*	Strip letters from a given string and retains 
* 	Floating point values. Remember to run free() on the return 
* 	val.
*/
char* stripLettersFromFloat(char* string) {
    13f4:	cf 93       	push	r28
    13f6:	df 93       	push	r29
    13f8:	ec 01       	movw	r28, r24

	char *newStr =  malloc(strlen(string) + 1);
    13fa:	dc 01       	movw	r26, r24
    13fc:	0d 90       	ld	r0, X+
    13fe:	00 20       	and	r0, r0
    1400:	e9 f7       	brne	.-6      	; 0x13fc <stripLettersFromFloat+0x8>
    1402:	cd 01       	movw	r24, r26
    1404:	8c 1b       	sub	r24, r28
    1406:	9d 0b       	sbc	r25, r29
    1408:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <malloc>
    140c:	9c 01       	movw	r18, r24
    140e:	a0 e0       	ldi	r26, 0x00	; 0
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	0d c0       	rjmp	.+26     	; 0x142e <stripLettersFromFloat+0x3a>

	int count = 0;
	for(; *string; string++) {
		if(isdigit(*string) || *string == '.') {
    1414:	84 2f       	mov	r24, r20
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	c0 97       	sbiw	r24, 0x30	; 48
    141a:	0a 97       	sbiw	r24, 0x0a	; 10
    141c:	10 f0       	brcs	.+4      	; 0x1422 <stripLettersFromFloat+0x2e>
    141e:	4e 32       	cpi	r20, 0x2E	; 46
    1420:	29 f4       	brne	.+10     	; 0x142c <stripLettersFromFloat+0x38>
			newStr[count] = *string;
    1422:	f9 01       	movw	r30, r18
    1424:	ea 0f       	add	r30, r26
    1426:	fb 1f       	adc	r31, r27
    1428:	40 83       	st	Z, r20
			count++;
    142a:	11 96       	adiw	r26, 0x01	; 1
char* stripLettersFromFloat(char* string) {

	char *newStr =  malloc(strlen(string) + 1);

	int count = 0;
	for(; *string; string++) {
    142c:	21 96       	adiw	r28, 0x01	; 1
    142e:	48 81       	ld	r20, Y
    1430:	44 23       	and	r20, r20
    1432:	81 f7       	brne	.-32     	; 0x1414 <stripLettersFromFloat+0x20>
		if(isdigit(*string) || *string == '.') {
			newStr[count] = *string;
			count++;
		}
	}
	newStr[count] = 0x00;
    1434:	a2 0f       	add	r26, r18
    1436:	b3 1f       	adc	r27, r19
    1438:	1c 92       	st	X, r1
	return newStr;
}
    143a:	c9 01       	movw	r24, r18
    143c:	df 91       	pop	r29
    143e:	cf 91       	pop	r28
    1440:	08 95       	ret

00001442 <readAcclCallback>:
	//gyro_angle_y+= (gyro_y*(count0-lastCount));
	//gyro_angle_z+= (gyro_z*(count0-lastCount));
	//lastCount = count0;
}

void readAcclCallback(void) {
    1442:	2f 92       	push	r2
    1444:	3f 92       	push	r3
    1446:	4f 92       	push	r4
    1448:	5f 92       	push	r5
    144a:	6f 92       	push	r6
    144c:	7f 92       	push	r7
    144e:	8f 92       	push	r8
    1450:	9f 92       	push	r9
    1452:	af 92       	push	r10
    1454:	bf 92       	push	r11
    1456:	cf 92       	push	r12
    1458:	df 92       	push	r13
    145a:	ef 92       	push	r14
    145c:	ff 92       	push	r15
    145e:	0f 93       	push	r16
    1460:	1f 93       	push	r17
	
	int x = ((SENS_DATA[4] << 8) | SENS_DATA[5]);
    1462:	e0 91 af 0b 	lds	r30, 0x0BAF
    1466:	f0 91 b0 0b 	lds	r31, 0x0BB0
	int y = ((SENS_DATA[2] << 8) | SENS_DATA[3]);
    146a:	94 81       	ldd	r25, Z+4	; 0x04
    146c:	80 e0       	ldi	r24, 0x00	; 0
    146e:	e6 80       	ldd	r14, Z+6	; 0x06
    1470:	f7 80       	ldd	r15, Z+7	; 0x07
    1472:	e8 2a       	or	r14, r24
    1474:	f9 2a       	or	r15, r25
	int z = ((SENS_DATA[0] << 8) | SENS_DATA[1]);
    1476:	90 81       	ld	r25, Z
    1478:	80 e0       	ldi	r24, 0x00	; 0
    147a:	a2 80       	ldd	r10, Z+2	; 0x02
    147c:	b3 80       	ldd	r11, Z+3	; 0x03
    147e:	a8 2a       	or	r10, r24
    1480:	b9 2a       	or	r11, r25
	accl_x =  x / 256.0; // scale = 2 / (2^10), since its 10 bits
    1482:	70 85       	ldd	r23, Z+8	; 0x08
    1484:	60 e0       	ldi	r22, 0x00	; 0
    1486:	22 85       	ldd	r18, Z+10	; 0x0a
    1488:	33 85       	ldd	r19, Z+11	; 0x0b
    148a:	62 2b       	or	r22, r18
    148c:	73 2b       	or	r23, r19
    148e:	88 27       	eor	r24, r24
    1490:	77 fd       	sbrc	r23, 7
    1492:	80 95       	com	r24
    1494:	98 2f       	mov	r25, r24
    1496:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <__floatsisf>
    149a:	20 e0       	ldi	r18, 0x00	; 0
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	40 e8       	ldi	r20, 0x80	; 128
    14a0:	5b e3       	ldi	r21, 0x3B	; 59
    14a2:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <__mulsf3>
    14a6:	1b 01       	movw	r2, r22
    14a8:	2c 01       	movw	r4, r24
    14aa:	60 93 3f 03 	sts	0x033F, r22
    14ae:	70 93 40 03 	sts	0x0340, r23
    14b2:	80 93 41 03 	sts	0x0341, r24
    14b6:	90 93 42 03 	sts	0x0342, r25
	accl_y =  y / 256.0;
    14ba:	00 27       	eor	r16, r16
    14bc:	f7 fc       	sbrc	r15, 7
    14be:	00 95       	com	r16
    14c0:	10 2f       	mov	r17, r16
    14c2:	c8 01       	movw	r24, r16
    14c4:	b7 01       	movw	r22, r14
    14c6:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <__floatsisf>
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	40 e8       	ldi	r20, 0x80	; 128
    14d0:	5b e3       	ldi	r21, 0x3B	; 59
    14d2:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <__mulsf3>
    14d6:	3b 01       	movw	r6, r22
    14d8:	4c 01       	movw	r8, r24
    14da:	60 93 43 03 	sts	0x0343, r22
    14de:	70 93 44 03 	sts	0x0344, r23
    14e2:	80 93 45 03 	sts	0x0345, r24
    14e6:	90 93 46 03 	sts	0x0346, r25
	accl_z =  z / 256.0;
    14ea:	cc 24       	eor	r12, r12
    14ec:	b7 fc       	sbrc	r11, 7
    14ee:	c0 94       	com	r12
    14f0:	dc 2c       	mov	r13, r12
    14f2:	c6 01       	movw	r24, r12
    14f4:	b5 01       	movw	r22, r10
    14f6:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <__floatsisf>
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	40 e8       	ldi	r20, 0x80	; 128
    1500:	5b e3       	ldi	r21, 0x3B	; 59
    1502:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <__mulsf3>
    1506:	5b 01       	movw	r10, r22
    1508:	6c 01       	movw	r12, r24
    150a:	60 93 47 03 	sts	0x0347, r22
    150e:	70 93 48 03 	sts	0x0348, r23
    1512:	80 93 49 03 	sts	0x0349, r24
    1516:	90 93 4a 03 	sts	0x034A, r25
	accl_R = sqrt(accl_x*accl_x + accl_y*accl_y + accl_z*accl_z);
    151a:	c2 01       	movw	r24, r4
    151c:	b1 01       	movw	r22, r2
    151e:	a2 01       	movw	r20, r4
    1520:	91 01       	movw	r18, r2
    1522:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <__mulsf3>
    1526:	7b 01       	movw	r14, r22
    1528:	8c 01       	movw	r16, r24
    152a:	c4 01       	movw	r24, r8
    152c:	b3 01       	movw	r22, r6
    152e:	a4 01       	movw	r20, r8
    1530:	93 01       	movw	r18, r6
    1532:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <__mulsf3>
    1536:	9b 01       	movw	r18, r22
    1538:	ac 01       	movw	r20, r24
    153a:	c8 01       	movw	r24, r16
    153c:	b7 01       	movw	r22, r14
    153e:	0e 94 3f 0c 	call	0x187e	; 0x187e <__addsf3>
    1542:	7b 01       	movw	r14, r22
    1544:	8c 01       	movw	r16, r24
    1546:	c6 01       	movw	r24, r12
    1548:	b5 01       	movw	r22, r10
    154a:	a6 01       	movw	r20, r12
    154c:	95 01       	movw	r18, r10
    154e:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <__mulsf3>
    1552:	9b 01       	movw	r18, r22
    1554:	ac 01       	movw	r20, r24
    1556:	c8 01       	movw	r24, r16
    1558:	b7 01       	movw	r22, r14
    155a:	0e 94 3f 0c 	call	0x187e	; 0x187e <__addsf3>
    155e:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <sqrt>
    1562:	7b 01       	movw	r14, r22
    1564:	8c 01       	movw	r16, r24
    1566:	60 93 4b 03 	sts	0x034B, r22
    156a:	70 93 4c 03 	sts	0x034C, r23
    156e:	80 93 4d 03 	sts	0x034D, r24
    1572:	90 93 4e 03 	sts	0x034E, r25
	accl_angle_x = acos(accl_x / accl_R);
    1576:	c2 01       	movw	r24, r4
    1578:	b1 01       	movw	r22, r2
    157a:	a8 01       	movw	r20, r16
    157c:	97 01       	movw	r18, r14
    157e:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__divsf3>
    1582:	0e 94 30 0c 	call	0x1860	; 0x1860 <acos>
    1586:	60 93 4f 03 	sts	0x034F, r22
    158a:	70 93 50 03 	sts	0x0350, r23
    158e:	80 93 51 03 	sts	0x0351, r24
    1592:	90 93 52 03 	sts	0x0352, r25
	accl_angle_y = acos(accl_y / accl_R);
    1596:	c4 01       	movw	r24, r8
    1598:	b3 01       	movw	r22, r6
    159a:	a8 01       	movw	r20, r16
    159c:	97 01       	movw	r18, r14
    159e:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__divsf3>
    15a2:	0e 94 30 0c 	call	0x1860	; 0x1860 <acos>
    15a6:	60 93 53 03 	sts	0x0353, r22
    15aa:	70 93 54 03 	sts	0x0354, r23
    15ae:	80 93 55 03 	sts	0x0355, r24
    15b2:	90 93 56 03 	sts	0x0356, r25
	accl_angle_z = acos(accl_z / accl_R);
    15b6:	c6 01       	movw	r24, r12
    15b8:	b5 01       	movw	r22, r10
    15ba:	a8 01       	movw	r20, r16
    15bc:	97 01       	movw	r18, r14
    15be:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__divsf3>
    15c2:	0e 94 30 0c 	call	0x1860	; 0x1860 <acos>
    15c6:	60 93 57 03 	sts	0x0357, r22
    15ca:	70 93 58 03 	sts	0x0358, r23
    15ce:	80 93 59 03 	sts	0x0359, r24
    15d2:	90 93 5a 03 	sts	0x035A, r25
}
    15d6:	1f 91       	pop	r17
    15d8:	0f 91       	pop	r16
    15da:	ff 90       	pop	r15
    15dc:	ef 90       	pop	r14
    15de:	df 90       	pop	r13
    15e0:	cf 90       	pop	r12
    15e2:	bf 90       	pop	r11
    15e4:	af 90       	pop	r10
    15e6:	9f 90       	pop	r9
    15e8:	8f 90       	pop	r8
    15ea:	7f 90       	pop	r7
    15ec:	6f 90       	pop	r6
    15ee:	5f 90       	pop	r5
    15f0:	4f 90       	pop	r4
    15f2:	3f 90       	pop	r3
    15f4:	2f 90       	pop	r2
    15f6:	08 95       	ret

000015f8 <matchString>:
*	Returns 1 if string1 matches string2, 0 otherwise
*/

bool matchString(char* string1, char* string2) {
	
	if(strncmp(string1, string2, QUEUESIZE-1) == 0) {
    15f8:	4f ef       	ldi	r20, 0xFF	; 255
    15fa:	53 e0       	ldi	r21, 0x03	; 3
    15fc:	0e 94 2d 10 	call	0x205a	; 0x205a <strncmp>
    1600:	9c 01       	movw	r18, r24
    1602:	80 e0       	ldi	r24, 0x00	; 0
    1604:	23 2b       	or	r18, r19
    1606:	09 f4       	brne	.+2      	; 0x160a <matchString+0x12>
    1608:	81 e0       	ldi	r24, 0x01	; 1
		
		return true;
	}
	return false;
}
    160a:	08 95       	ret

0000160c <parseCommand>:
}

/*
*	Handles data that is read from RX
*/
void parseCommand(FIFOQueue* readQueue, FIFOQueue* writeQueue) {
    160c:	0f 93       	push	r16
    160e:	1f 93       	push	r17
    1610:	df 93       	push	r29
    1612:	cf 93       	push	r28
    1614:	cd b7       	in	r28, 0x3d	; 61
    1616:	de b7       	in	r29, 0x3e	; 62
    1618:	64 97       	sbiw	r28, 0x14	; 20
    161a:	0f b6       	in	r0, 0x3f	; 63
    161c:	f8 94       	cli
    161e:	de bf       	out	0x3e, r29	; 62
    1620:	0f be       	out	0x3f, r0	; 63
    1622:	cd bf       	out	0x3d, r28	; 61
    1624:	8c 01       	movw	r16, r24
*	Disables RX Interrupts
*	RXEN0 - Receive Enable flag
*	RXCIE0 - Receive Complete Interrupt flag
*/
void disableRX(void) {
	UCSR0B &= ~((1<<RXEN0) | (1<<RXCIE0));
    1626:	8a b1       	in	r24, 0x0a	; 10
    1628:	8f 76       	andi	r24, 0x6F	; 111
    162a:	8a b9       	out	0x0a, r24	; 10
	
	//temporarily disable RX Interrupts
	disableRX();

	//terminate the readQueue so comparison can occur
	terminate_queue(readQueue);
    162c:	c8 01       	movw	r24, r16
    162e:	0e 94 9a 01 	call	0x334	; 0x334 <terminate_queue>
*	Returns 1 if string1 matches string2, 0 otherwise
*/

bool matchString(char* string1, char* string2) {
	
	if(strncmp(string1, string2, QUEUESIZE-1) == 0) {
    1632:	87 e5       	ldi	r24, 0x57	; 87
    1634:	91 e0       	ldi	r25, 0x01	; 1
    1636:	b8 01       	movw	r22, r16
    1638:	4f ef       	ldi	r20, 0xFF	; 255
    163a:	53 e0       	ldi	r21, 0x03	; 3
    163c:	0e 94 2d 10 	call	0x205a	; 0x205a <strncmp>
    1640:	00 97       	sbiw	r24, 0x00	; 0
    1642:	09 f0       	breq	.+2      	; 0x1646 <parseCommand+0x3a>
    1644:	aa c0       	rjmp	.+340    	; 0x179a <parseCommand+0x18e>
	
	if(matchString("HELO root root", readQueue->buffer)) {

		//send acknowledge
		writeString("ACK");						
    1646:	86 e6       	ldi	r24, 0x66	; 102
    1648:	91 e0       	ldi	r25, 0x01	; 1
    164a:	97 c0       	rjmp	.+302    	; 0x177a <parseCommand+0x16e>
	
	}else if(matchString("hello", readQueue->buffer)) {
		
		writeString("Hello from the atmega128");
    164c:	8a e6       	ldi	r24, 0x6A	; 106
    164e:	91 e0       	ldi	r25, 0x01	; 1
    1650:	94 c0       	rjmp	.+296    	; 0x177a <parseCommand+0x16e>
		
	}else if(matchString("status", readQueue->buffer)) {
		
		//Demonstrating somewhat advanced User input and parsing		
		writeString("ATMEGA128, CPU:16MHz, BAUD: 38400, UBRR: 25"); 
    1652:	83 e8       	ldi	r24, 0x83	; 131
    1654:	91 e0       	ldi	r25, 0x01	; 1
    1656:	91 c0       	rjmp	.+290    	; 0x177a <parseCommand+0x16e>
	
	}else if(matchString("init pwm", readQueue->buffer)) {
		
		//initialize the particular ESC
		init_pwm();
    1658:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <init_pwm>
		writeString("Pusle Width Modulation enabled and operating on 100Hz frequency");
    165c:	8f ea       	ldi	r24, 0xAF	; 175
    165e:	91 e0       	ldi	r25, 0x01	; 1
    1660:	8c c0       	rjmp	.+280    	; 0x177a <parseCommand+0x16e>
	
	}else if(matchString("init escs", readQueue->buffer)) {
		
		//initialize the particular ESC
		init_motors();
    1662:	0e 94 05 05 	call	0xa0a	; 0xa0a <init_motors>
		writeString("Initializing motors, type 'speed test' to run a constant speed test");
    1666:	8f ee       	ldi	r24, 0xEF	; 239
    1668:	91 e0       	ldi	r25, 0x01	; 1
    166a:	87 c0       	rjmp	.+270    	; 0x177a <parseCommand+0x16e>
/*
*	Flatlines the PWM frequency
*/	
void stop_pwm(void) {
	
	stop = 1; //kill everything depending on this bit
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	90 93 6c 03 	sts	0x036C, r25
    1674:	80 93 6b 03 	sts	0x036B, r24
	motors_ddr1 &= ~((1<<north_motor) | (1<<south_motor) | (1<<east_motor));
    1678:	87 b3       	in	r24, 0x17	; 23
    167a:	8f 71       	andi	r24, 0x1F	; 31
    167c:	87 bb       	out	0x17, r24	; 23
	motors_ddr2 &= ~(1<<west_motor);
    167e:	13 98       	cbi	0x02, 3	; 2
		
	}else if(matchString("deactivate", readQueue->buffer)) {
		
		//initialize the particular ESC
		stop_pwm();
		writeString("Killing all running processes");
    1680:	83 e3       	ldi	r24, 0x33	; 51
    1682:	92 e0       	ldi	r25, 0x02	; 2
    1684:	7a c0       	rjmp	.+244    	; 0x177a <parseCommand+0x16e>
		
	}else if(matchString("speed test", readQueue->buffer)) {
		
		//initialize the particular ESC
		init_adc();
    1686:	0e 94 5a 05 	call	0xab4	; 0xab4 <init_adc>
		poll_adc();
    168a:	0e 94 67 05 	call	0xace	; 0xace <poll_adc>
		writeString("speed test complete");
    168e:	81 e5       	ldi	r24, 0x51	; 81
    1690:	92 e0       	ldi	r25, 0x02	; 2
    1692:	73 c0       	rjmp	.+230    	; 0x177a <parseCommand+0x16e>
		
	}else if(matchString("get gyro", readQueue->buffer)) {
	
		printGyroData();
    1694:	0e 94 7d 09 	call	0x12fa	; 0x12fa <printGyroData>
    1698:	72 c0       	rjmp	.+228    	; 0x177e <parseCommand+0x172>
		
	}else if(matchString("get accl", readQueue->buffer)) {
	
		printAcclData();
    169a:	0e 94 f5 08 	call	0x11ea	; 0x11ea <printAcclData>
    169e:	6f c0       	rjmp	.+222    	; 0x177e <parseCommand+0x172>
		
	}else if(matchString("get distance", readQueue->buffer)) {
		
		char str[20];
		itoa(calibrate(pulse_distance, -3), str, 10);
    16a0:	80 91 12 03 	lds	r24, 0x0312
    16a4:	90 91 13 03 	lds	r25, 0x0313
    16a8:	03 97       	sbiw	r24, 0x03	; 3
    16aa:	8e 01       	movw	r16, r28
    16ac:	0f 5f       	subi	r16, 0xFF	; 255
    16ae:	1f 4f       	sbci	r17, 0xFF	; 255
    16b0:	b8 01       	movw	r22, r16
    16b2:	4a e0       	ldi	r20, 0x0A	; 10
    16b4:	50 e0       	ldi	r21, 0x00	; 0
    16b6:	0e 94 3b 10 	call	0x2076	; 0x2076 <itoa>
		
		writeString(str); 
    16ba:	c8 01       	movw	r24, r16
    16bc:	0e 94 db 06 	call	0xdb6	; 0xdb6 <writeString>
*	TXEN0 - Enables Transmitter USART0
*	UDRIE0 - Enables UDR Empty Interrupt
*/
void enableTX(void) {

	UCSR0B |= (1<<TXEN0) | (1<<UDRIE0);
    16c0:	8a b1       	in	r24, 0x0a	; 10
    16c2:	88 62       	ori	r24, 0x28	; 40
    16c4:	8a b9       	out	0x0a, r24	; 10
    16c6:	5b c0       	rjmp	.+182    	; 0x177e <parseCommand+0x172>
	
	}
	else if(stringContains(readQueue->buffer, "set speed north")) {
	
		//Update the speed of the north motor
		char *str  = stripLettersFromFloat(readQueue->buffer);
    16c8:	c8 01       	movw	r24, r16
    16ca:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <stripLettersFromFloat>
    16ce:	8c 01       	movw	r16, r24
		northMultiplier = atof(str);
    16d0:	0e 94 11 10 	call	0x2022	; 0x2022 <atof>
    16d4:	60 93 5b 03 	sts	0x035B, r22
    16d8:	70 93 5c 03 	sts	0x035C, r23
    16dc:	80 93 5d 03 	sts	0x035D, r24
    16e0:	90 93 5e 03 	sts	0x035E, r25
    16e4:	41 c0       	rjmp	.+130    	; 0x1768 <parseCommand+0x15c>
		writeString(str);
		free(str);
		
	}else if(stringContains(readQueue->buffer, "set speed south")) {
    16e6:	c8 01       	movw	r24, r16
    16e8:	65 e6       	ldi	r22, 0x65	; 101
    16ea:	72 e0       	ldi	r23, 0x02	; 2
    16ec:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <stringContains>
    16f0:	88 23       	and	r24, r24
    16f2:	79 f0       	breq	.+30     	; 0x1712 <parseCommand+0x106>
	
		//Update the speed of the north motor
		char *str  = stripLettersFromFloat(readQueue->buffer);
    16f4:	c8 01       	movw	r24, r16
    16f6:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <stripLettersFromFloat>
    16fa:	8c 01       	movw	r16, r24
		southMultiplier = atof(str);
    16fc:	0e 94 11 10 	call	0x2022	; 0x2022 <atof>
    1700:	60 93 5f 03 	sts	0x035F, r22
    1704:	70 93 60 03 	sts	0x0360, r23
    1708:	80 93 61 03 	sts	0x0361, r24
    170c:	90 93 62 03 	sts	0x0362, r25
    1710:	2b c0       	rjmp	.+86     	; 0x1768 <parseCommand+0x15c>
		writeString(str);
		free(str);
		
	}else if(stringContains(readQueue->buffer, "set speed east")) {
    1712:	c8 01       	movw	r24, r16
    1714:	65 e7       	ldi	r22, 0x75	; 117
    1716:	72 e0       	ldi	r23, 0x02	; 2
    1718:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <stringContains>
    171c:	88 23       	and	r24, r24
    171e:	79 f0       	breq	.+30     	; 0x173e <parseCommand+0x132>
	
		//Update the speed of the north motor
		char *str  = stripLettersFromFloat(readQueue->buffer);
    1720:	c8 01       	movw	r24, r16
    1722:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <stripLettersFromFloat>
    1726:	8c 01       	movw	r16, r24
		eastMultiplier = atof(str);
    1728:	0e 94 11 10 	call	0x2022	; 0x2022 <atof>
    172c:	60 93 63 03 	sts	0x0363, r22
    1730:	70 93 64 03 	sts	0x0364, r23
    1734:	80 93 65 03 	sts	0x0365, r24
    1738:	90 93 66 03 	sts	0x0366, r25
    173c:	15 c0       	rjmp	.+42     	; 0x1768 <parseCommand+0x15c>
		writeString(str);
		free(str);
		
	}else if(stringContains(readQueue->buffer, "set speed west")) {
    173e:	c8 01       	movw	r24, r16
    1740:	64 e8       	ldi	r22, 0x84	; 132
    1742:	72 e0       	ldi	r23, 0x02	; 2
    1744:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <stringContains>
    1748:	88 23       	and	r24, r24
    174a:	a9 f0       	breq	.+42     	; 0x1776 <parseCommand+0x16a>
	
		//Update the speed of the north motor
		char *str  = stripLettersFromFloat(readQueue->buffer);
    174c:	c8 01       	movw	r24, r16
    174e:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <stripLettersFromFloat>
    1752:	8c 01       	movw	r16, r24
		westMultiplier = atof(str);
    1754:	0e 94 11 10 	call	0x2022	; 0x2022 <atof>
    1758:	60 93 67 03 	sts	0x0367, r22
    175c:	70 93 68 03 	sts	0x0368, r23
    1760:	80 93 69 03 	sts	0x0369, r24
    1764:	90 93 6a 03 	sts	0x036A, r25
		writeString(str);
    1768:	c8 01       	movw	r24, r16
    176a:	0e 94 db 06 	call	0xdb6	; 0xdb6 <writeString>
		free(str);
    176e:	c8 01       	movw	r24, r16
    1770:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <free>
    1774:	04 c0       	rjmp	.+8      	; 0x177e <parseCommand+0x172>
		
	}else {
	
		writeString("Invalid Command");
    1776:	83 e9       	ldi	r24, 0x93	; 147
    1778:	92 e0       	ldi	r25, 0x02	; 2
    177a:	0e 94 db 06 	call	0xdb6	; 0xdb6 <writeString>
    177e:	8a b1       	in	r24, 0x0a	; 10
    1780:	88 62       	ori	r24, 0x28	; 40
    1782:	8a b9       	out	0x0a, r24	; 10
	
	}
	//Interrupt enabled transmission
	enableTX();
}
    1784:	64 96       	adiw	r28, 0x14	; 20
    1786:	0f b6       	in	r0, 0x3f	; 63
    1788:	f8 94       	cli
    178a:	de bf       	out	0x3e, r29	; 62
    178c:	0f be       	out	0x3f, r0	; 63
    178e:	cd bf       	out	0x3d, r28	; 61
    1790:	cf 91       	pop	r28
    1792:	df 91       	pop	r29
    1794:	1f 91       	pop	r17
    1796:	0f 91       	pop	r16
    1798:	08 95       	ret
*	Returns 1 if string1 matches string2, 0 otherwise
*/

bool matchString(char* string1, char* string2) {
	
	if(strncmp(string1, string2, QUEUESIZE-1) == 0) {
    179a:	83 ea       	ldi	r24, 0xA3	; 163
    179c:	92 e0       	ldi	r25, 0x02	; 2
    179e:	b8 01       	movw	r22, r16
    17a0:	4f ef       	ldi	r20, 0xFF	; 255
    17a2:	53 e0       	ldi	r21, 0x03	; 3
    17a4:	0e 94 2d 10 	call	0x205a	; 0x205a <strncmp>
    17a8:	00 97       	sbiw	r24, 0x00	; 0
    17aa:	09 f4       	brne	.+2      	; 0x17ae <parseCommand+0x1a2>
    17ac:	4f cf       	rjmp	.-354    	; 0x164c <parseCommand+0x40>
		
		writeString(str); 
		enableTX();
	
	}
	else if(stringContains(readQueue->buffer, "set speed north")) {
    17ae:	89 ea       	ldi	r24, 0xA9	; 169
    17b0:	92 e0       	ldi	r25, 0x02	; 2
    17b2:	b8 01       	movw	r22, r16
    17b4:	4f ef       	ldi	r20, 0xFF	; 255
    17b6:	53 e0       	ldi	r21, 0x03	; 3
    17b8:	0e 94 2d 10 	call	0x205a	; 0x205a <strncmp>
    17bc:	00 97       	sbiw	r24, 0x00	; 0
    17be:	09 f4       	brne	.+2      	; 0x17c2 <parseCommand+0x1b6>
    17c0:	48 cf       	rjmp	.-368    	; 0x1652 <parseCommand+0x46>
    17c2:	80 eb       	ldi	r24, 0xB0	; 176
    17c4:	92 e0       	ldi	r25, 0x02	; 2
    17c6:	b8 01       	movw	r22, r16
    17c8:	4f ef       	ldi	r20, 0xFF	; 255
    17ca:	53 e0       	ldi	r21, 0x03	; 3
    17cc:	0e 94 2d 10 	call	0x205a	; 0x205a <strncmp>
    17d0:	00 97       	sbiw	r24, 0x00	; 0
    17d2:	09 f4       	brne	.+2      	; 0x17d6 <parseCommand+0x1ca>
    17d4:	41 cf       	rjmp	.-382    	; 0x1658 <parseCommand+0x4c>
    17d6:	89 eb       	ldi	r24, 0xB9	; 185
    17d8:	92 e0       	ldi	r25, 0x02	; 2
    17da:	b8 01       	movw	r22, r16
    17dc:	4f ef       	ldi	r20, 0xFF	; 255
    17de:	53 e0       	ldi	r21, 0x03	; 3
    17e0:	0e 94 2d 10 	call	0x205a	; 0x205a <strncmp>
    17e4:	00 97       	sbiw	r24, 0x00	; 0
    17e6:	09 f4       	brne	.+2      	; 0x17ea <parseCommand+0x1de>
    17e8:	3c cf       	rjmp	.-392    	; 0x1662 <parseCommand+0x56>
    17ea:	83 ec       	ldi	r24, 0xC3	; 195
    17ec:	92 e0       	ldi	r25, 0x02	; 2
    17ee:	b8 01       	movw	r22, r16
    17f0:	4f ef       	ldi	r20, 0xFF	; 255
    17f2:	53 e0       	ldi	r21, 0x03	; 3
    17f4:	0e 94 2d 10 	call	0x205a	; 0x205a <strncmp>
    17f8:	00 97       	sbiw	r24, 0x00	; 0
    17fa:	09 f4       	brne	.+2      	; 0x17fe <parseCommand+0x1f2>
    17fc:	37 cf       	rjmp	.-402    	; 0x166c <parseCommand+0x60>
    17fe:	8e ec       	ldi	r24, 0xCE	; 206
    1800:	92 e0       	ldi	r25, 0x02	; 2
    1802:	b8 01       	movw	r22, r16
    1804:	4f ef       	ldi	r20, 0xFF	; 255
    1806:	53 e0       	ldi	r21, 0x03	; 3
    1808:	0e 94 2d 10 	call	0x205a	; 0x205a <strncmp>
    180c:	00 97       	sbiw	r24, 0x00	; 0
    180e:	09 f4       	brne	.+2      	; 0x1812 <parseCommand+0x206>
    1810:	3a cf       	rjmp	.-396    	; 0x1686 <parseCommand+0x7a>
    1812:	89 ed       	ldi	r24, 0xD9	; 217
    1814:	92 e0       	ldi	r25, 0x02	; 2
    1816:	b8 01       	movw	r22, r16
    1818:	4f ef       	ldi	r20, 0xFF	; 255
    181a:	53 e0       	ldi	r21, 0x03	; 3
    181c:	0e 94 2d 10 	call	0x205a	; 0x205a <strncmp>
    1820:	00 97       	sbiw	r24, 0x00	; 0
    1822:	09 f4       	brne	.+2      	; 0x1826 <parseCommand+0x21a>
    1824:	37 cf       	rjmp	.-402    	; 0x1694 <parseCommand+0x88>
    1826:	82 ee       	ldi	r24, 0xE2	; 226
    1828:	92 e0       	ldi	r25, 0x02	; 2
    182a:	b8 01       	movw	r22, r16
    182c:	4f ef       	ldi	r20, 0xFF	; 255
    182e:	53 e0       	ldi	r21, 0x03	; 3
    1830:	0e 94 2d 10 	call	0x205a	; 0x205a <strncmp>
    1834:	00 97       	sbiw	r24, 0x00	; 0
    1836:	09 f4       	brne	.+2      	; 0x183a <parseCommand+0x22e>
    1838:	30 cf       	rjmp	.-416    	; 0x169a <parseCommand+0x8e>
    183a:	8b ee       	ldi	r24, 0xEB	; 235
    183c:	92 e0       	ldi	r25, 0x02	; 2
    183e:	b8 01       	movw	r22, r16
    1840:	4f ef       	ldi	r20, 0xFF	; 255
    1842:	53 e0       	ldi	r21, 0x03	; 3
    1844:	0e 94 2d 10 	call	0x205a	; 0x205a <strncmp>
    1848:	00 97       	sbiw	r24, 0x00	; 0
    184a:	09 f4       	brne	.+2      	; 0x184e <parseCommand+0x242>
    184c:	29 cf       	rjmp	.-430    	; 0x16a0 <parseCommand+0x94>
    184e:	c8 01       	movw	r24, r16
    1850:	68 ef       	ldi	r22, 0xF8	; 248
    1852:	72 e0       	ldi	r23, 0x02	; 2
    1854:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <stringContains>
    1858:	88 23       	and	r24, r24
    185a:	09 f4       	brne	.+2      	; 0x185e <parseCommand+0x252>
    185c:	44 cf       	rjmp	.-376    	; 0x16e6 <parseCommand+0xda>
    185e:	34 cf       	rjmp	.-408    	; 0x16c8 <parseCommand+0xbc>

00001860 <acos>:
    1860:	9f 93       	push	r25
    1862:	9f 77       	andi	r25, 0x7F	; 127
    1864:	46 d1       	rcall	.+652    	; 0x1af2 <__fp_arccos>
    1866:	0f 90       	pop	r0
    1868:	00 20       	and	r0, r0
    186a:	3a f4       	brpl	.+14     	; 0x187a <acos+0x1a>
    186c:	90 58       	subi	r25, 0x80	; 128
    186e:	a2 ea       	ldi	r26, 0xA2	; 162
    1870:	2a ed       	ldi	r18, 0xDA	; 218
    1872:	3f e0       	ldi	r19, 0x0F	; 15
    1874:	49 e4       	ldi	r20, 0x49	; 73
    1876:	50 e4       	ldi	r21, 0x40	; 64
    1878:	13 d0       	rcall	.+38     	; 0x18a0 <__addsf3x>
    187a:	92 c1       	rjmp	.+804    	; 0x1ba0 <__fp_round>

0000187c <__subsf3>:
    187c:	50 58       	subi	r21, 0x80	; 128

0000187e <__addsf3>:
    187e:	bb 27       	eor	r27, r27
    1880:	aa 27       	eor	r26, r26
    1882:	0e d0       	rcall	.+28     	; 0x18a0 <__addsf3x>
    1884:	8d c1       	rjmp	.+794    	; 0x1ba0 <__fp_round>
    1886:	7e d1       	rcall	.+764    	; 0x1b84 <__fp_pscA>
    1888:	30 f0       	brcs	.+12     	; 0x1896 <__addsf3+0x18>
    188a:	83 d1       	rcall	.+774    	; 0x1b92 <__fp_pscB>
    188c:	20 f0       	brcs	.+8      	; 0x1896 <__addsf3+0x18>
    188e:	31 f4       	brne	.+12     	; 0x189c <__addsf3+0x1e>
    1890:	9f 3f       	cpi	r25, 0xFF	; 255
    1892:	11 f4       	brne	.+4      	; 0x1898 <__addsf3+0x1a>
    1894:	1e f4       	brtc	.+6      	; 0x189c <__addsf3+0x1e>
    1896:	4e c1       	rjmp	.+668    	; 0x1b34 <__fp_nan>
    1898:	0e f4       	brtc	.+2      	; 0x189c <__addsf3+0x1e>
    189a:	e0 95       	com	r30
    189c:	e7 fb       	bst	r30, 7
    189e:	44 c1       	rjmp	.+648    	; 0x1b28 <__fp_inf>

000018a0 <__addsf3x>:
    18a0:	e9 2f       	mov	r30, r25
    18a2:	8f d1       	rcall	.+798    	; 0x1bc2 <__fp_split3>
    18a4:	80 f3       	brcs	.-32     	; 0x1886 <__addsf3+0x8>
    18a6:	ba 17       	cp	r27, r26
    18a8:	62 07       	cpc	r22, r18
    18aa:	73 07       	cpc	r23, r19
    18ac:	84 07       	cpc	r24, r20
    18ae:	95 07       	cpc	r25, r21
    18b0:	18 f0       	brcs	.+6      	; 0x18b8 <__addsf3x+0x18>
    18b2:	71 f4       	brne	.+28     	; 0x18d0 <__addsf3x+0x30>
    18b4:	9e f5       	brtc	.+102    	; 0x191c <__addsf3x+0x7c>
    18b6:	a7 c1       	rjmp	.+846    	; 0x1c06 <__fp_zero>
    18b8:	0e f4       	brtc	.+2      	; 0x18bc <__addsf3x+0x1c>
    18ba:	e0 95       	com	r30
    18bc:	0b 2e       	mov	r0, r27
    18be:	ba 2f       	mov	r27, r26
    18c0:	a0 2d       	mov	r26, r0
    18c2:	0b 01       	movw	r0, r22
    18c4:	b9 01       	movw	r22, r18
    18c6:	90 01       	movw	r18, r0
    18c8:	0c 01       	movw	r0, r24
    18ca:	ca 01       	movw	r24, r20
    18cc:	a0 01       	movw	r20, r0
    18ce:	11 24       	eor	r1, r1
    18d0:	ff 27       	eor	r31, r31
    18d2:	59 1b       	sub	r21, r25
    18d4:	99 f0       	breq	.+38     	; 0x18fc <__addsf3x+0x5c>
    18d6:	59 3f       	cpi	r21, 0xF9	; 249
    18d8:	50 f4       	brcc	.+20     	; 0x18ee <__addsf3x+0x4e>
    18da:	50 3e       	cpi	r21, 0xE0	; 224
    18dc:	68 f1       	brcs	.+90     	; 0x1938 <__addsf3x+0x98>
    18de:	1a 16       	cp	r1, r26
    18e0:	f0 40       	sbci	r31, 0x00	; 0
    18e2:	a2 2f       	mov	r26, r18
    18e4:	23 2f       	mov	r18, r19
    18e6:	34 2f       	mov	r19, r20
    18e8:	44 27       	eor	r20, r20
    18ea:	58 5f       	subi	r21, 0xF8	; 248
    18ec:	f3 cf       	rjmp	.-26     	; 0x18d4 <__addsf3x+0x34>
    18ee:	46 95       	lsr	r20
    18f0:	37 95       	ror	r19
    18f2:	27 95       	ror	r18
    18f4:	a7 95       	ror	r26
    18f6:	f0 40       	sbci	r31, 0x00	; 0
    18f8:	53 95       	inc	r21
    18fa:	c9 f7       	brne	.-14     	; 0x18ee <__addsf3x+0x4e>
    18fc:	7e f4       	brtc	.+30     	; 0x191c <__addsf3x+0x7c>
    18fe:	1f 16       	cp	r1, r31
    1900:	ba 0b       	sbc	r27, r26
    1902:	62 0b       	sbc	r22, r18
    1904:	73 0b       	sbc	r23, r19
    1906:	84 0b       	sbc	r24, r20
    1908:	ba f0       	brmi	.+46     	; 0x1938 <__addsf3x+0x98>
    190a:	91 50       	subi	r25, 0x01	; 1
    190c:	a1 f0       	breq	.+40     	; 0x1936 <__addsf3x+0x96>
    190e:	ff 0f       	add	r31, r31
    1910:	bb 1f       	adc	r27, r27
    1912:	66 1f       	adc	r22, r22
    1914:	77 1f       	adc	r23, r23
    1916:	88 1f       	adc	r24, r24
    1918:	c2 f7       	brpl	.-16     	; 0x190a <__addsf3x+0x6a>
    191a:	0e c0       	rjmp	.+28     	; 0x1938 <__addsf3x+0x98>
    191c:	ba 0f       	add	r27, r26
    191e:	62 1f       	adc	r22, r18
    1920:	73 1f       	adc	r23, r19
    1922:	84 1f       	adc	r24, r20
    1924:	48 f4       	brcc	.+18     	; 0x1938 <__addsf3x+0x98>
    1926:	87 95       	ror	r24
    1928:	77 95       	ror	r23
    192a:	67 95       	ror	r22
    192c:	b7 95       	ror	r27
    192e:	f7 95       	ror	r31
    1930:	9e 3f       	cpi	r25, 0xFE	; 254
    1932:	08 f0       	brcs	.+2      	; 0x1936 <__addsf3x+0x96>
    1934:	b3 cf       	rjmp	.-154    	; 0x189c <__addsf3+0x1e>
    1936:	93 95       	inc	r25
    1938:	88 0f       	add	r24, r24
    193a:	08 f0       	brcs	.+2      	; 0x193e <__addsf3x+0x9e>
    193c:	99 27       	eor	r25, r25
    193e:	ee 0f       	add	r30, r30
    1940:	97 95       	ror	r25
    1942:	87 95       	ror	r24
    1944:	08 95       	ret

00001946 <__divsf3>:
    1946:	0c d0       	rcall	.+24     	; 0x1960 <__divsf3x>
    1948:	2b c1       	rjmp	.+598    	; 0x1ba0 <__fp_round>
    194a:	23 d1       	rcall	.+582    	; 0x1b92 <__fp_pscB>
    194c:	40 f0       	brcs	.+16     	; 0x195e <__divsf3+0x18>
    194e:	1a d1       	rcall	.+564    	; 0x1b84 <__fp_pscA>
    1950:	30 f0       	brcs	.+12     	; 0x195e <__divsf3+0x18>
    1952:	21 f4       	brne	.+8      	; 0x195c <__divsf3+0x16>
    1954:	5f 3f       	cpi	r21, 0xFF	; 255
    1956:	19 f0       	breq	.+6      	; 0x195e <__divsf3+0x18>
    1958:	e7 c0       	rjmp	.+462    	; 0x1b28 <__fp_inf>
    195a:	51 11       	cpse	r21, r1
    195c:	55 c1       	rjmp	.+682    	; 0x1c08 <__fp_szero>
    195e:	ea c0       	rjmp	.+468    	; 0x1b34 <__fp_nan>

00001960 <__divsf3x>:
    1960:	30 d1       	rcall	.+608    	; 0x1bc2 <__fp_split3>
    1962:	98 f3       	brcs	.-26     	; 0x194a <__divsf3+0x4>

00001964 <__divsf3_pse>:
    1964:	99 23       	and	r25, r25
    1966:	c9 f3       	breq	.-14     	; 0x195a <__divsf3+0x14>
    1968:	55 23       	and	r21, r21
    196a:	b1 f3       	breq	.-20     	; 0x1958 <__divsf3+0x12>
    196c:	95 1b       	sub	r25, r21
    196e:	55 0b       	sbc	r21, r21
    1970:	bb 27       	eor	r27, r27
    1972:	aa 27       	eor	r26, r26
    1974:	62 17       	cp	r22, r18
    1976:	73 07       	cpc	r23, r19
    1978:	84 07       	cpc	r24, r20
    197a:	38 f0       	brcs	.+14     	; 0x198a <__divsf3_pse+0x26>
    197c:	9f 5f       	subi	r25, 0xFF	; 255
    197e:	5f 4f       	sbci	r21, 0xFF	; 255
    1980:	22 0f       	add	r18, r18
    1982:	33 1f       	adc	r19, r19
    1984:	44 1f       	adc	r20, r20
    1986:	aa 1f       	adc	r26, r26
    1988:	a9 f3       	breq	.-22     	; 0x1974 <__divsf3_pse+0x10>
    198a:	33 d0       	rcall	.+102    	; 0x19f2 <__divsf3_pse+0x8e>
    198c:	0e 2e       	mov	r0, r30
    198e:	3a f0       	brmi	.+14     	; 0x199e <__divsf3_pse+0x3a>
    1990:	e0 e8       	ldi	r30, 0x80	; 128
    1992:	30 d0       	rcall	.+96     	; 0x19f4 <__divsf3_pse+0x90>
    1994:	91 50       	subi	r25, 0x01	; 1
    1996:	50 40       	sbci	r21, 0x00	; 0
    1998:	e6 95       	lsr	r30
    199a:	00 1c       	adc	r0, r0
    199c:	ca f7       	brpl	.-14     	; 0x1990 <__divsf3_pse+0x2c>
    199e:	29 d0       	rcall	.+82     	; 0x19f2 <__divsf3_pse+0x8e>
    19a0:	fe 2f       	mov	r31, r30
    19a2:	27 d0       	rcall	.+78     	; 0x19f2 <__divsf3_pse+0x8e>
    19a4:	66 0f       	add	r22, r22
    19a6:	77 1f       	adc	r23, r23
    19a8:	88 1f       	adc	r24, r24
    19aa:	bb 1f       	adc	r27, r27
    19ac:	26 17       	cp	r18, r22
    19ae:	37 07       	cpc	r19, r23
    19b0:	48 07       	cpc	r20, r24
    19b2:	ab 07       	cpc	r26, r27
    19b4:	b0 e8       	ldi	r27, 0x80	; 128
    19b6:	09 f0       	breq	.+2      	; 0x19ba <__divsf3_pse+0x56>
    19b8:	bb 0b       	sbc	r27, r27
    19ba:	80 2d       	mov	r24, r0
    19bc:	bf 01       	movw	r22, r30
    19be:	ff 27       	eor	r31, r31
    19c0:	93 58       	subi	r25, 0x83	; 131
    19c2:	5f 4f       	sbci	r21, 0xFF	; 255
    19c4:	2a f0       	brmi	.+10     	; 0x19d0 <__divsf3_pse+0x6c>
    19c6:	9e 3f       	cpi	r25, 0xFE	; 254
    19c8:	51 05       	cpc	r21, r1
    19ca:	68 f0       	brcs	.+26     	; 0x19e6 <__divsf3_pse+0x82>
    19cc:	ad c0       	rjmp	.+346    	; 0x1b28 <__fp_inf>
    19ce:	1c c1       	rjmp	.+568    	; 0x1c08 <__fp_szero>
    19d0:	5f 3f       	cpi	r21, 0xFF	; 255
    19d2:	ec f3       	brlt	.-6      	; 0x19ce <__divsf3_pse+0x6a>
    19d4:	98 3e       	cpi	r25, 0xE8	; 232
    19d6:	dc f3       	brlt	.-10     	; 0x19ce <__divsf3_pse+0x6a>
    19d8:	86 95       	lsr	r24
    19da:	77 95       	ror	r23
    19dc:	67 95       	ror	r22
    19de:	b7 95       	ror	r27
    19e0:	f7 95       	ror	r31
    19e2:	9f 5f       	subi	r25, 0xFF	; 255
    19e4:	c9 f7       	brne	.-14     	; 0x19d8 <__divsf3_pse+0x74>
    19e6:	88 0f       	add	r24, r24
    19e8:	91 1d       	adc	r25, r1
    19ea:	96 95       	lsr	r25
    19ec:	87 95       	ror	r24
    19ee:	97 f9       	bld	r25, 7
    19f0:	08 95       	ret
    19f2:	e1 e0       	ldi	r30, 0x01	; 1
    19f4:	66 0f       	add	r22, r22
    19f6:	77 1f       	adc	r23, r23
    19f8:	88 1f       	adc	r24, r24
    19fa:	bb 1f       	adc	r27, r27
    19fc:	62 17       	cp	r22, r18
    19fe:	73 07       	cpc	r23, r19
    1a00:	84 07       	cpc	r24, r20
    1a02:	ba 07       	cpc	r27, r26
    1a04:	20 f0       	brcs	.+8      	; 0x1a0e <__divsf3_pse+0xaa>
    1a06:	62 1b       	sub	r22, r18
    1a08:	73 0b       	sbc	r23, r19
    1a0a:	84 0b       	sbc	r24, r20
    1a0c:	ba 0b       	sbc	r27, r26
    1a0e:	ee 1f       	adc	r30, r30
    1a10:	88 f7       	brcc	.-30     	; 0x19f4 <__divsf3_pse+0x90>
    1a12:	e0 95       	com	r30
    1a14:	08 95       	ret

00001a16 <__fixsfsi>:
    1a16:	04 d0       	rcall	.+8      	; 0x1a20 <__fixunssfsi>
    1a18:	68 94       	set
    1a1a:	b1 11       	cpse	r27, r1
    1a1c:	f5 c0       	rjmp	.+490    	; 0x1c08 <__fp_szero>
    1a1e:	08 95       	ret

00001a20 <__fixunssfsi>:
    1a20:	d8 d0       	rcall	.+432    	; 0x1bd2 <__fp_splitA>
    1a22:	88 f0       	brcs	.+34     	; 0x1a46 <__fixunssfsi+0x26>
    1a24:	9f 57       	subi	r25, 0x7F	; 127
    1a26:	90 f0       	brcs	.+36     	; 0x1a4c <__fixunssfsi+0x2c>
    1a28:	b9 2f       	mov	r27, r25
    1a2a:	99 27       	eor	r25, r25
    1a2c:	b7 51       	subi	r27, 0x17	; 23
    1a2e:	a0 f0       	brcs	.+40     	; 0x1a58 <__fixunssfsi+0x38>
    1a30:	d1 f0       	breq	.+52     	; 0x1a66 <__fixunssfsi+0x46>
    1a32:	66 0f       	add	r22, r22
    1a34:	77 1f       	adc	r23, r23
    1a36:	88 1f       	adc	r24, r24
    1a38:	99 1f       	adc	r25, r25
    1a3a:	1a f0       	brmi	.+6      	; 0x1a42 <__fixunssfsi+0x22>
    1a3c:	ba 95       	dec	r27
    1a3e:	c9 f7       	brne	.-14     	; 0x1a32 <__fixunssfsi+0x12>
    1a40:	12 c0       	rjmp	.+36     	; 0x1a66 <__fixunssfsi+0x46>
    1a42:	b1 30       	cpi	r27, 0x01	; 1
    1a44:	81 f0       	breq	.+32     	; 0x1a66 <__fixunssfsi+0x46>
    1a46:	df d0       	rcall	.+446    	; 0x1c06 <__fp_zero>
    1a48:	b1 e0       	ldi	r27, 0x01	; 1
    1a4a:	08 95       	ret
    1a4c:	dc c0       	rjmp	.+440    	; 0x1c06 <__fp_zero>
    1a4e:	67 2f       	mov	r22, r23
    1a50:	78 2f       	mov	r23, r24
    1a52:	88 27       	eor	r24, r24
    1a54:	b8 5f       	subi	r27, 0xF8	; 248
    1a56:	39 f0       	breq	.+14     	; 0x1a66 <__fixunssfsi+0x46>
    1a58:	b9 3f       	cpi	r27, 0xF9	; 249
    1a5a:	cc f3       	brlt	.-14     	; 0x1a4e <__fixunssfsi+0x2e>
    1a5c:	86 95       	lsr	r24
    1a5e:	77 95       	ror	r23
    1a60:	67 95       	ror	r22
    1a62:	b3 95       	inc	r27
    1a64:	d9 f7       	brne	.-10     	; 0x1a5c <__fixunssfsi+0x3c>
    1a66:	3e f4       	brtc	.+14     	; 0x1a76 <__fixunssfsi+0x56>
    1a68:	90 95       	com	r25
    1a6a:	80 95       	com	r24
    1a6c:	70 95       	com	r23
    1a6e:	61 95       	neg	r22
    1a70:	7f 4f       	sbci	r23, 0xFF	; 255
    1a72:	8f 4f       	sbci	r24, 0xFF	; 255
    1a74:	9f 4f       	sbci	r25, 0xFF	; 255
    1a76:	08 95       	ret

00001a78 <__floatunsisf>:
    1a78:	e8 94       	clt
    1a7a:	09 c0       	rjmp	.+18     	; 0x1a8e <__floatsisf+0x12>

00001a7c <__floatsisf>:
    1a7c:	97 fb       	bst	r25, 7
    1a7e:	3e f4       	brtc	.+14     	; 0x1a8e <__floatsisf+0x12>
    1a80:	90 95       	com	r25
    1a82:	80 95       	com	r24
    1a84:	70 95       	com	r23
    1a86:	61 95       	neg	r22
    1a88:	7f 4f       	sbci	r23, 0xFF	; 255
    1a8a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a8e:	99 23       	and	r25, r25
    1a90:	a9 f0       	breq	.+42     	; 0x1abc <__floatsisf+0x40>
    1a92:	f9 2f       	mov	r31, r25
    1a94:	96 e9       	ldi	r25, 0x96	; 150
    1a96:	bb 27       	eor	r27, r27
    1a98:	93 95       	inc	r25
    1a9a:	f6 95       	lsr	r31
    1a9c:	87 95       	ror	r24
    1a9e:	77 95       	ror	r23
    1aa0:	67 95       	ror	r22
    1aa2:	b7 95       	ror	r27
    1aa4:	f1 11       	cpse	r31, r1
    1aa6:	f8 cf       	rjmp	.-16     	; 0x1a98 <__floatsisf+0x1c>
    1aa8:	fa f4       	brpl	.+62     	; 0x1ae8 <__floatsisf+0x6c>
    1aaa:	bb 0f       	add	r27, r27
    1aac:	11 f4       	brne	.+4      	; 0x1ab2 <__floatsisf+0x36>
    1aae:	60 ff       	sbrs	r22, 0
    1ab0:	1b c0       	rjmp	.+54     	; 0x1ae8 <__floatsisf+0x6c>
    1ab2:	6f 5f       	subi	r22, 0xFF	; 255
    1ab4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ab6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ab8:	9f 4f       	sbci	r25, 0xFF	; 255
    1aba:	16 c0       	rjmp	.+44     	; 0x1ae8 <__floatsisf+0x6c>
    1abc:	88 23       	and	r24, r24
    1abe:	11 f0       	breq	.+4      	; 0x1ac4 <__floatsisf+0x48>
    1ac0:	96 e9       	ldi	r25, 0x96	; 150
    1ac2:	11 c0       	rjmp	.+34     	; 0x1ae6 <__floatsisf+0x6a>
    1ac4:	77 23       	and	r23, r23
    1ac6:	21 f0       	breq	.+8      	; 0x1ad0 <__floatsisf+0x54>
    1ac8:	9e e8       	ldi	r25, 0x8E	; 142
    1aca:	87 2f       	mov	r24, r23
    1acc:	76 2f       	mov	r23, r22
    1ace:	05 c0       	rjmp	.+10     	; 0x1ada <__floatsisf+0x5e>
    1ad0:	66 23       	and	r22, r22
    1ad2:	71 f0       	breq	.+28     	; 0x1af0 <__floatsisf+0x74>
    1ad4:	96 e8       	ldi	r25, 0x86	; 134
    1ad6:	86 2f       	mov	r24, r22
    1ad8:	70 e0       	ldi	r23, 0x00	; 0
    1ada:	60 e0       	ldi	r22, 0x00	; 0
    1adc:	2a f0       	brmi	.+10     	; 0x1ae8 <__floatsisf+0x6c>
    1ade:	9a 95       	dec	r25
    1ae0:	66 0f       	add	r22, r22
    1ae2:	77 1f       	adc	r23, r23
    1ae4:	88 1f       	adc	r24, r24
    1ae6:	da f7       	brpl	.-10     	; 0x1ade <__floatsisf+0x62>
    1ae8:	88 0f       	add	r24, r24
    1aea:	96 95       	lsr	r25
    1aec:	87 95       	ror	r24
    1aee:	97 f9       	bld	r25, 7
    1af0:	08 95       	ret

00001af2 <__fp_arccos>:
    1af2:	df 93       	push	r29
    1af4:	cf 93       	push	r28
    1af6:	1f 93       	push	r17
    1af8:	0f 93       	push	r16
    1afa:	8b 01       	movw	r16, r22
    1afc:	ec 01       	movw	r28, r24
    1afe:	ec e8       	ldi	r30, 0x8C	; 140
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	1b d0       	rcall	.+54     	; 0x1b3a <__fp_powser>
    1b04:	4d d0       	rcall	.+154    	; 0x1ba0 <__fp_round>
    1b06:	98 01       	movw	r18, r16
    1b08:	ae 01       	movw	r20, r28
    1b0a:	8b 01       	movw	r16, r22
    1b0c:	ec 01       	movw	r28, r24
    1b0e:	60 e0       	ldi	r22, 0x00	; 0
    1b10:	70 e0       	ldi	r23, 0x00	; 0
    1b12:	80 e8       	ldi	r24, 0x80	; 128
    1b14:	9f e3       	ldi	r25, 0x3F	; 63
    1b16:	b2 de       	rcall	.-668    	; 0x187c <__subsf3>
    1b18:	e4 d0       	rcall	.+456    	; 0x1ce2 <sqrt>
    1b1a:	98 01       	movw	r18, r16
    1b1c:	ae 01       	movw	r20, r28
    1b1e:	0f 91       	pop	r16
    1b20:	1f 91       	pop	r17
    1b22:	cf 91       	pop	r28
    1b24:	df 91       	pop	r29
    1b26:	82 c0       	rjmp	.+260    	; 0x1c2c <__mulsf3x>

00001b28 <__fp_inf>:
    1b28:	97 f9       	bld	r25, 7
    1b2a:	9f 67       	ori	r25, 0x7F	; 127
    1b2c:	80 e8       	ldi	r24, 0x80	; 128
    1b2e:	70 e0       	ldi	r23, 0x00	; 0
    1b30:	60 e0       	ldi	r22, 0x00	; 0
    1b32:	08 95       	ret

00001b34 <__fp_nan>:
    1b34:	9f ef       	ldi	r25, 0xFF	; 255
    1b36:	80 ec       	ldi	r24, 0xC0	; 192
    1b38:	08 95       	ret

00001b3a <__fp_powser>:
    1b3a:	df 93       	push	r29
    1b3c:	cf 93       	push	r28
    1b3e:	1f 93       	push	r17
    1b40:	0f 93       	push	r16
    1b42:	ff 92       	push	r15
    1b44:	ef 92       	push	r14
    1b46:	df 92       	push	r13
    1b48:	7b 01       	movw	r14, r22
    1b4a:	8c 01       	movw	r16, r24
    1b4c:	68 94       	set
    1b4e:	05 c0       	rjmp	.+10     	; 0x1b5a <__fp_powser+0x20>
    1b50:	da 2e       	mov	r13, r26
    1b52:	ef 01       	movw	r28, r30
    1b54:	6b d0       	rcall	.+214    	; 0x1c2c <__mulsf3x>
    1b56:	fe 01       	movw	r30, r28
    1b58:	e8 94       	clt
    1b5a:	a5 91       	lpm	r26, Z+
    1b5c:	25 91       	lpm	r18, Z+
    1b5e:	35 91       	lpm	r19, Z+
    1b60:	45 91       	lpm	r20, Z+
    1b62:	55 91       	lpm	r21, Z+
    1b64:	ae f3       	brts	.-22     	; 0x1b50 <__fp_powser+0x16>
    1b66:	ef 01       	movw	r28, r30
    1b68:	9b de       	rcall	.-714    	; 0x18a0 <__addsf3x>
    1b6a:	fe 01       	movw	r30, r28
    1b6c:	97 01       	movw	r18, r14
    1b6e:	a8 01       	movw	r20, r16
    1b70:	da 94       	dec	r13
    1b72:	79 f7       	brne	.-34     	; 0x1b52 <__fp_powser+0x18>
    1b74:	df 90       	pop	r13
    1b76:	ef 90       	pop	r14
    1b78:	ff 90       	pop	r15
    1b7a:	0f 91       	pop	r16
    1b7c:	1f 91       	pop	r17
    1b7e:	cf 91       	pop	r28
    1b80:	df 91       	pop	r29
    1b82:	08 95       	ret

00001b84 <__fp_pscA>:
    1b84:	00 24       	eor	r0, r0
    1b86:	0a 94       	dec	r0
    1b88:	16 16       	cp	r1, r22
    1b8a:	17 06       	cpc	r1, r23
    1b8c:	18 06       	cpc	r1, r24
    1b8e:	09 06       	cpc	r0, r25
    1b90:	08 95       	ret

00001b92 <__fp_pscB>:
    1b92:	00 24       	eor	r0, r0
    1b94:	0a 94       	dec	r0
    1b96:	12 16       	cp	r1, r18
    1b98:	13 06       	cpc	r1, r19
    1b9a:	14 06       	cpc	r1, r20
    1b9c:	05 06       	cpc	r0, r21
    1b9e:	08 95       	ret

00001ba0 <__fp_round>:
    1ba0:	09 2e       	mov	r0, r25
    1ba2:	03 94       	inc	r0
    1ba4:	00 0c       	add	r0, r0
    1ba6:	11 f4       	brne	.+4      	; 0x1bac <__fp_round+0xc>
    1ba8:	88 23       	and	r24, r24
    1baa:	52 f0       	brmi	.+20     	; 0x1bc0 <__fp_round+0x20>
    1bac:	bb 0f       	add	r27, r27
    1bae:	40 f4       	brcc	.+16     	; 0x1bc0 <__fp_round+0x20>
    1bb0:	bf 2b       	or	r27, r31
    1bb2:	11 f4       	brne	.+4      	; 0x1bb8 <__fp_round+0x18>
    1bb4:	60 ff       	sbrs	r22, 0
    1bb6:	04 c0       	rjmp	.+8      	; 0x1bc0 <__fp_round+0x20>
    1bb8:	6f 5f       	subi	r22, 0xFF	; 255
    1bba:	7f 4f       	sbci	r23, 0xFF	; 255
    1bbc:	8f 4f       	sbci	r24, 0xFF	; 255
    1bbe:	9f 4f       	sbci	r25, 0xFF	; 255
    1bc0:	08 95       	ret

00001bc2 <__fp_split3>:
    1bc2:	57 fd       	sbrc	r21, 7
    1bc4:	90 58       	subi	r25, 0x80	; 128
    1bc6:	44 0f       	add	r20, r20
    1bc8:	55 1f       	adc	r21, r21
    1bca:	59 f0       	breq	.+22     	; 0x1be2 <__fp_splitA+0x10>
    1bcc:	5f 3f       	cpi	r21, 0xFF	; 255
    1bce:	71 f0       	breq	.+28     	; 0x1bec <__fp_splitA+0x1a>
    1bd0:	47 95       	ror	r20

00001bd2 <__fp_splitA>:
    1bd2:	88 0f       	add	r24, r24
    1bd4:	97 fb       	bst	r25, 7
    1bd6:	99 1f       	adc	r25, r25
    1bd8:	61 f0       	breq	.+24     	; 0x1bf2 <__fp_splitA+0x20>
    1bda:	9f 3f       	cpi	r25, 0xFF	; 255
    1bdc:	79 f0       	breq	.+30     	; 0x1bfc <__fp_splitA+0x2a>
    1bde:	87 95       	ror	r24
    1be0:	08 95       	ret
    1be2:	12 16       	cp	r1, r18
    1be4:	13 06       	cpc	r1, r19
    1be6:	14 06       	cpc	r1, r20
    1be8:	55 1f       	adc	r21, r21
    1bea:	f2 cf       	rjmp	.-28     	; 0x1bd0 <__fp_split3+0xe>
    1bec:	46 95       	lsr	r20
    1bee:	f1 df       	rcall	.-30     	; 0x1bd2 <__fp_splitA>
    1bf0:	08 c0       	rjmp	.+16     	; 0x1c02 <__fp_splitA+0x30>
    1bf2:	16 16       	cp	r1, r22
    1bf4:	17 06       	cpc	r1, r23
    1bf6:	18 06       	cpc	r1, r24
    1bf8:	99 1f       	adc	r25, r25
    1bfa:	f1 cf       	rjmp	.-30     	; 0x1bde <__fp_splitA+0xc>
    1bfc:	86 95       	lsr	r24
    1bfe:	71 05       	cpc	r23, r1
    1c00:	61 05       	cpc	r22, r1
    1c02:	08 94       	sec
    1c04:	08 95       	ret

00001c06 <__fp_zero>:
    1c06:	e8 94       	clt

00001c08 <__fp_szero>:
    1c08:	bb 27       	eor	r27, r27
    1c0a:	66 27       	eor	r22, r22
    1c0c:	77 27       	eor	r23, r23
    1c0e:	cb 01       	movw	r24, r22
    1c10:	97 f9       	bld	r25, 7
    1c12:	08 95       	ret

00001c14 <__mulsf3>:
    1c14:	0b d0       	rcall	.+22     	; 0x1c2c <__mulsf3x>
    1c16:	c4 cf       	rjmp	.-120    	; 0x1ba0 <__fp_round>
    1c18:	b5 df       	rcall	.-150    	; 0x1b84 <__fp_pscA>
    1c1a:	28 f0       	brcs	.+10     	; 0x1c26 <__mulsf3+0x12>
    1c1c:	ba df       	rcall	.-140    	; 0x1b92 <__fp_pscB>
    1c1e:	18 f0       	brcs	.+6      	; 0x1c26 <__mulsf3+0x12>
    1c20:	95 23       	and	r25, r21
    1c22:	09 f0       	breq	.+2      	; 0x1c26 <__mulsf3+0x12>
    1c24:	81 cf       	rjmp	.-254    	; 0x1b28 <__fp_inf>
    1c26:	86 cf       	rjmp	.-244    	; 0x1b34 <__fp_nan>
    1c28:	11 24       	eor	r1, r1
    1c2a:	ee cf       	rjmp	.-36     	; 0x1c08 <__fp_szero>

00001c2c <__mulsf3x>:
    1c2c:	ca df       	rcall	.-108    	; 0x1bc2 <__fp_split3>
    1c2e:	a0 f3       	brcs	.-24     	; 0x1c18 <__mulsf3+0x4>

00001c30 <__mulsf3_pse>:
    1c30:	95 9f       	mul	r25, r21
    1c32:	d1 f3       	breq	.-12     	; 0x1c28 <__mulsf3+0x14>
    1c34:	95 0f       	add	r25, r21
    1c36:	50 e0       	ldi	r21, 0x00	; 0
    1c38:	55 1f       	adc	r21, r21
    1c3a:	62 9f       	mul	r22, r18
    1c3c:	f0 01       	movw	r30, r0
    1c3e:	72 9f       	mul	r23, r18
    1c40:	bb 27       	eor	r27, r27
    1c42:	f0 0d       	add	r31, r0
    1c44:	b1 1d       	adc	r27, r1
    1c46:	63 9f       	mul	r22, r19
    1c48:	aa 27       	eor	r26, r26
    1c4a:	f0 0d       	add	r31, r0
    1c4c:	b1 1d       	adc	r27, r1
    1c4e:	aa 1f       	adc	r26, r26
    1c50:	64 9f       	mul	r22, r20
    1c52:	66 27       	eor	r22, r22
    1c54:	b0 0d       	add	r27, r0
    1c56:	a1 1d       	adc	r26, r1
    1c58:	66 1f       	adc	r22, r22
    1c5a:	82 9f       	mul	r24, r18
    1c5c:	22 27       	eor	r18, r18
    1c5e:	b0 0d       	add	r27, r0
    1c60:	a1 1d       	adc	r26, r1
    1c62:	62 1f       	adc	r22, r18
    1c64:	73 9f       	mul	r23, r19
    1c66:	b0 0d       	add	r27, r0
    1c68:	a1 1d       	adc	r26, r1
    1c6a:	62 1f       	adc	r22, r18
    1c6c:	83 9f       	mul	r24, r19
    1c6e:	a0 0d       	add	r26, r0
    1c70:	61 1d       	adc	r22, r1
    1c72:	22 1f       	adc	r18, r18
    1c74:	74 9f       	mul	r23, r20
    1c76:	33 27       	eor	r19, r19
    1c78:	a0 0d       	add	r26, r0
    1c7a:	61 1d       	adc	r22, r1
    1c7c:	23 1f       	adc	r18, r19
    1c7e:	84 9f       	mul	r24, r20
    1c80:	60 0d       	add	r22, r0
    1c82:	21 1d       	adc	r18, r1
    1c84:	82 2f       	mov	r24, r18
    1c86:	76 2f       	mov	r23, r22
    1c88:	6a 2f       	mov	r22, r26
    1c8a:	11 24       	eor	r1, r1
    1c8c:	9f 57       	subi	r25, 0x7F	; 127
    1c8e:	50 40       	sbci	r21, 0x00	; 0
    1c90:	8a f0       	brmi	.+34     	; 0x1cb4 <__mulsf3_pse+0x84>
    1c92:	e1 f0       	breq	.+56     	; 0x1ccc <__mulsf3_pse+0x9c>
    1c94:	88 23       	and	r24, r24
    1c96:	4a f0       	brmi	.+18     	; 0x1caa <__mulsf3_pse+0x7a>
    1c98:	ee 0f       	add	r30, r30
    1c9a:	ff 1f       	adc	r31, r31
    1c9c:	bb 1f       	adc	r27, r27
    1c9e:	66 1f       	adc	r22, r22
    1ca0:	77 1f       	adc	r23, r23
    1ca2:	88 1f       	adc	r24, r24
    1ca4:	91 50       	subi	r25, 0x01	; 1
    1ca6:	50 40       	sbci	r21, 0x00	; 0
    1ca8:	a9 f7       	brne	.-22     	; 0x1c94 <__mulsf3_pse+0x64>
    1caa:	9e 3f       	cpi	r25, 0xFE	; 254
    1cac:	51 05       	cpc	r21, r1
    1cae:	70 f0       	brcs	.+28     	; 0x1ccc <__mulsf3_pse+0x9c>
    1cb0:	3b cf       	rjmp	.-394    	; 0x1b28 <__fp_inf>
    1cb2:	aa cf       	rjmp	.-172    	; 0x1c08 <__fp_szero>
    1cb4:	5f 3f       	cpi	r21, 0xFF	; 255
    1cb6:	ec f3       	brlt	.-6      	; 0x1cb2 <__mulsf3_pse+0x82>
    1cb8:	98 3e       	cpi	r25, 0xE8	; 232
    1cba:	dc f3       	brlt	.-10     	; 0x1cb2 <__mulsf3_pse+0x82>
    1cbc:	86 95       	lsr	r24
    1cbe:	77 95       	ror	r23
    1cc0:	67 95       	ror	r22
    1cc2:	b7 95       	ror	r27
    1cc4:	f7 95       	ror	r31
    1cc6:	e7 95       	ror	r30
    1cc8:	9f 5f       	subi	r25, 0xFF	; 255
    1cca:	c1 f7       	brne	.-16     	; 0x1cbc <__mulsf3_pse+0x8c>
    1ccc:	fe 2b       	or	r31, r30
    1cce:	88 0f       	add	r24, r24
    1cd0:	91 1d       	adc	r25, r1
    1cd2:	96 95       	lsr	r25
    1cd4:	87 95       	ror	r24
    1cd6:	97 f9       	bld	r25, 7
    1cd8:	08 95       	ret
    1cda:	11 f4       	brne	.+4      	; 0x1ce0 <__mulsf3_pse+0xb0>
    1cdc:	0e f4       	brtc	.+2      	; 0x1ce0 <__mulsf3_pse+0xb0>
    1cde:	2a cf       	rjmp	.-428    	; 0x1b34 <__fp_nan>
    1ce0:	3e c0       	rjmp	.+124    	; 0x1d5e <__fp_mpack>

00001ce2 <sqrt>:
    1ce2:	77 df       	rcall	.-274    	; 0x1bd2 <__fp_splitA>
    1ce4:	d0 f3       	brcs	.-12     	; 0x1cda <__mulsf3_pse+0xaa>
    1ce6:	99 23       	and	r25, r25
    1ce8:	d9 f3       	breq	.-10     	; 0x1ce0 <__mulsf3_pse+0xb0>
    1cea:	ce f3       	brts	.-14     	; 0x1cde <__mulsf3_pse+0xae>
    1cec:	9f 57       	subi	r25, 0x7F	; 127
    1cee:	55 0b       	sbc	r21, r21
    1cf0:	87 ff       	sbrs	r24, 7
    1cf2:	43 d0       	rcall	.+134    	; 0x1d7a <__fp_norm2>
    1cf4:	00 24       	eor	r0, r0
    1cf6:	a0 e6       	ldi	r26, 0x60	; 96
    1cf8:	40 ea       	ldi	r20, 0xA0	; 160
    1cfa:	90 01       	movw	r18, r0
    1cfc:	80 58       	subi	r24, 0x80	; 128
    1cfe:	56 95       	lsr	r21
    1d00:	97 95       	ror	r25
    1d02:	28 f4       	brcc	.+10     	; 0x1d0e <sqrt+0x2c>
    1d04:	80 5c       	subi	r24, 0xC0	; 192
    1d06:	66 0f       	add	r22, r22
    1d08:	77 1f       	adc	r23, r23
    1d0a:	88 1f       	adc	r24, r24
    1d0c:	20 f0       	brcs	.+8      	; 0x1d16 <sqrt+0x34>
    1d0e:	26 17       	cp	r18, r22
    1d10:	37 07       	cpc	r19, r23
    1d12:	48 07       	cpc	r20, r24
    1d14:	30 f4       	brcc	.+12     	; 0x1d22 <sqrt+0x40>
    1d16:	62 1b       	sub	r22, r18
    1d18:	73 0b       	sbc	r23, r19
    1d1a:	84 0b       	sbc	r24, r20
    1d1c:	20 29       	or	r18, r0
    1d1e:	31 29       	or	r19, r1
    1d20:	4a 2b       	or	r20, r26
    1d22:	a6 95       	lsr	r26
    1d24:	17 94       	ror	r1
    1d26:	07 94       	ror	r0
    1d28:	20 25       	eor	r18, r0
    1d2a:	31 25       	eor	r19, r1
    1d2c:	4a 27       	eor	r20, r26
    1d2e:	58 f7       	brcc	.-42     	; 0x1d06 <sqrt+0x24>
    1d30:	66 0f       	add	r22, r22
    1d32:	77 1f       	adc	r23, r23
    1d34:	88 1f       	adc	r24, r24
    1d36:	20 f0       	brcs	.+8      	; 0x1d40 <sqrt+0x5e>
    1d38:	26 17       	cp	r18, r22
    1d3a:	37 07       	cpc	r19, r23
    1d3c:	48 07       	cpc	r20, r24
    1d3e:	30 f4       	brcc	.+12     	; 0x1d4c <sqrt+0x6a>
    1d40:	62 0b       	sbc	r22, r18
    1d42:	73 0b       	sbc	r23, r19
    1d44:	84 0b       	sbc	r24, r20
    1d46:	20 0d       	add	r18, r0
    1d48:	31 1d       	adc	r19, r1
    1d4a:	41 1d       	adc	r20, r1
    1d4c:	a0 95       	com	r26
    1d4e:	81 f7       	brne	.-32     	; 0x1d30 <sqrt+0x4e>
    1d50:	b9 01       	movw	r22, r18
    1d52:	84 2f       	mov	r24, r20
    1d54:	91 58       	subi	r25, 0x81	; 129
    1d56:	88 0f       	add	r24, r24
    1d58:	96 95       	lsr	r25
    1d5a:	87 95       	ror	r24
    1d5c:	08 95       	ret

00001d5e <__fp_mpack>:
    1d5e:	9f 3f       	cpi	r25, 0xFF	; 255
    1d60:	31 f0       	breq	.+12     	; 0x1d6e <__fp_mpack_finite+0xc>

00001d62 <__fp_mpack_finite>:
    1d62:	91 50       	subi	r25, 0x01	; 1
    1d64:	20 f4       	brcc	.+8      	; 0x1d6e <__fp_mpack_finite+0xc>
    1d66:	87 95       	ror	r24
    1d68:	77 95       	ror	r23
    1d6a:	67 95       	ror	r22
    1d6c:	b7 95       	ror	r27
    1d6e:	88 0f       	add	r24, r24
    1d70:	91 1d       	adc	r25, r1
    1d72:	96 95       	lsr	r25
    1d74:	87 95       	ror	r24
    1d76:	97 f9       	bld	r25, 7
    1d78:	08 95       	ret

00001d7a <__fp_norm2>:
    1d7a:	91 50       	subi	r25, 0x01	; 1
    1d7c:	50 40       	sbci	r21, 0x00	; 0
    1d7e:	66 0f       	add	r22, r22
    1d80:	77 1f       	adc	r23, r23
    1d82:	88 1f       	adc	r24, r24
    1d84:	d2 f7       	brpl	.-12     	; 0x1d7a <__fp_norm2>
    1d86:	08 95       	ret

00001d88 <__udivmodhi4>:
    1d88:	aa 1b       	sub	r26, r26
    1d8a:	bb 1b       	sub	r27, r27
    1d8c:	51 e1       	ldi	r21, 0x11	; 17
    1d8e:	07 c0       	rjmp	.+14     	; 0x1d9e <__udivmodhi4_ep>

00001d90 <__udivmodhi4_loop>:
    1d90:	aa 1f       	adc	r26, r26
    1d92:	bb 1f       	adc	r27, r27
    1d94:	a6 17       	cp	r26, r22
    1d96:	b7 07       	cpc	r27, r23
    1d98:	10 f0       	brcs	.+4      	; 0x1d9e <__udivmodhi4_ep>
    1d9a:	a6 1b       	sub	r26, r22
    1d9c:	b7 0b       	sbc	r27, r23

00001d9e <__udivmodhi4_ep>:
    1d9e:	88 1f       	adc	r24, r24
    1da0:	99 1f       	adc	r25, r25
    1da2:	5a 95       	dec	r21
    1da4:	a9 f7       	brne	.-22     	; 0x1d90 <__udivmodhi4_loop>
    1da6:	80 95       	com	r24
    1da8:	90 95       	com	r25
    1daa:	bc 01       	movw	r22, r24
    1dac:	cd 01       	movw	r24, r26
    1dae:	08 95       	ret

00001db0 <__divmodhi4>:
    1db0:	97 fb       	bst	r25, 7
    1db2:	09 2e       	mov	r0, r25
    1db4:	07 26       	eor	r0, r23
    1db6:	0a d0       	rcall	.+20     	; 0x1dcc <__divmodhi4_neg1>
    1db8:	77 fd       	sbrc	r23, 7
    1dba:	04 d0       	rcall	.+8      	; 0x1dc4 <__divmodhi4_neg2>
    1dbc:	e5 df       	rcall	.-54     	; 0x1d88 <__udivmodhi4>
    1dbe:	06 d0       	rcall	.+12     	; 0x1dcc <__divmodhi4_neg1>
    1dc0:	00 20       	and	r0, r0
    1dc2:	1a f4       	brpl	.+6      	; 0x1dca <__divmodhi4_exit>

00001dc4 <__divmodhi4_neg2>:
    1dc4:	70 95       	com	r23
    1dc6:	61 95       	neg	r22
    1dc8:	7f 4f       	sbci	r23, 0xFF	; 255

00001dca <__divmodhi4_exit>:
    1dca:	08 95       	ret

00001dcc <__divmodhi4_neg1>:
    1dcc:	f6 f7       	brtc	.-4      	; 0x1dca <__divmodhi4_exit>
    1dce:	90 95       	com	r25
    1dd0:	81 95       	neg	r24
    1dd2:	9f 4f       	sbci	r25, 0xFF	; 255
    1dd4:	08 95       	ret

00001dd6 <dtostrf>:
    1dd6:	ef 92       	push	r14
    1dd8:	ff 92       	push	r15
    1dda:	0f 93       	push	r16
    1ddc:	1f 93       	push	r17
    1dde:	f2 2f       	mov	r31, r18
    1de0:	f0 2e       	mov	r15, r16
    1de2:	47 fd       	sbrc	r20, 7
    1de4:	02 c0       	rjmp	.+4      	; 0x1dea <dtostrf+0x14>
    1de6:	e4 e0       	ldi	r30, 0x04	; 4
    1de8:	01 c0       	rjmp	.+2      	; 0x1dec <dtostrf+0x16>
    1dea:	e4 e1       	ldi	r30, 0x14	; 20
    1dec:	24 2f       	mov	r18, r20
    1dee:	33 27       	eor	r19, r19
    1df0:	27 fd       	sbrc	r18, 7
    1df2:	30 95       	com	r19
    1df4:	37 ff       	sbrs	r19, 7
    1df6:	03 c0       	rjmp	.+6      	; 0x1dfe <dtostrf+0x28>
    1df8:	30 95       	com	r19
    1dfa:	21 95       	neg	r18
    1dfc:	3f 4f       	sbci	r19, 0xFF	; 255
    1dfe:	4f 2d       	mov	r20, r15
    1e00:	51 2f       	mov	r21, r17
    1e02:	0f 2f       	mov	r16, r31
    1e04:	ee 2e       	mov	r14, r30
    1e06:	0e 94 93 12 	call	0x2526	; 0x2526 <dtoa_prf>
    1e0a:	8f 2d       	mov	r24, r15
    1e0c:	91 2f       	mov	r25, r17
    1e0e:	1f 91       	pop	r17
    1e10:	0f 91       	pop	r16
    1e12:	ff 90       	pop	r15
    1e14:	ef 90       	pop	r14
    1e16:	08 95       	ret

00001e18 <malloc>:
    1e18:	cf 93       	push	r28
    1e1a:	df 93       	push	r29
    1e1c:	bc 01       	movw	r22, r24
    1e1e:	82 30       	cpi	r24, 0x02	; 2
    1e20:	91 05       	cpc	r25, r1
    1e22:	10 f4       	brcc	.+4      	; 0x1e28 <malloc+0x10>
    1e24:	62 e0       	ldi	r22, 0x02	; 2
    1e26:	70 e0       	ldi	r23, 0x00	; 0
    1e28:	a0 91 b7 0b 	lds	r26, 0x0BB7
    1e2c:	b0 91 b8 0b 	lds	r27, 0x0BB8
    1e30:	ed 01       	movw	r28, r26
    1e32:	e0 e0       	ldi	r30, 0x00	; 0
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	40 e0       	ldi	r20, 0x00	; 0
    1e38:	50 e0       	ldi	r21, 0x00	; 0
    1e3a:	21 c0       	rjmp	.+66     	; 0x1e7e <malloc+0x66>
    1e3c:	88 81       	ld	r24, Y
    1e3e:	99 81       	ldd	r25, Y+1	; 0x01
    1e40:	86 17       	cp	r24, r22
    1e42:	97 07       	cpc	r25, r23
    1e44:	69 f4       	brne	.+26     	; 0x1e60 <malloc+0x48>
    1e46:	8a 81       	ldd	r24, Y+2	; 0x02
    1e48:	9b 81       	ldd	r25, Y+3	; 0x03
    1e4a:	30 97       	sbiw	r30, 0x00	; 0
    1e4c:	19 f0       	breq	.+6      	; 0x1e54 <malloc+0x3c>
    1e4e:	93 83       	std	Z+3, r25	; 0x03
    1e50:	82 83       	std	Z+2, r24	; 0x02
    1e52:	04 c0       	rjmp	.+8      	; 0x1e5c <malloc+0x44>
    1e54:	90 93 b8 0b 	sts	0x0BB8, r25
    1e58:	80 93 b7 0b 	sts	0x0BB7, r24
    1e5c:	fe 01       	movw	r30, r28
    1e5e:	34 c0       	rjmp	.+104    	; 0x1ec8 <malloc+0xb0>
    1e60:	68 17       	cp	r22, r24
    1e62:	79 07       	cpc	r23, r25
    1e64:	38 f4       	brcc	.+14     	; 0x1e74 <malloc+0x5c>
    1e66:	41 15       	cp	r20, r1
    1e68:	51 05       	cpc	r21, r1
    1e6a:	19 f0       	breq	.+6      	; 0x1e72 <malloc+0x5a>
    1e6c:	84 17       	cp	r24, r20
    1e6e:	95 07       	cpc	r25, r21
    1e70:	08 f4       	brcc	.+2      	; 0x1e74 <malloc+0x5c>
    1e72:	ac 01       	movw	r20, r24
    1e74:	fe 01       	movw	r30, r28
    1e76:	8a 81       	ldd	r24, Y+2	; 0x02
    1e78:	9b 81       	ldd	r25, Y+3	; 0x03
    1e7a:	9c 01       	movw	r18, r24
    1e7c:	e9 01       	movw	r28, r18
    1e7e:	20 97       	sbiw	r28, 0x00	; 0
    1e80:	e9 f6       	brne	.-70     	; 0x1e3c <malloc+0x24>
    1e82:	41 15       	cp	r20, r1
    1e84:	51 05       	cpc	r21, r1
    1e86:	a9 f1       	breq	.+106    	; 0x1ef2 <malloc+0xda>
    1e88:	ca 01       	movw	r24, r20
    1e8a:	86 1b       	sub	r24, r22
    1e8c:	97 0b       	sbc	r25, r23
    1e8e:	04 97       	sbiw	r24, 0x04	; 4
    1e90:	08 f4       	brcc	.+2      	; 0x1e94 <malloc+0x7c>
    1e92:	ba 01       	movw	r22, r20
    1e94:	e0 e0       	ldi	r30, 0x00	; 0
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	2a c0       	rjmp	.+84     	; 0x1eee <malloc+0xd6>
    1e9a:	8d 91       	ld	r24, X+
    1e9c:	9c 91       	ld	r25, X
    1e9e:	11 97       	sbiw	r26, 0x01	; 1
    1ea0:	84 17       	cp	r24, r20
    1ea2:	95 07       	cpc	r25, r21
    1ea4:	f9 f4       	brne	.+62     	; 0x1ee4 <malloc+0xcc>
    1ea6:	64 17       	cp	r22, r20
    1ea8:	75 07       	cpc	r23, r21
    1eaa:	81 f4       	brne	.+32     	; 0x1ecc <malloc+0xb4>
    1eac:	12 96       	adiw	r26, 0x02	; 2
    1eae:	8d 91       	ld	r24, X+
    1eb0:	9c 91       	ld	r25, X
    1eb2:	13 97       	sbiw	r26, 0x03	; 3
    1eb4:	30 97       	sbiw	r30, 0x00	; 0
    1eb6:	19 f0       	breq	.+6      	; 0x1ebe <malloc+0xa6>
    1eb8:	93 83       	std	Z+3, r25	; 0x03
    1eba:	82 83       	std	Z+2, r24	; 0x02
    1ebc:	04 c0       	rjmp	.+8      	; 0x1ec6 <malloc+0xae>
    1ebe:	90 93 b8 0b 	sts	0x0BB8, r25
    1ec2:	80 93 b7 0b 	sts	0x0BB7, r24
    1ec6:	fd 01       	movw	r30, r26
    1ec8:	32 96       	adiw	r30, 0x02	; 2
    1eca:	4f c0       	rjmp	.+158    	; 0x1f6a <malloc+0x152>
    1ecc:	ca 01       	movw	r24, r20
    1ece:	86 1b       	sub	r24, r22
    1ed0:	97 0b       	sbc	r25, r23
    1ed2:	fd 01       	movw	r30, r26
    1ed4:	e8 0f       	add	r30, r24
    1ed6:	f9 1f       	adc	r31, r25
    1ed8:	61 93       	st	Z+, r22
    1eda:	71 93       	st	Z+, r23
    1edc:	02 97       	sbiw	r24, 0x02	; 2
    1ede:	8d 93       	st	X+, r24
    1ee0:	9c 93       	st	X, r25
    1ee2:	43 c0       	rjmp	.+134    	; 0x1f6a <malloc+0x152>
    1ee4:	fd 01       	movw	r30, r26
    1ee6:	82 81       	ldd	r24, Z+2	; 0x02
    1ee8:	93 81       	ldd	r25, Z+3	; 0x03
    1eea:	9c 01       	movw	r18, r24
    1eec:	d9 01       	movw	r26, r18
    1eee:	10 97       	sbiw	r26, 0x00	; 0
    1ef0:	a1 f6       	brne	.-88     	; 0x1e9a <malloc+0x82>
    1ef2:	80 91 b5 0b 	lds	r24, 0x0BB5
    1ef6:	90 91 b6 0b 	lds	r25, 0x0BB6
    1efa:	89 2b       	or	r24, r25
    1efc:	41 f4       	brne	.+16     	; 0x1f0e <malloc+0xf6>
    1efe:	80 91 0e 03 	lds	r24, 0x030E
    1f02:	90 91 0f 03 	lds	r25, 0x030F
    1f06:	90 93 b6 0b 	sts	0x0BB6, r25
    1f0a:	80 93 b5 0b 	sts	0x0BB5, r24
    1f0e:	40 91 10 03 	lds	r20, 0x0310
    1f12:	50 91 11 03 	lds	r21, 0x0311
    1f16:	41 15       	cp	r20, r1
    1f18:	51 05       	cpc	r21, r1
    1f1a:	41 f4       	brne	.+16     	; 0x1f2c <malloc+0x114>
    1f1c:	4d b7       	in	r20, 0x3d	; 61
    1f1e:	5e b7       	in	r21, 0x3e	; 62
    1f20:	80 91 0c 03 	lds	r24, 0x030C
    1f24:	90 91 0d 03 	lds	r25, 0x030D
    1f28:	48 1b       	sub	r20, r24
    1f2a:	59 0b       	sbc	r21, r25
    1f2c:	20 91 b5 0b 	lds	r18, 0x0BB5
    1f30:	30 91 b6 0b 	lds	r19, 0x0BB6
    1f34:	24 17       	cp	r18, r20
    1f36:	35 07       	cpc	r19, r21
    1f38:	b0 f4       	brcc	.+44     	; 0x1f66 <malloc+0x14e>
    1f3a:	ca 01       	movw	r24, r20
    1f3c:	82 1b       	sub	r24, r18
    1f3e:	93 0b       	sbc	r25, r19
    1f40:	86 17       	cp	r24, r22
    1f42:	97 07       	cpc	r25, r23
    1f44:	80 f0       	brcs	.+32     	; 0x1f66 <malloc+0x14e>
    1f46:	ab 01       	movw	r20, r22
    1f48:	4e 5f       	subi	r20, 0xFE	; 254
    1f4a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f4c:	84 17       	cp	r24, r20
    1f4e:	95 07       	cpc	r25, r21
    1f50:	50 f0       	brcs	.+20     	; 0x1f66 <malloc+0x14e>
    1f52:	42 0f       	add	r20, r18
    1f54:	53 1f       	adc	r21, r19
    1f56:	50 93 b6 0b 	sts	0x0BB6, r21
    1f5a:	40 93 b5 0b 	sts	0x0BB5, r20
    1f5e:	f9 01       	movw	r30, r18
    1f60:	61 93       	st	Z+, r22
    1f62:	71 93       	st	Z+, r23
    1f64:	02 c0       	rjmp	.+4      	; 0x1f6a <malloc+0x152>
    1f66:	e0 e0       	ldi	r30, 0x00	; 0
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	cf 01       	movw	r24, r30
    1f6c:	df 91       	pop	r29
    1f6e:	cf 91       	pop	r28
    1f70:	08 95       	ret

00001f72 <free>:
    1f72:	cf 93       	push	r28
    1f74:	df 93       	push	r29
    1f76:	00 97       	sbiw	r24, 0x00	; 0
    1f78:	09 f4       	brne	.+2      	; 0x1f7c <free+0xa>
    1f7a:	50 c0       	rjmp	.+160    	; 0x201c <free+0xaa>
    1f7c:	ec 01       	movw	r28, r24
    1f7e:	22 97       	sbiw	r28, 0x02	; 2
    1f80:	1b 82       	std	Y+3, r1	; 0x03
    1f82:	1a 82       	std	Y+2, r1	; 0x02
    1f84:	a0 91 b7 0b 	lds	r26, 0x0BB7
    1f88:	b0 91 b8 0b 	lds	r27, 0x0BB8
    1f8c:	10 97       	sbiw	r26, 0x00	; 0
    1f8e:	09 f1       	breq	.+66     	; 0x1fd2 <free+0x60>
    1f90:	40 e0       	ldi	r20, 0x00	; 0
    1f92:	50 e0       	ldi	r21, 0x00	; 0
    1f94:	ac 17       	cp	r26, r28
    1f96:	bd 07       	cpc	r27, r29
    1f98:	08 f1       	brcs	.+66     	; 0x1fdc <free+0x6a>
    1f9a:	bb 83       	std	Y+3, r27	; 0x03
    1f9c:	aa 83       	std	Y+2, r26	; 0x02
    1f9e:	fe 01       	movw	r30, r28
    1fa0:	21 91       	ld	r18, Z+
    1fa2:	31 91       	ld	r19, Z+
    1fa4:	e2 0f       	add	r30, r18
    1fa6:	f3 1f       	adc	r31, r19
    1fa8:	ae 17       	cp	r26, r30
    1faa:	bf 07       	cpc	r27, r31
    1fac:	79 f4       	brne	.+30     	; 0x1fcc <free+0x5a>
    1fae:	8d 91       	ld	r24, X+
    1fb0:	9c 91       	ld	r25, X
    1fb2:	11 97       	sbiw	r26, 0x01	; 1
    1fb4:	28 0f       	add	r18, r24
    1fb6:	39 1f       	adc	r19, r25
    1fb8:	2e 5f       	subi	r18, 0xFE	; 254
    1fba:	3f 4f       	sbci	r19, 0xFF	; 255
    1fbc:	39 83       	std	Y+1, r19	; 0x01
    1fbe:	28 83       	st	Y, r18
    1fc0:	12 96       	adiw	r26, 0x02	; 2
    1fc2:	8d 91       	ld	r24, X+
    1fc4:	9c 91       	ld	r25, X
    1fc6:	13 97       	sbiw	r26, 0x03	; 3
    1fc8:	9b 83       	std	Y+3, r25	; 0x03
    1fca:	8a 83       	std	Y+2, r24	; 0x02
    1fcc:	41 15       	cp	r20, r1
    1fce:	51 05       	cpc	r21, r1
    1fd0:	71 f4       	brne	.+28     	; 0x1fee <free+0x7c>
    1fd2:	d0 93 b8 0b 	sts	0x0BB8, r29
    1fd6:	c0 93 b7 0b 	sts	0x0BB7, r28
    1fda:	20 c0       	rjmp	.+64     	; 0x201c <free+0xaa>
    1fdc:	12 96       	adiw	r26, 0x02	; 2
    1fde:	8d 91       	ld	r24, X+
    1fe0:	9c 91       	ld	r25, X
    1fe2:	13 97       	sbiw	r26, 0x03	; 3
    1fe4:	ad 01       	movw	r20, r26
    1fe6:	00 97       	sbiw	r24, 0x00	; 0
    1fe8:	11 f0       	breq	.+4      	; 0x1fee <free+0x7c>
    1fea:	dc 01       	movw	r26, r24
    1fec:	d3 cf       	rjmp	.-90     	; 0x1f94 <free+0x22>
    1fee:	fa 01       	movw	r30, r20
    1ff0:	d3 83       	std	Z+3, r29	; 0x03
    1ff2:	c2 83       	std	Z+2, r28	; 0x02
    1ff4:	21 91       	ld	r18, Z+
    1ff6:	31 91       	ld	r19, Z+
    1ff8:	e2 0f       	add	r30, r18
    1ffa:	f3 1f       	adc	r31, r19
    1ffc:	ce 17       	cp	r28, r30
    1ffe:	df 07       	cpc	r29, r31
    2000:	69 f4       	brne	.+26     	; 0x201c <free+0xaa>
    2002:	88 81       	ld	r24, Y
    2004:	99 81       	ldd	r25, Y+1	; 0x01
    2006:	28 0f       	add	r18, r24
    2008:	39 1f       	adc	r19, r25
    200a:	2e 5f       	subi	r18, 0xFE	; 254
    200c:	3f 4f       	sbci	r19, 0xFF	; 255
    200e:	fa 01       	movw	r30, r20
    2010:	31 83       	std	Z+1, r19	; 0x01
    2012:	20 83       	st	Z, r18
    2014:	8a 81       	ldd	r24, Y+2	; 0x02
    2016:	9b 81       	ldd	r25, Y+3	; 0x03
    2018:	93 83       	std	Z+3, r25	; 0x03
    201a:	82 83       	std	Z+2, r24	; 0x02
    201c:	df 91       	pop	r29
    201e:	cf 91       	pop	r28
    2020:	08 95       	ret

00002022 <atof>:
    2022:	66 27       	eor	r22, r22
    2024:	77 27       	eor	r23, r23
    2026:	0c 94 15 14 	jmp	0x282a	; 0x282a <strtod>

0000202a <strncasecmp>:
    202a:	fb 01       	movw	r30, r22
    202c:	dc 01       	movw	r26, r24
    202e:	41 50       	subi	r20, 0x01	; 1
    2030:	50 40       	sbci	r21, 0x00	; 0
    2032:	88 f0       	brcs	.+34     	; 0x2056 <strncasecmp+0x2c>
    2034:	8d 91       	ld	r24, X+
    2036:	81 34       	cpi	r24, 0x41	; 65
    2038:	1c f0       	brlt	.+6      	; 0x2040 <strncasecmp+0x16>
    203a:	8b 35       	cpi	r24, 0x5B	; 91
    203c:	0c f4       	brge	.+2      	; 0x2040 <strncasecmp+0x16>
    203e:	80 5e       	subi	r24, 0xE0	; 224
    2040:	61 91       	ld	r22, Z+
    2042:	61 34       	cpi	r22, 0x41	; 65
    2044:	1c f0       	brlt	.+6      	; 0x204c <strncasecmp+0x22>
    2046:	6b 35       	cpi	r22, 0x5B	; 91
    2048:	0c f4       	brge	.+2      	; 0x204c <strncasecmp+0x22>
    204a:	60 5e       	subi	r22, 0xE0	; 224
    204c:	86 1b       	sub	r24, r22
    204e:	61 11       	cpse	r22, r1
    2050:	71 f3       	breq	.-36     	; 0x202e <strncasecmp+0x4>
    2052:	99 0b       	sbc	r25, r25
    2054:	08 95       	ret
    2056:	88 1b       	sub	r24, r24
    2058:	fc cf       	rjmp	.-8      	; 0x2052 <strncasecmp+0x28>

0000205a <strncmp>:
    205a:	fb 01       	movw	r30, r22
    205c:	dc 01       	movw	r26, r24
    205e:	41 50       	subi	r20, 0x01	; 1
    2060:	50 40       	sbci	r21, 0x00	; 0
    2062:	30 f0       	brcs	.+12     	; 0x2070 <strncmp+0x16>
    2064:	8d 91       	ld	r24, X+
    2066:	01 90       	ld	r0, Z+
    2068:	80 19       	sub	r24, r0
    206a:	19 f4       	brne	.+6      	; 0x2072 <strncmp+0x18>
    206c:	00 20       	and	r0, r0
    206e:	b9 f7       	brne	.-18     	; 0x205e <strncmp+0x4>
    2070:	88 1b       	sub	r24, r24
    2072:	99 0b       	sbc	r25, r25
    2074:	08 95       	ret

00002076 <itoa>:
    2076:	fb 01       	movw	r30, r22
    2078:	9f 01       	movw	r18, r30
    207a:	e8 94       	clt
    207c:	42 30       	cpi	r20, 0x02	; 2
    207e:	c4 f0       	brlt	.+48     	; 0x20b0 <itoa+0x3a>
    2080:	45 32       	cpi	r20, 0x25	; 37
    2082:	b4 f4       	brge	.+44     	; 0x20b0 <itoa+0x3a>
    2084:	4a 30       	cpi	r20, 0x0A	; 10
    2086:	29 f4       	brne	.+10     	; 0x2092 <itoa+0x1c>
    2088:	97 fb       	bst	r25, 7
    208a:	1e f4       	brtc	.+6      	; 0x2092 <itoa+0x1c>
    208c:	90 95       	com	r25
    208e:	81 95       	neg	r24
    2090:	9f 4f       	sbci	r25, 0xFF	; 255
    2092:	64 2f       	mov	r22, r20
    2094:	77 27       	eor	r23, r23
    2096:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <__udivmodhi4>
    209a:	80 5d       	subi	r24, 0xD0	; 208
    209c:	8a 33       	cpi	r24, 0x3A	; 58
    209e:	0c f0       	brlt	.+2      	; 0x20a2 <itoa+0x2c>
    20a0:	89 5d       	subi	r24, 0xD9	; 217
    20a2:	81 93       	st	Z+, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	00 97       	sbiw	r24, 0x00	; 0
    20a8:	a1 f7       	brne	.-24     	; 0x2092 <itoa+0x1c>
    20aa:	16 f4       	brtc	.+4      	; 0x20b0 <itoa+0x3a>
    20ac:	5d e2       	ldi	r21, 0x2D	; 45
    20ae:	51 93       	st	Z+, r21
    20b0:	10 82       	st	Z, r1
    20b2:	c9 01       	movw	r24, r18
    20b4:	0c 94 91 16 	jmp	0x2d22	; 0x2d22 <strrev>

000020b8 <sprintf>:
    20b8:	0f 93       	push	r16
    20ba:	1f 93       	push	r17
    20bc:	df 93       	push	r29
    20be:	cf 93       	push	r28
    20c0:	cd b7       	in	r28, 0x3d	; 61
    20c2:	de b7       	in	r29, 0x3e	; 62
    20c4:	2e 97       	sbiw	r28, 0x0e	; 14
    20c6:	0f b6       	in	r0, 0x3f	; 63
    20c8:	f8 94       	cli
    20ca:	de bf       	out	0x3e, r29	; 62
    20cc:	0f be       	out	0x3f, r0	; 63
    20ce:	cd bf       	out	0x3d, r28	; 61
    20d0:	0d 89       	ldd	r16, Y+21	; 0x15
    20d2:	1e 89       	ldd	r17, Y+22	; 0x16
    20d4:	86 e0       	ldi	r24, 0x06	; 6
    20d6:	8c 83       	std	Y+4, r24	; 0x04
    20d8:	1a 83       	std	Y+2, r17	; 0x02
    20da:	09 83       	std	Y+1, r16	; 0x01
    20dc:	8f ef       	ldi	r24, 0xFF	; 255
    20de:	9f e7       	ldi	r25, 0x7F	; 127
    20e0:	9e 83       	std	Y+6, r25	; 0x06
    20e2:	8d 83       	std	Y+5, r24	; 0x05
    20e4:	9e 01       	movw	r18, r28
    20e6:	27 5e       	subi	r18, 0xE7	; 231
    20e8:	3f 4f       	sbci	r19, 0xFF	; 255
    20ea:	ce 01       	movw	r24, r28
    20ec:	01 96       	adiw	r24, 0x01	; 1
    20ee:	6f 89       	ldd	r22, Y+23	; 0x17
    20f0:	78 8d       	ldd	r23, Y+24	; 0x18
    20f2:	a9 01       	movw	r20, r18
    20f4:	0e 94 8d 10 	call	0x211a	; 0x211a <vfprintf>
    20f8:	2f 81       	ldd	r18, Y+7	; 0x07
    20fa:	38 85       	ldd	r19, Y+8	; 0x08
    20fc:	02 0f       	add	r16, r18
    20fe:	13 1f       	adc	r17, r19
    2100:	f8 01       	movw	r30, r16
    2102:	10 82       	st	Z, r1
    2104:	2e 96       	adiw	r28, 0x0e	; 14
    2106:	0f b6       	in	r0, 0x3f	; 63
    2108:	f8 94       	cli
    210a:	de bf       	out	0x3e, r29	; 62
    210c:	0f be       	out	0x3f, r0	; 63
    210e:	cd bf       	out	0x3d, r28	; 61
    2110:	cf 91       	pop	r28
    2112:	df 91       	pop	r29
    2114:	1f 91       	pop	r17
    2116:	0f 91       	pop	r16
    2118:	08 95       	ret

0000211a <vfprintf>:
    211a:	2f 92       	push	r2
    211c:	3f 92       	push	r3
    211e:	4f 92       	push	r4
    2120:	5f 92       	push	r5
    2122:	6f 92       	push	r6
    2124:	7f 92       	push	r7
    2126:	8f 92       	push	r8
    2128:	9f 92       	push	r9
    212a:	af 92       	push	r10
    212c:	bf 92       	push	r11
    212e:	cf 92       	push	r12
    2130:	df 92       	push	r13
    2132:	ef 92       	push	r14
    2134:	ff 92       	push	r15
    2136:	0f 93       	push	r16
    2138:	1f 93       	push	r17
    213a:	df 93       	push	r29
    213c:	cf 93       	push	r28
    213e:	cd b7       	in	r28, 0x3d	; 61
    2140:	de b7       	in	r29, 0x3e	; 62
    2142:	2b 97       	sbiw	r28, 0x0b	; 11
    2144:	0f b6       	in	r0, 0x3f	; 63
    2146:	f8 94       	cli
    2148:	de bf       	out	0x3e, r29	; 62
    214a:	0f be       	out	0x3f, r0	; 63
    214c:	cd bf       	out	0x3d, r28	; 61
    214e:	3c 01       	movw	r6, r24
    2150:	2b 01       	movw	r4, r22
    2152:	5a 01       	movw	r10, r20
    2154:	fc 01       	movw	r30, r24
    2156:	17 82       	std	Z+7, r1	; 0x07
    2158:	16 82       	std	Z+6, r1	; 0x06
    215a:	83 81       	ldd	r24, Z+3	; 0x03
    215c:	81 fd       	sbrc	r24, 1
    215e:	03 c0       	rjmp	.+6      	; 0x2166 <vfprintf+0x4c>
    2160:	6f ef       	ldi	r22, 0xFF	; 255
    2162:	7f ef       	ldi	r23, 0xFF	; 255
    2164:	c6 c1       	rjmp	.+908    	; 0x24f2 <vfprintf+0x3d8>
    2166:	9a e0       	ldi	r25, 0x0A	; 10
    2168:	89 2e       	mov	r8, r25
    216a:	1e 01       	movw	r2, r28
    216c:	08 94       	sec
    216e:	21 1c       	adc	r2, r1
    2170:	31 1c       	adc	r3, r1
    2172:	f3 01       	movw	r30, r6
    2174:	23 81       	ldd	r18, Z+3	; 0x03
    2176:	f2 01       	movw	r30, r4
    2178:	23 fd       	sbrc	r18, 3
    217a:	85 91       	lpm	r24, Z+
    217c:	23 ff       	sbrs	r18, 3
    217e:	81 91       	ld	r24, Z+
    2180:	2f 01       	movw	r4, r30
    2182:	88 23       	and	r24, r24
    2184:	09 f4       	brne	.+2      	; 0x2188 <vfprintf+0x6e>
    2186:	b2 c1       	rjmp	.+868    	; 0x24ec <vfprintf+0x3d2>
    2188:	85 32       	cpi	r24, 0x25	; 37
    218a:	39 f4       	brne	.+14     	; 0x219a <vfprintf+0x80>
    218c:	23 fd       	sbrc	r18, 3
    218e:	85 91       	lpm	r24, Z+
    2190:	23 ff       	sbrs	r18, 3
    2192:	81 91       	ld	r24, Z+
    2194:	2f 01       	movw	r4, r30
    2196:	85 32       	cpi	r24, 0x25	; 37
    2198:	29 f4       	brne	.+10     	; 0x21a4 <vfprintf+0x8a>
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	b3 01       	movw	r22, r6
    219e:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <fputc>
    21a2:	e7 cf       	rjmp	.-50     	; 0x2172 <vfprintf+0x58>
    21a4:	98 2f       	mov	r25, r24
    21a6:	ff 24       	eor	r15, r15
    21a8:	ee 24       	eor	r14, r14
    21aa:	99 24       	eor	r9, r9
    21ac:	ff e1       	ldi	r31, 0x1F	; 31
    21ae:	ff 15       	cp	r31, r15
    21b0:	d0 f0       	brcs	.+52     	; 0x21e6 <vfprintf+0xcc>
    21b2:	9b 32       	cpi	r25, 0x2B	; 43
    21b4:	69 f0       	breq	.+26     	; 0x21d0 <vfprintf+0xb6>
    21b6:	9c 32       	cpi	r25, 0x2C	; 44
    21b8:	28 f4       	brcc	.+10     	; 0x21c4 <vfprintf+0xaa>
    21ba:	90 32       	cpi	r25, 0x20	; 32
    21bc:	59 f0       	breq	.+22     	; 0x21d4 <vfprintf+0xba>
    21be:	93 32       	cpi	r25, 0x23	; 35
    21c0:	91 f4       	brne	.+36     	; 0x21e6 <vfprintf+0xcc>
    21c2:	0e c0       	rjmp	.+28     	; 0x21e0 <vfprintf+0xc6>
    21c4:	9d 32       	cpi	r25, 0x2D	; 45
    21c6:	49 f0       	breq	.+18     	; 0x21da <vfprintf+0xc0>
    21c8:	90 33       	cpi	r25, 0x30	; 48
    21ca:	69 f4       	brne	.+26     	; 0x21e6 <vfprintf+0xcc>
    21cc:	41 e0       	ldi	r20, 0x01	; 1
    21ce:	24 c0       	rjmp	.+72     	; 0x2218 <vfprintf+0xfe>
    21d0:	52 e0       	ldi	r21, 0x02	; 2
    21d2:	f5 2a       	or	r15, r21
    21d4:	84 e0       	ldi	r24, 0x04	; 4
    21d6:	f8 2a       	or	r15, r24
    21d8:	28 c0       	rjmp	.+80     	; 0x222a <vfprintf+0x110>
    21da:	98 e0       	ldi	r25, 0x08	; 8
    21dc:	f9 2a       	or	r15, r25
    21de:	25 c0       	rjmp	.+74     	; 0x222a <vfprintf+0x110>
    21e0:	e0 e1       	ldi	r30, 0x10	; 16
    21e2:	fe 2a       	or	r15, r30
    21e4:	22 c0       	rjmp	.+68     	; 0x222a <vfprintf+0x110>
    21e6:	f7 fc       	sbrc	r15, 7
    21e8:	29 c0       	rjmp	.+82     	; 0x223c <vfprintf+0x122>
    21ea:	89 2f       	mov	r24, r25
    21ec:	80 53       	subi	r24, 0x30	; 48
    21ee:	8a 30       	cpi	r24, 0x0A	; 10
    21f0:	70 f4       	brcc	.+28     	; 0x220e <vfprintf+0xf4>
    21f2:	f6 fe       	sbrs	r15, 6
    21f4:	05 c0       	rjmp	.+10     	; 0x2200 <vfprintf+0xe6>
    21f6:	98 9c       	mul	r9, r8
    21f8:	90 2c       	mov	r9, r0
    21fa:	11 24       	eor	r1, r1
    21fc:	98 0e       	add	r9, r24
    21fe:	15 c0       	rjmp	.+42     	; 0x222a <vfprintf+0x110>
    2200:	e8 9c       	mul	r14, r8
    2202:	e0 2c       	mov	r14, r0
    2204:	11 24       	eor	r1, r1
    2206:	e8 0e       	add	r14, r24
    2208:	f0 e2       	ldi	r31, 0x20	; 32
    220a:	ff 2a       	or	r15, r31
    220c:	0e c0       	rjmp	.+28     	; 0x222a <vfprintf+0x110>
    220e:	9e 32       	cpi	r25, 0x2E	; 46
    2210:	29 f4       	brne	.+10     	; 0x221c <vfprintf+0x102>
    2212:	f6 fc       	sbrc	r15, 6
    2214:	6b c1       	rjmp	.+726    	; 0x24ec <vfprintf+0x3d2>
    2216:	40 e4       	ldi	r20, 0x40	; 64
    2218:	f4 2a       	or	r15, r20
    221a:	07 c0       	rjmp	.+14     	; 0x222a <vfprintf+0x110>
    221c:	9c 36       	cpi	r25, 0x6C	; 108
    221e:	19 f4       	brne	.+6      	; 0x2226 <vfprintf+0x10c>
    2220:	50 e8       	ldi	r21, 0x80	; 128
    2222:	f5 2a       	or	r15, r21
    2224:	02 c0       	rjmp	.+4      	; 0x222a <vfprintf+0x110>
    2226:	98 36       	cpi	r25, 0x68	; 104
    2228:	49 f4       	brne	.+18     	; 0x223c <vfprintf+0x122>
    222a:	f2 01       	movw	r30, r4
    222c:	23 fd       	sbrc	r18, 3
    222e:	95 91       	lpm	r25, Z+
    2230:	23 ff       	sbrs	r18, 3
    2232:	91 91       	ld	r25, Z+
    2234:	2f 01       	movw	r4, r30
    2236:	99 23       	and	r25, r25
    2238:	09 f0       	breq	.+2      	; 0x223c <vfprintf+0x122>
    223a:	b8 cf       	rjmp	.-144    	; 0x21ac <vfprintf+0x92>
    223c:	89 2f       	mov	r24, r25
    223e:	85 54       	subi	r24, 0x45	; 69
    2240:	83 30       	cpi	r24, 0x03	; 3
    2242:	18 f0       	brcs	.+6      	; 0x224a <vfprintf+0x130>
    2244:	80 52       	subi	r24, 0x20	; 32
    2246:	83 30       	cpi	r24, 0x03	; 3
    2248:	38 f4       	brcc	.+14     	; 0x2258 <vfprintf+0x13e>
    224a:	44 e0       	ldi	r20, 0x04	; 4
    224c:	50 e0       	ldi	r21, 0x00	; 0
    224e:	a4 0e       	add	r10, r20
    2250:	b5 1e       	adc	r11, r21
    2252:	5f e3       	ldi	r21, 0x3F	; 63
    2254:	59 83       	std	Y+1, r21	; 0x01
    2256:	0f c0       	rjmp	.+30     	; 0x2276 <vfprintf+0x15c>
    2258:	93 36       	cpi	r25, 0x63	; 99
    225a:	31 f0       	breq	.+12     	; 0x2268 <vfprintf+0x14e>
    225c:	93 37       	cpi	r25, 0x73	; 115
    225e:	79 f0       	breq	.+30     	; 0x227e <vfprintf+0x164>
    2260:	93 35       	cpi	r25, 0x53	; 83
    2262:	09 f0       	breq	.+2      	; 0x2266 <vfprintf+0x14c>
    2264:	56 c0       	rjmp	.+172    	; 0x2312 <vfprintf+0x1f8>
    2266:	20 c0       	rjmp	.+64     	; 0x22a8 <vfprintf+0x18e>
    2268:	f5 01       	movw	r30, r10
    226a:	80 81       	ld	r24, Z
    226c:	89 83       	std	Y+1, r24	; 0x01
    226e:	42 e0       	ldi	r20, 0x02	; 2
    2270:	50 e0       	ldi	r21, 0x00	; 0
    2272:	a4 0e       	add	r10, r20
    2274:	b5 1e       	adc	r11, r21
    2276:	61 01       	movw	r12, r2
    2278:	01 e0       	ldi	r16, 0x01	; 1
    227a:	10 e0       	ldi	r17, 0x00	; 0
    227c:	12 c0       	rjmp	.+36     	; 0x22a2 <vfprintf+0x188>
    227e:	f5 01       	movw	r30, r10
    2280:	c0 80       	ld	r12, Z
    2282:	d1 80       	ldd	r13, Z+1	; 0x01
    2284:	f6 fc       	sbrc	r15, 6
    2286:	03 c0       	rjmp	.+6      	; 0x228e <vfprintf+0x174>
    2288:	6f ef       	ldi	r22, 0xFF	; 255
    228a:	7f ef       	ldi	r23, 0xFF	; 255
    228c:	02 c0       	rjmp	.+4      	; 0x2292 <vfprintf+0x178>
    228e:	69 2d       	mov	r22, r9
    2290:	70 e0       	ldi	r23, 0x00	; 0
    2292:	42 e0       	ldi	r20, 0x02	; 2
    2294:	50 e0       	ldi	r21, 0x00	; 0
    2296:	a4 0e       	add	r10, r20
    2298:	b5 1e       	adc	r11, r21
    229a:	c6 01       	movw	r24, r12
    229c:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <strnlen>
    22a0:	8c 01       	movw	r16, r24
    22a2:	5f e7       	ldi	r21, 0x7F	; 127
    22a4:	f5 22       	and	r15, r21
    22a6:	14 c0       	rjmp	.+40     	; 0x22d0 <vfprintf+0x1b6>
    22a8:	f5 01       	movw	r30, r10
    22aa:	c0 80       	ld	r12, Z
    22ac:	d1 80       	ldd	r13, Z+1	; 0x01
    22ae:	f6 fc       	sbrc	r15, 6
    22b0:	03 c0       	rjmp	.+6      	; 0x22b8 <vfprintf+0x19e>
    22b2:	6f ef       	ldi	r22, 0xFF	; 255
    22b4:	7f ef       	ldi	r23, 0xFF	; 255
    22b6:	02 c0       	rjmp	.+4      	; 0x22bc <vfprintf+0x1a2>
    22b8:	69 2d       	mov	r22, r9
    22ba:	70 e0       	ldi	r23, 0x00	; 0
    22bc:	42 e0       	ldi	r20, 0x02	; 2
    22be:	50 e0       	ldi	r21, 0x00	; 0
    22c0:	a4 0e       	add	r10, r20
    22c2:	b5 1e       	adc	r11, r21
    22c4:	c6 01       	movw	r24, r12
    22c6:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <strnlen_P>
    22ca:	8c 01       	movw	r16, r24
    22cc:	50 e8       	ldi	r21, 0x80	; 128
    22ce:	f5 2a       	or	r15, r21
    22d0:	f3 fe       	sbrs	r15, 3
    22d2:	07 c0       	rjmp	.+14     	; 0x22e2 <vfprintf+0x1c8>
    22d4:	1a c0       	rjmp	.+52     	; 0x230a <vfprintf+0x1f0>
    22d6:	80 e2       	ldi	r24, 0x20	; 32
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	b3 01       	movw	r22, r6
    22dc:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <fputc>
    22e0:	ea 94       	dec	r14
    22e2:	8e 2d       	mov	r24, r14
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	08 17       	cp	r16, r24
    22e8:	19 07       	cpc	r17, r25
    22ea:	a8 f3       	brcs	.-22     	; 0x22d6 <vfprintf+0x1bc>
    22ec:	0e c0       	rjmp	.+28     	; 0x230a <vfprintf+0x1f0>
    22ee:	f6 01       	movw	r30, r12
    22f0:	f7 fc       	sbrc	r15, 7
    22f2:	85 91       	lpm	r24, Z+
    22f4:	f7 fe       	sbrs	r15, 7
    22f6:	81 91       	ld	r24, Z+
    22f8:	6f 01       	movw	r12, r30
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	b3 01       	movw	r22, r6
    22fe:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <fputc>
    2302:	e1 10       	cpse	r14, r1
    2304:	ea 94       	dec	r14
    2306:	01 50       	subi	r16, 0x01	; 1
    2308:	10 40       	sbci	r17, 0x00	; 0
    230a:	01 15       	cp	r16, r1
    230c:	11 05       	cpc	r17, r1
    230e:	79 f7       	brne	.-34     	; 0x22ee <vfprintf+0x1d4>
    2310:	ea c0       	rjmp	.+468    	; 0x24e6 <vfprintf+0x3cc>
    2312:	94 36       	cpi	r25, 0x64	; 100
    2314:	11 f0       	breq	.+4      	; 0x231a <vfprintf+0x200>
    2316:	99 36       	cpi	r25, 0x69	; 105
    2318:	69 f5       	brne	.+90     	; 0x2374 <vfprintf+0x25a>
    231a:	f7 fe       	sbrs	r15, 7
    231c:	08 c0       	rjmp	.+16     	; 0x232e <vfprintf+0x214>
    231e:	f5 01       	movw	r30, r10
    2320:	20 81       	ld	r18, Z
    2322:	31 81       	ldd	r19, Z+1	; 0x01
    2324:	42 81       	ldd	r20, Z+2	; 0x02
    2326:	53 81       	ldd	r21, Z+3	; 0x03
    2328:	84 e0       	ldi	r24, 0x04	; 4
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	0a c0       	rjmp	.+20     	; 0x2342 <vfprintf+0x228>
    232e:	f5 01       	movw	r30, r10
    2330:	80 81       	ld	r24, Z
    2332:	91 81       	ldd	r25, Z+1	; 0x01
    2334:	9c 01       	movw	r18, r24
    2336:	44 27       	eor	r20, r20
    2338:	37 fd       	sbrc	r19, 7
    233a:	40 95       	com	r20
    233c:	54 2f       	mov	r21, r20
    233e:	82 e0       	ldi	r24, 0x02	; 2
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	a8 0e       	add	r10, r24
    2344:	b9 1e       	adc	r11, r25
    2346:	9f e6       	ldi	r25, 0x6F	; 111
    2348:	f9 22       	and	r15, r25
    234a:	57 ff       	sbrs	r21, 7
    234c:	09 c0       	rjmp	.+18     	; 0x2360 <vfprintf+0x246>
    234e:	50 95       	com	r21
    2350:	40 95       	com	r20
    2352:	30 95       	com	r19
    2354:	21 95       	neg	r18
    2356:	3f 4f       	sbci	r19, 0xFF	; 255
    2358:	4f 4f       	sbci	r20, 0xFF	; 255
    235a:	5f 4f       	sbci	r21, 0xFF	; 255
    235c:	e0 e8       	ldi	r30, 0x80	; 128
    235e:	fe 2a       	or	r15, r30
    2360:	ca 01       	movw	r24, r20
    2362:	b9 01       	movw	r22, r18
    2364:	a1 01       	movw	r20, r2
    2366:	2a e0       	ldi	r18, 0x0A	; 10
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <__ultoa_invert>
    236e:	d8 2e       	mov	r13, r24
    2370:	d2 18       	sub	r13, r2
    2372:	40 c0       	rjmp	.+128    	; 0x23f4 <vfprintf+0x2da>
    2374:	95 37       	cpi	r25, 0x75	; 117
    2376:	29 f4       	brne	.+10     	; 0x2382 <vfprintf+0x268>
    2378:	1f 2d       	mov	r17, r15
    237a:	1f 7e       	andi	r17, 0xEF	; 239
    237c:	2a e0       	ldi	r18, 0x0A	; 10
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	1d c0       	rjmp	.+58     	; 0x23bc <vfprintf+0x2a2>
    2382:	1f 2d       	mov	r17, r15
    2384:	19 7f       	andi	r17, 0xF9	; 249
    2386:	9f 36       	cpi	r25, 0x6F	; 111
    2388:	61 f0       	breq	.+24     	; 0x23a2 <vfprintf+0x288>
    238a:	90 37       	cpi	r25, 0x70	; 112
    238c:	20 f4       	brcc	.+8      	; 0x2396 <vfprintf+0x27c>
    238e:	98 35       	cpi	r25, 0x58	; 88
    2390:	09 f0       	breq	.+2      	; 0x2394 <vfprintf+0x27a>
    2392:	ac c0       	rjmp	.+344    	; 0x24ec <vfprintf+0x3d2>
    2394:	0f c0       	rjmp	.+30     	; 0x23b4 <vfprintf+0x29a>
    2396:	90 37       	cpi	r25, 0x70	; 112
    2398:	39 f0       	breq	.+14     	; 0x23a8 <vfprintf+0x28e>
    239a:	98 37       	cpi	r25, 0x78	; 120
    239c:	09 f0       	breq	.+2      	; 0x23a0 <vfprintf+0x286>
    239e:	a6 c0       	rjmp	.+332    	; 0x24ec <vfprintf+0x3d2>
    23a0:	04 c0       	rjmp	.+8      	; 0x23aa <vfprintf+0x290>
    23a2:	28 e0       	ldi	r18, 0x08	; 8
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	0a c0       	rjmp	.+20     	; 0x23bc <vfprintf+0x2a2>
    23a8:	10 61       	ori	r17, 0x10	; 16
    23aa:	14 fd       	sbrc	r17, 4
    23ac:	14 60       	ori	r17, 0x04	; 4
    23ae:	20 e1       	ldi	r18, 0x10	; 16
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	04 c0       	rjmp	.+8      	; 0x23bc <vfprintf+0x2a2>
    23b4:	14 fd       	sbrc	r17, 4
    23b6:	16 60       	ori	r17, 0x06	; 6
    23b8:	20 e1       	ldi	r18, 0x10	; 16
    23ba:	32 e0       	ldi	r19, 0x02	; 2
    23bc:	17 ff       	sbrs	r17, 7
    23be:	08 c0       	rjmp	.+16     	; 0x23d0 <vfprintf+0x2b6>
    23c0:	f5 01       	movw	r30, r10
    23c2:	60 81       	ld	r22, Z
    23c4:	71 81       	ldd	r23, Z+1	; 0x01
    23c6:	82 81       	ldd	r24, Z+2	; 0x02
    23c8:	93 81       	ldd	r25, Z+3	; 0x03
    23ca:	44 e0       	ldi	r20, 0x04	; 4
    23cc:	50 e0       	ldi	r21, 0x00	; 0
    23ce:	08 c0       	rjmp	.+16     	; 0x23e0 <vfprintf+0x2c6>
    23d0:	f5 01       	movw	r30, r10
    23d2:	80 81       	ld	r24, Z
    23d4:	91 81       	ldd	r25, Z+1	; 0x01
    23d6:	bc 01       	movw	r22, r24
    23d8:	80 e0       	ldi	r24, 0x00	; 0
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	42 e0       	ldi	r20, 0x02	; 2
    23de:	50 e0       	ldi	r21, 0x00	; 0
    23e0:	a4 0e       	add	r10, r20
    23e2:	b5 1e       	adc	r11, r21
    23e4:	a1 01       	movw	r20, r2
    23e6:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <__ultoa_invert>
    23ea:	d8 2e       	mov	r13, r24
    23ec:	d2 18       	sub	r13, r2
    23ee:	8f e7       	ldi	r24, 0x7F	; 127
    23f0:	f8 2e       	mov	r15, r24
    23f2:	f1 22       	and	r15, r17
    23f4:	f6 fe       	sbrs	r15, 6
    23f6:	0b c0       	rjmp	.+22     	; 0x240e <vfprintf+0x2f4>
    23f8:	5e ef       	ldi	r21, 0xFE	; 254
    23fa:	f5 22       	and	r15, r21
    23fc:	d9 14       	cp	r13, r9
    23fe:	38 f4       	brcc	.+14     	; 0x240e <vfprintf+0x2f4>
    2400:	f4 fe       	sbrs	r15, 4
    2402:	07 c0       	rjmp	.+14     	; 0x2412 <vfprintf+0x2f8>
    2404:	f2 fc       	sbrc	r15, 2
    2406:	05 c0       	rjmp	.+10     	; 0x2412 <vfprintf+0x2f8>
    2408:	8f ee       	ldi	r24, 0xEF	; 239
    240a:	f8 22       	and	r15, r24
    240c:	02 c0       	rjmp	.+4      	; 0x2412 <vfprintf+0x2f8>
    240e:	1d 2d       	mov	r17, r13
    2410:	01 c0       	rjmp	.+2      	; 0x2414 <vfprintf+0x2fa>
    2412:	19 2d       	mov	r17, r9
    2414:	f4 fe       	sbrs	r15, 4
    2416:	0d c0       	rjmp	.+26     	; 0x2432 <vfprintf+0x318>
    2418:	fe 01       	movw	r30, r28
    241a:	ed 0d       	add	r30, r13
    241c:	f1 1d       	adc	r31, r1
    241e:	80 81       	ld	r24, Z
    2420:	80 33       	cpi	r24, 0x30	; 48
    2422:	19 f4       	brne	.+6      	; 0x242a <vfprintf+0x310>
    2424:	99 ee       	ldi	r25, 0xE9	; 233
    2426:	f9 22       	and	r15, r25
    2428:	08 c0       	rjmp	.+16     	; 0x243a <vfprintf+0x320>
    242a:	1f 5f       	subi	r17, 0xFF	; 255
    242c:	f2 fe       	sbrs	r15, 2
    242e:	05 c0       	rjmp	.+10     	; 0x243a <vfprintf+0x320>
    2430:	03 c0       	rjmp	.+6      	; 0x2438 <vfprintf+0x31e>
    2432:	8f 2d       	mov	r24, r15
    2434:	86 78       	andi	r24, 0x86	; 134
    2436:	09 f0       	breq	.+2      	; 0x243a <vfprintf+0x320>
    2438:	1f 5f       	subi	r17, 0xFF	; 255
    243a:	0f 2d       	mov	r16, r15
    243c:	f3 fc       	sbrc	r15, 3
    243e:	14 c0       	rjmp	.+40     	; 0x2468 <vfprintf+0x34e>
    2440:	f0 fe       	sbrs	r15, 0
    2442:	0f c0       	rjmp	.+30     	; 0x2462 <vfprintf+0x348>
    2444:	1e 15       	cp	r17, r14
    2446:	10 f0       	brcs	.+4      	; 0x244c <vfprintf+0x332>
    2448:	9d 2c       	mov	r9, r13
    244a:	0b c0       	rjmp	.+22     	; 0x2462 <vfprintf+0x348>
    244c:	9d 2c       	mov	r9, r13
    244e:	9e 0c       	add	r9, r14
    2450:	91 1a       	sub	r9, r17
    2452:	1e 2d       	mov	r17, r14
    2454:	06 c0       	rjmp	.+12     	; 0x2462 <vfprintf+0x348>
    2456:	80 e2       	ldi	r24, 0x20	; 32
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	b3 01       	movw	r22, r6
    245c:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <fputc>
    2460:	1f 5f       	subi	r17, 0xFF	; 255
    2462:	1e 15       	cp	r17, r14
    2464:	c0 f3       	brcs	.-16     	; 0x2456 <vfprintf+0x33c>
    2466:	04 c0       	rjmp	.+8      	; 0x2470 <vfprintf+0x356>
    2468:	1e 15       	cp	r17, r14
    246a:	10 f4       	brcc	.+4      	; 0x2470 <vfprintf+0x356>
    246c:	e1 1a       	sub	r14, r17
    246e:	01 c0       	rjmp	.+2      	; 0x2472 <vfprintf+0x358>
    2470:	ee 24       	eor	r14, r14
    2472:	04 ff       	sbrs	r16, 4
    2474:	0f c0       	rjmp	.+30     	; 0x2494 <vfprintf+0x37a>
    2476:	80 e3       	ldi	r24, 0x30	; 48
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	b3 01       	movw	r22, r6
    247c:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <fputc>
    2480:	02 ff       	sbrs	r16, 2
    2482:	1d c0       	rjmp	.+58     	; 0x24be <vfprintf+0x3a4>
    2484:	01 fd       	sbrc	r16, 1
    2486:	03 c0       	rjmp	.+6      	; 0x248e <vfprintf+0x374>
    2488:	88 e7       	ldi	r24, 0x78	; 120
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	0e c0       	rjmp	.+28     	; 0x24aa <vfprintf+0x390>
    248e:	88 e5       	ldi	r24, 0x58	; 88
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	0b c0       	rjmp	.+22     	; 0x24aa <vfprintf+0x390>
    2494:	80 2f       	mov	r24, r16
    2496:	86 78       	andi	r24, 0x86	; 134
    2498:	91 f0       	breq	.+36     	; 0x24be <vfprintf+0x3a4>
    249a:	01 ff       	sbrs	r16, 1
    249c:	02 c0       	rjmp	.+4      	; 0x24a2 <vfprintf+0x388>
    249e:	8b e2       	ldi	r24, 0x2B	; 43
    24a0:	01 c0       	rjmp	.+2      	; 0x24a4 <vfprintf+0x38a>
    24a2:	80 e2       	ldi	r24, 0x20	; 32
    24a4:	f7 fc       	sbrc	r15, 7
    24a6:	8d e2       	ldi	r24, 0x2D	; 45
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	b3 01       	movw	r22, r6
    24ac:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <fputc>
    24b0:	06 c0       	rjmp	.+12     	; 0x24be <vfprintf+0x3a4>
    24b2:	80 e3       	ldi	r24, 0x30	; 48
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	b3 01       	movw	r22, r6
    24b8:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <fputc>
    24bc:	9a 94       	dec	r9
    24be:	d9 14       	cp	r13, r9
    24c0:	c0 f3       	brcs	.-16     	; 0x24b2 <vfprintf+0x398>
    24c2:	da 94       	dec	r13
    24c4:	f1 01       	movw	r30, r2
    24c6:	ed 0d       	add	r30, r13
    24c8:	f1 1d       	adc	r31, r1
    24ca:	80 81       	ld	r24, Z
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	b3 01       	movw	r22, r6
    24d0:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <fputc>
    24d4:	dd 20       	and	r13, r13
    24d6:	a9 f7       	brne	.-22     	; 0x24c2 <vfprintf+0x3a8>
    24d8:	06 c0       	rjmp	.+12     	; 0x24e6 <vfprintf+0x3cc>
    24da:	80 e2       	ldi	r24, 0x20	; 32
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	b3 01       	movw	r22, r6
    24e0:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <fputc>
    24e4:	ea 94       	dec	r14
    24e6:	ee 20       	and	r14, r14
    24e8:	c1 f7       	brne	.-16     	; 0x24da <vfprintf+0x3c0>
    24ea:	43 ce       	rjmp	.-890    	; 0x2172 <vfprintf+0x58>
    24ec:	f3 01       	movw	r30, r6
    24ee:	66 81       	ldd	r22, Z+6	; 0x06
    24f0:	77 81       	ldd	r23, Z+7	; 0x07
    24f2:	cb 01       	movw	r24, r22
    24f4:	2b 96       	adiw	r28, 0x0b	; 11
    24f6:	0f b6       	in	r0, 0x3f	; 63
    24f8:	f8 94       	cli
    24fa:	de bf       	out	0x3e, r29	; 62
    24fc:	0f be       	out	0x3f, r0	; 63
    24fe:	cd bf       	out	0x3d, r28	; 61
    2500:	cf 91       	pop	r28
    2502:	df 91       	pop	r29
    2504:	1f 91       	pop	r17
    2506:	0f 91       	pop	r16
    2508:	ff 90       	pop	r15
    250a:	ef 90       	pop	r14
    250c:	df 90       	pop	r13
    250e:	cf 90       	pop	r12
    2510:	bf 90       	pop	r11
    2512:	af 90       	pop	r10
    2514:	9f 90       	pop	r9
    2516:	8f 90       	pop	r8
    2518:	7f 90       	pop	r7
    251a:	6f 90       	pop	r6
    251c:	5f 90       	pop	r5
    251e:	4f 90       	pop	r4
    2520:	3f 90       	pop	r3
    2522:	2f 90       	pop	r2
    2524:	08 95       	ret

00002526 <dtoa_prf>:
    2526:	6f 92       	push	r6
    2528:	7f 92       	push	r7
    252a:	8f 92       	push	r8
    252c:	9f 92       	push	r9
    252e:	af 92       	push	r10
    2530:	bf 92       	push	r11
    2532:	cf 92       	push	r12
    2534:	df 92       	push	r13
    2536:	ef 92       	push	r14
    2538:	ff 92       	push	r15
    253a:	0f 93       	push	r16
    253c:	1f 93       	push	r17
    253e:	df 93       	push	r29
    2540:	cf 93       	push	r28
    2542:	cd b7       	in	r28, 0x3d	; 61
    2544:	de b7       	in	r29, 0x3e	; 62
    2546:	29 97       	sbiw	r28, 0x09	; 9
    2548:	0f b6       	in	r0, 0x3f	; 63
    254a:	f8 94       	cli
    254c:	de bf       	out	0x3e, r29	; 62
    254e:	0f be       	out	0x3f, r0	; 63
    2550:	cd bf       	out	0x3d, r28	; 61
    2552:	6a 01       	movw	r12, r20
    2554:	12 2f       	mov	r17, r18
    2556:	a0 2e       	mov	r10, r16
    2558:	be 2c       	mov	r11, r14
    255a:	2b e3       	ldi	r18, 0x3B	; 59
    255c:	20 17       	cp	r18, r16
    255e:	18 f4       	brcc	.+6      	; 0x2566 <dtoa_prf+0x40>
    2560:	2c e3       	ldi	r18, 0x3C	; 60
    2562:	92 2e       	mov	r9, r18
    2564:	02 c0       	rjmp	.+4      	; 0x256a <dtoa_prf+0x44>
    2566:	90 2e       	mov	r9, r16
    2568:	93 94       	inc	r9
    256a:	ae 01       	movw	r20, r28
    256c:	4f 5f       	subi	r20, 0xFF	; 255
    256e:	5f 4f       	sbci	r21, 0xFF	; 255
    2570:	27 e0       	ldi	r18, 0x07	; 7
    2572:	09 2d       	mov	r16, r9
    2574:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__ftoa_engine>
    2578:	bc 01       	movw	r22, r24
    257a:	89 81       	ldd	r24, Y+1	; 0x01
    257c:	e8 2e       	mov	r14, r24
    257e:	ff 24       	eor	r15, r15
    2580:	c7 01       	movw	r24, r14
    2582:	89 70       	andi	r24, 0x09	; 9
    2584:	90 70       	andi	r25, 0x00	; 0
    2586:	01 97       	sbiw	r24, 0x01	; 1
    2588:	11 f4       	brne	.+4      	; 0x258e <dtoa_prf+0x68>
    258a:	ad e2       	ldi	r26, 0x2D	; 45
    258c:	09 c0       	rjmp	.+18     	; 0x25a0 <dtoa_prf+0x7a>
    258e:	b1 fe       	sbrs	r11, 1
    2590:	02 c0       	rjmp	.+4      	; 0x2596 <dtoa_prf+0x70>
    2592:	ab e2       	ldi	r26, 0x2B	; 43
    2594:	05 c0       	rjmp	.+10     	; 0x25a0 <dtoa_prf+0x7a>
    2596:	b0 fc       	sbrc	r11, 0
    2598:	02 c0       	rjmp	.+4      	; 0x259e <dtoa_prf+0x78>
    259a:	a0 e0       	ldi	r26, 0x00	; 0
    259c:	01 c0       	rjmp	.+2      	; 0x25a0 <dtoa_prf+0x7a>
    259e:	a0 e2       	ldi	r26, 0x20	; 32
    25a0:	e3 fe       	sbrs	r14, 3
    25a2:	3b c0       	rjmp	.+118    	; 0x261a <dtoa_prf+0xf4>
    25a4:	aa 23       	and	r26, r26
    25a6:	11 f4       	brne	.+4      	; 0x25ac <dtoa_prf+0x86>
    25a8:	23 e0       	ldi	r18, 0x03	; 3
    25aa:	01 c0       	rjmp	.+2      	; 0x25ae <dtoa_prf+0x88>
    25ac:	24 e0       	ldi	r18, 0x04	; 4
    25ae:	21 17       	cp	r18, r17
    25b0:	10 f0       	brcs	.+4      	; 0x25b6 <dtoa_prf+0x90>
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	02 c0       	rjmp	.+4      	; 0x25ba <dtoa_prf+0x94>
    25b6:	12 1b       	sub	r17, r18
    25b8:	21 2f       	mov	r18, r17
    25ba:	eb 2c       	mov	r14, r11
    25bc:	b4 fe       	sbrs	r11, 4
    25be:	02 c0       	rjmp	.+4      	; 0x25c4 <dtoa_prf+0x9e>
    25c0:	32 2f       	mov	r19, r18
    25c2:	0a c0       	rjmp	.+20     	; 0x25d8 <dtoa_prf+0xb2>
    25c4:	f6 01       	movw	r30, r12
    25c6:	32 2f       	mov	r19, r18
    25c8:	80 e2       	ldi	r24, 0x20	; 32
    25ca:	02 c0       	rjmp	.+4      	; 0x25d0 <dtoa_prf+0xaa>
    25cc:	81 93       	st	Z+, r24
    25ce:	31 50       	subi	r19, 0x01	; 1
    25d0:	33 23       	and	r19, r19
    25d2:	e1 f7       	brne	.-8      	; 0x25cc <dtoa_prf+0xa6>
    25d4:	c2 0e       	add	r12, r18
    25d6:	d1 1c       	adc	r13, r1
    25d8:	aa 23       	and	r26, r26
    25da:	19 f0       	breq	.+6      	; 0x25e2 <dtoa_prf+0xbc>
    25dc:	f6 01       	movw	r30, r12
    25de:	a1 93       	st	Z+, r26
    25e0:	6f 01       	movw	r12, r30
    25e2:	f6 01       	movw	r30, r12
    25e4:	31 96       	adiw	r30, 0x01	; 1
    25e6:	e2 fe       	sbrs	r14, 2
    25e8:	05 c0       	rjmp	.+10     	; 0x25f4 <dtoa_prf+0xce>
    25ea:	9e e4       	ldi	r25, 0x4E	; 78
    25ec:	d6 01       	movw	r26, r12
    25ee:	9c 93       	st	X, r25
    25f0:	81 e4       	ldi	r24, 0x41	; 65
    25f2:	04 c0       	rjmp	.+8      	; 0x25fc <dtoa_prf+0xd6>
    25f4:	9e e6       	ldi	r25, 0x6E	; 110
    25f6:	d6 01       	movw	r26, r12
    25f8:	9c 93       	st	X, r25
    25fa:	81 e6       	ldi	r24, 0x61	; 97
    25fc:	11 96       	adiw	r26, 0x01	; 1
    25fe:	8c 93       	st	X, r24
    2600:	91 83       	std	Z+1, r25	; 0x01
    2602:	32 96       	adiw	r30, 0x02	; 2
    2604:	df 01       	movw	r26, r30
    2606:	83 2f       	mov	r24, r19
    2608:	90 e2       	ldi	r25, 0x20	; 32
    260a:	02 c0       	rjmp	.+4      	; 0x2610 <dtoa_prf+0xea>
    260c:	9d 93       	st	X+, r25
    260e:	81 50       	subi	r24, 0x01	; 1
    2610:	88 23       	and	r24, r24
    2612:	e1 f7       	brne	.-8      	; 0x260c <dtoa_prf+0xe6>
    2614:	e3 0f       	add	r30, r19
    2616:	f1 1d       	adc	r31, r1
    2618:	40 c0       	rjmp	.+128    	; 0x269a <dtoa_prf+0x174>
    261a:	e2 fe       	sbrs	r14, 2
    261c:	42 c0       	rjmp	.+132    	; 0x26a2 <dtoa_prf+0x17c>
    261e:	aa 23       	and	r26, r26
    2620:	11 f4       	brne	.+4      	; 0x2626 <dtoa_prf+0x100>
    2622:	23 e0       	ldi	r18, 0x03	; 3
    2624:	01 c0       	rjmp	.+2      	; 0x2628 <dtoa_prf+0x102>
    2626:	24 e0       	ldi	r18, 0x04	; 4
    2628:	21 17       	cp	r18, r17
    262a:	10 f0       	brcs	.+4      	; 0x2630 <dtoa_prf+0x10a>
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	02 c0       	rjmp	.+4      	; 0x2634 <dtoa_prf+0x10e>
    2630:	12 1b       	sub	r17, r18
    2632:	21 2f       	mov	r18, r17
    2634:	eb 2c       	mov	r14, r11
    2636:	b4 fe       	sbrs	r11, 4
    2638:	02 c0       	rjmp	.+4      	; 0x263e <dtoa_prf+0x118>
    263a:	92 2f       	mov	r25, r18
    263c:	0a c0       	rjmp	.+20     	; 0x2652 <dtoa_prf+0x12c>
    263e:	f6 01       	movw	r30, r12
    2640:	92 2f       	mov	r25, r18
    2642:	80 e2       	ldi	r24, 0x20	; 32
    2644:	02 c0       	rjmp	.+4      	; 0x264a <dtoa_prf+0x124>
    2646:	81 93       	st	Z+, r24
    2648:	91 50       	subi	r25, 0x01	; 1
    264a:	99 23       	and	r25, r25
    264c:	e1 f7       	brne	.-8      	; 0x2646 <dtoa_prf+0x120>
    264e:	c2 0e       	add	r12, r18
    2650:	d1 1c       	adc	r13, r1
    2652:	aa 23       	and	r26, r26
    2654:	19 f0       	breq	.+6      	; 0x265c <dtoa_prf+0x136>
    2656:	f6 01       	movw	r30, r12
    2658:	a1 93       	st	Z+, r26
    265a:	6f 01       	movw	r12, r30
    265c:	f6 01       	movw	r30, r12
    265e:	31 96       	adiw	r30, 0x01	; 1
    2660:	e2 fe       	sbrs	r14, 2
    2662:	08 c0       	rjmp	.+16     	; 0x2674 <dtoa_prf+0x14e>
    2664:	89 e4       	ldi	r24, 0x49	; 73
    2666:	d6 01       	movw	r26, r12
    2668:	8c 93       	st	X, r24
    266a:	8e e4       	ldi	r24, 0x4E	; 78
    266c:	11 96       	adiw	r26, 0x01	; 1
    266e:	8c 93       	st	X, r24
    2670:	86 e4       	ldi	r24, 0x46	; 70
    2672:	07 c0       	rjmp	.+14     	; 0x2682 <dtoa_prf+0x15c>
    2674:	89 e6       	ldi	r24, 0x69	; 105
    2676:	d6 01       	movw	r26, r12
    2678:	8c 93       	st	X, r24
    267a:	8e e6       	ldi	r24, 0x6E	; 110
    267c:	11 96       	adiw	r26, 0x01	; 1
    267e:	8c 93       	st	X, r24
    2680:	86 e6       	ldi	r24, 0x66	; 102
    2682:	81 83       	std	Z+1, r24	; 0x01
    2684:	32 96       	adiw	r30, 0x02	; 2
    2686:	df 01       	movw	r26, r30
    2688:	89 2f       	mov	r24, r25
    268a:	20 e2       	ldi	r18, 0x20	; 32
    268c:	02 c0       	rjmp	.+4      	; 0x2692 <dtoa_prf+0x16c>
    268e:	2d 93       	st	X+, r18
    2690:	81 50       	subi	r24, 0x01	; 1
    2692:	88 23       	and	r24, r24
    2694:	e1 f7       	brne	.-8      	; 0x268e <dtoa_prf+0x168>
    2696:	e9 0f       	add	r30, r25
    2698:	f1 1d       	adc	r31, r1
    269a:	10 82       	st	Z, r1
    269c:	2e ef       	ldi	r18, 0xFE	; 254
    269e:	3f ef       	ldi	r19, 0xFF	; 255
    26a0:	ae c0       	rjmp	.+348    	; 0x27fe <dtoa_prf+0x2d8>
    26a2:	16 16       	cp	r1, r22
    26a4:	17 06       	cpc	r1, r23
    26a6:	1c f0       	brlt	.+6      	; 0x26ae <dtoa_prf+0x188>
    26a8:	41 e0       	ldi	r20, 0x01	; 1
    26aa:	50 e0       	ldi	r21, 0x00	; 0
    26ac:	03 c0       	rjmp	.+6      	; 0x26b4 <dtoa_prf+0x18e>
    26ae:	ab 01       	movw	r20, r22
    26b0:	4f 5f       	subi	r20, 0xFF	; 255
    26b2:	5f 4f       	sbci	r21, 0xFF	; 255
    26b4:	aa 20       	and	r10, r10
    26b6:	19 f4       	brne	.+6      	; 0x26be <dtoa_prf+0x198>
    26b8:	80 e0       	ldi	r24, 0x00	; 0
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	03 c0       	rjmp	.+6      	; 0x26c4 <dtoa_prf+0x19e>
    26be:	8a 2d       	mov	r24, r10
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	01 96       	adiw	r24, 0x01	; 1
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	aa 23       	and	r26, r26
    26ca:	11 f0       	breq	.+4      	; 0x26d0 <dtoa_prf+0x1aa>
    26cc:	21 e0       	ldi	r18, 0x01	; 1
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	24 0f       	add	r18, r20
    26d2:	35 1f       	adc	r19, r21
    26d4:	28 0f       	add	r18, r24
    26d6:	39 1f       	adc	r19, r25
    26d8:	81 2f       	mov	r24, r17
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	28 17       	cp	r18, r24
    26de:	39 07       	cpc	r19, r25
    26e0:	14 f0       	brlt	.+4      	; 0x26e6 <dtoa_prf+0x1c0>
    26e2:	20 e0       	ldi	r18, 0x00	; 0
    26e4:	02 c0       	rjmp	.+4      	; 0x26ea <dtoa_prf+0x1c4>
    26e6:	12 1b       	sub	r17, r18
    26e8:	21 2f       	mov	r18, r17
    26ea:	4b 2d       	mov	r20, r11
    26ec:	50 e0       	ldi	r21, 0x00	; 0
    26ee:	ca 01       	movw	r24, r20
    26f0:	80 71       	andi	r24, 0x10	; 16
    26f2:	90 70       	andi	r25, 0x00	; 0
    26f4:	b4 fc       	sbrc	r11, 4
    26f6:	0d c0       	rjmp	.+26     	; 0x2712 <dtoa_prf+0x1ec>
    26f8:	b3 fc       	sbrc	r11, 3
    26fa:	0b c0       	rjmp	.+22     	; 0x2712 <dtoa_prf+0x1ec>
    26fc:	f6 01       	movw	r30, r12
    26fe:	32 2f       	mov	r19, r18
    2700:	40 e2       	ldi	r20, 0x20	; 32
    2702:	02 c0       	rjmp	.+4      	; 0x2708 <dtoa_prf+0x1e2>
    2704:	41 93       	st	Z+, r20
    2706:	31 50       	subi	r19, 0x01	; 1
    2708:	33 23       	and	r19, r19
    270a:	e1 f7       	brne	.-8      	; 0x2704 <dtoa_prf+0x1de>
    270c:	c2 0e       	add	r12, r18
    270e:	d1 1c       	adc	r13, r1
    2710:	01 c0       	rjmp	.+2      	; 0x2714 <dtoa_prf+0x1ee>
    2712:	32 2f       	mov	r19, r18
    2714:	aa 23       	and	r26, r26
    2716:	19 f0       	breq	.+6      	; 0x271e <dtoa_prf+0x1f8>
    2718:	f6 01       	movw	r30, r12
    271a:	a1 93       	st	Z+, r26
    271c:	6f 01       	movw	r12, r30
    271e:	89 2b       	or	r24, r25
    2720:	11 f0       	breq	.+4      	; 0x2726 <dtoa_prf+0x200>
    2722:	13 2f       	mov	r17, r19
    2724:	0a c0       	rjmp	.+20     	; 0x273a <dtoa_prf+0x214>
    2726:	f6 01       	movw	r30, r12
    2728:	13 2f       	mov	r17, r19
    272a:	80 e3       	ldi	r24, 0x30	; 48
    272c:	02 c0       	rjmp	.+4      	; 0x2732 <dtoa_prf+0x20c>
    272e:	81 93       	st	Z+, r24
    2730:	11 50       	subi	r17, 0x01	; 1
    2732:	11 23       	and	r17, r17
    2734:	e1 f7       	brne	.-8      	; 0x272e <dtoa_prf+0x208>
    2736:	c3 0e       	add	r12, r19
    2738:	d1 1c       	adc	r13, r1
    273a:	09 2d       	mov	r16, r9
    273c:	06 0f       	add	r16, r22
    273e:	ba 80       	ldd	r11, Y+2	; 0x02
    2740:	90 e1       	ldi	r25, 0x10	; 16
    2742:	89 2e       	mov	r8, r25
    2744:	91 2c       	mov	r9, r1
    2746:	8e 20       	and	r8, r14
    2748:	9f 20       	and	r9, r15
    274a:	e4 fe       	sbrs	r14, 4
    274c:	04 c0       	rjmp	.+8      	; 0x2756 <dtoa_prf+0x230>
    274e:	f1 e3       	ldi	r31, 0x31	; 49
    2750:	bf 16       	cp	r11, r31
    2752:	09 f4       	brne	.+2      	; 0x2756 <dtoa_prf+0x230>
    2754:	01 50       	subi	r16, 0x01	; 1
    2756:	10 16       	cp	r1, r16
    2758:	14 f0       	brlt	.+4      	; 0x275e <dtoa_prf+0x238>
    275a:	01 e0       	ldi	r16, 0x01	; 1
    275c:	03 c0       	rjmp	.+6      	; 0x2764 <dtoa_prf+0x23e>
    275e:	09 30       	cpi	r16, 0x09	; 9
    2760:	08 f0       	brcs	.+2      	; 0x2764 <dtoa_prf+0x23e>
    2762:	08 e0       	ldi	r16, 0x08	; 8
    2764:	9b 01       	movw	r18, r22
    2766:	77 ff       	sbrs	r23, 7
    2768:	02 c0       	rjmp	.+4      	; 0x276e <dtoa_prf+0x248>
    276a:	20 e0       	ldi	r18, 0x00	; 0
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	cb 01       	movw	r24, r22
    2770:	01 96       	adiw	r24, 0x01	; 1
    2772:	82 1b       	sub	r24, r18
    2774:	93 0b       	sbc	r25, r19
    2776:	fe 01       	movw	r30, r28
    2778:	31 96       	adiw	r30, 0x01	; 1
    277a:	e8 0f       	add	r30, r24
    277c:	f9 1f       	adc	r31, r25
    277e:	8e e2       	ldi	r24, 0x2E	; 46
    2780:	f8 2e       	mov	r15, r24
    2782:	3b 01       	movw	r6, r22
    2784:	60 1a       	sub	r6, r16
    2786:	71 08       	sbc	r7, r1
    2788:	8a 2d       	mov	r24, r10
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	44 27       	eor	r20, r20
    278e:	55 27       	eor	r21, r21
    2790:	48 1b       	sub	r20, r24
    2792:	59 0b       	sbc	r21, r25
    2794:	8f ef       	ldi	r24, 0xFF	; 255
    2796:	2f 3f       	cpi	r18, 0xFF	; 255
    2798:	38 07       	cpc	r19, r24
    279a:	19 f4       	brne	.+6      	; 0x27a2 <dtoa_prf+0x27c>
    279c:	d6 01       	movw	r26, r12
    279e:	fd 92       	st	X+, r15
    27a0:	6d 01       	movw	r12, r26
    27a2:	62 17       	cp	r22, r18
    27a4:	73 07       	cpc	r23, r19
    27a6:	2c f0       	brlt	.+10     	; 0x27b2 <dtoa_prf+0x28c>
    27a8:	62 16       	cp	r6, r18
    27aa:	73 06       	cpc	r7, r19
    27ac:	14 f4       	brge	.+4      	; 0x27b2 <dtoa_prf+0x28c>
    27ae:	80 81       	ld	r24, Z
    27b0:	01 c0       	rjmp	.+2      	; 0x27b4 <dtoa_prf+0x28e>
    27b2:	80 e3       	ldi	r24, 0x30	; 48
    27b4:	21 50       	subi	r18, 0x01	; 1
    27b6:	30 40       	sbci	r19, 0x00	; 0
    27b8:	31 96       	adiw	r30, 0x01	; 1
    27ba:	24 17       	cp	r18, r20
    27bc:	35 07       	cpc	r19, r21
    27be:	24 f0       	brlt	.+8      	; 0x27c8 <dtoa_prf+0x2a2>
    27c0:	d6 01       	movw	r26, r12
    27c2:	8d 93       	st	X+, r24
    27c4:	6d 01       	movw	r12, r26
    27c6:	e6 cf       	rjmp	.-52     	; 0x2794 <dtoa_prf+0x26e>
    27c8:	26 17       	cp	r18, r22
    27ca:	37 07       	cpc	r19, r23
    27cc:	41 f4       	brne	.+16     	; 0x27de <dtoa_prf+0x2b8>
    27ce:	b5 e3       	ldi	r27, 0x35	; 53
    27d0:	bb 15       	cp	r27, r11
    27d2:	20 f0       	brcs	.+8      	; 0x27dc <dtoa_prf+0x2b6>
    27d4:	bb 16       	cp	r11, r27
    27d6:	19 f4       	brne	.+6      	; 0x27de <dtoa_prf+0x2b8>
    27d8:	89 28       	or	r8, r9
    27da:	09 f4       	brne	.+2      	; 0x27de <dtoa_prf+0x2b8>
    27dc:	81 e3       	ldi	r24, 0x31	; 49
    27de:	f6 01       	movw	r30, r12
    27e0:	81 93       	st	Z+, r24
    27e2:	d6 01       	movw	r26, r12
    27e4:	81 2f       	mov	r24, r17
    27e6:	90 e2       	ldi	r25, 0x20	; 32
    27e8:	02 c0       	rjmp	.+4      	; 0x27ee <dtoa_prf+0x2c8>
    27ea:	9c 93       	st	X, r25
    27ec:	81 50       	subi	r24, 0x01	; 1
    27ee:	11 96       	adiw	r26, 0x01	; 1
    27f0:	88 23       	and	r24, r24
    27f2:	d9 f7       	brne	.-10     	; 0x27ea <dtoa_prf+0x2c4>
    27f4:	e1 0f       	add	r30, r17
    27f6:	f1 1d       	adc	r31, r1
    27f8:	10 82       	st	Z, r1
    27fa:	20 e0       	ldi	r18, 0x00	; 0
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	c9 01       	movw	r24, r18
    2800:	29 96       	adiw	r28, 0x09	; 9
    2802:	0f b6       	in	r0, 0x3f	; 63
    2804:	f8 94       	cli
    2806:	de bf       	out	0x3e, r29	; 62
    2808:	0f be       	out	0x3f, r0	; 63
    280a:	cd bf       	out	0x3d, r28	; 61
    280c:	cf 91       	pop	r28
    280e:	df 91       	pop	r29
    2810:	1f 91       	pop	r17
    2812:	0f 91       	pop	r16
    2814:	ff 90       	pop	r15
    2816:	ef 90       	pop	r14
    2818:	df 90       	pop	r13
    281a:	cf 90       	pop	r12
    281c:	bf 90       	pop	r11
    281e:	af 90       	pop	r10
    2820:	9f 90       	pop	r9
    2822:	8f 90       	pop	r8
    2824:	7f 90       	pop	r7
    2826:	6f 90       	pop	r6
    2828:	08 95       	ret

0000282a <strtod>:
    282a:	8f 92       	push	r8
    282c:	9f 92       	push	r9
    282e:	af 92       	push	r10
    2830:	bf 92       	push	r11
    2832:	cf 92       	push	r12
    2834:	df 92       	push	r13
    2836:	ef 92       	push	r14
    2838:	ff 92       	push	r15
    283a:	0f 93       	push	r16
    283c:	1f 93       	push	r17
    283e:	cf 93       	push	r28
    2840:	df 93       	push	r29
    2842:	ec 01       	movw	r28, r24
    2844:	5b 01       	movw	r10, r22
    2846:	61 15       	cp	r22, r1
    2848:	71 05       	cpc	r23, r1
    284a:	19 f0       	breq	.+6      	; 0x2852 <strtod+0x28>
    284c:	fb 01       	movw	r30, r22
    284e:	91 83       	std	Z+1, r25	; 0x01
    2850:	80 83       	st	Z, r24
    2852:	f9 90       	ld	r15, Y+
    2854:	8f 2d       	mov	r24, r15
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <isspace>
    285c:	89 2b       	or	r24, r25
    285e:	c9 f7       	brne	.-14     	; 0x2852 <strtod+0x28>
    2860:	fd e2       	ldi	r31, 0x2D	; 45
    2862:	ff 16       	cp	r15, r31
    2864:	21 f4       	brne	.+8      	; 0x286e <strtod+0x44>
    2866:	f9 90       	ld	r15, Y+
    2868:	ee 24       	eor	r14, r14
    286a:	e3 94       	inc	r14
    286c:	05 c0       	rjmp	.+10     	; 0x2878 <strtod+0x4e>
    286e:	2b e2       	ldi	r18, 0x2B	; 43
    2870:	f2 16       	cp	r15, r18
    2872:	09 f4       	brne	.+2      	; 0x2876 <strtod+0x4c>
    2874:	f9 90       	ld	r15, Y+
    2876:	ee 24       	eor	r14, r14
    2878:	8e 01       	movw	r16, r28
    287a:	01 50       	subi	r16, 0x01	; 1
    287c:	10 40       	sbci	r17, 0x00	; 0
    287e:	c8 01       	movw	r24, r16
    2880:	64 eb       	ldi	r22, 0xB4	; 180
    2882:	70 e0       	ldi	r23, 0x00	; 0
    2884:	43 e0       	ldi	r20, 0x03	; 3
    2886:	50 e0       	ldi	r21, 0x00	; 0
    2888:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <strncasecmp_P>
    288c:	89 2b       	or	r24, r25
    288e:	01 f5       	brne	.+64     	; 0x28d0 <strtod+0xa6>
    2890:	8e 01       	movw	r16, r28
    2892:	0e 5f       	subi	r16, 0xFE	; 254
    2894:	1f 4f       	sbci	r17, 0xFF	; 255
    2896:	c8 01       	movw	r24, r16
    2898:	67 eb       	ldi	r22, 0xB7	; 183
    289a:	70 e0       	ldi	r23, 0x00	; 0
    289c:	45 e0       	ldi	r20, 0x05	; 5
    289e:	50 e0       	ldi	r21, 0x00	; 0
    28a0:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <strncasecmp_P>
    28a4:	89 2b       	or	r24, r25
    28a6:	19 f4       	brne	.+6      	; 0x28ae <strtod+0x84>
    28a8:	8e 01       	movw	r16, r28
    28aa:	09 5f       	subi	r16, 0xF9	; 249
    28ac:	1f 4f       	sbci	r17, 0xFF	; 255
    28ae:	a1 14       	cp	r10, r1
    28b0:	b1 04       	cpc	r11, r1
    28b2:	19 f0       	breq	.+6      	; 0x28ba <strtod+0x90>
    28b4:	f5 01       	movw	r30, r10
    28b6:	11 83       	std	Z+1, r17	; 0x01
    28b8:	00 83       	st	Z, r16
    28ba:	e0 fc       	sbrc	r14, 0
    28bc:	04 c0       	rjmp	.+8      	; 0x28c6 <strtod+0x9c>
    28be:	70 e0       	ldi	r23, 0x00	; 0
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	80 e8       	ldi	r24, 0x80	; 128
    28c4:	14 c0       	rjmp	.+40     	; 0x28ee <strtod+0xc4>
    28c6:	70 e0       	ldi	r23, 0x00	; 0
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	80 e8       	ldi	r24, 0x80	; 128
    28cc:	6f ef       	ldi	r22, 0xFF	; 255
    28ce:	08 c1       	rjmp	.+528    	; 0x2ae0 <strtod+0x2b6>
    28d0:	c8 01       	movw	r24, r16
    28d2:	6c eb       	ldi	r22, 0xBC	; 188
    28d4:	70 e0       	ldi	r23, 0x00	; 0
    28d6:	43 e0       	ldi	r20, 0x03	; 3
    28d8:	50 e0       	ldi	r21, 0x00	; 0
    28da:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <strncasecmp_P>
    28de:	89 2b       	or	r24, r25
    28e0:	69 f4       	brne	.+26     	; 0x28fc <strtod+0xd2>
    28e2:	a1 14       	cp	r10, r1
    28e4:	b1 04       	cpc	r11, r1
    28e6:	29 f4       	brne	.+10     	; 0x28f2 <strtod+0xc8>
    28e8:	70 e0       	ldi	r23, 0x00	; 0
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	80 ec       	ldi	r24, 0xC0	; 192
    28ee:	6f e7       	ldi	r22, 0x7F	; 127
    28f0:	f7 c0       	rjmp	.+494    	; 0x2ae0 <strtod+0x2b6>
    28f2:	22 96       	adiw	r28, 0x02	; 2
    28f4:	f5 01       	movw	r30, r10
    28f6:	d1 83       	std	Z+1, r29	; 0x01
    28f8:	c0 83       	st	Z, r28
    28fa:	f6 cf       	rjmp	.-20     	; 0x28e8 <strtod+0xbe>
    28fc:	88 24       	eor	r8, r8
    28fe:	99 24       	eor	r9, r9
    2900:	40 e0       	ldi	r20, 0x00	; 0
    2902:	50 e0       	ldi	r21, 0x00	; 0
    2904:	60 e0       	ldi	r22, 0x00	; 0
    2906:	70 e0       	ldi	r23, 0x00	; 0
    2908:	ef 2d       	mov	r30, r15
    290a:	e0 53       	subi	r30, 0x30	; 48
    290c:	ea 30       	cpi	r30, 0x0A	; 10
    290e:	a0 f5       	brcc	.+104    	; 0x2978 <strtod+0x14e>
    2910:	f2 e0       	ldi	r31, 0x02	; 2
    2912:	ef 2a       	or	r14, r31
    2914:	8e 2d       	mov	r24, r14
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	9c 01       	movw	r18, r24
    291a:	28 70       	andi	r18, 0x08	; 8
    291c:	30 70       	andi	r19, 0x00	; 0
    291e:	e2 fe       	sbrs	r14, 2
    2920:	06 c0       	rjmp	.+12     	; 0x292e <strtod+0x104>
    2922:	23 2b       	or	r18, r19
    2924:	79 f5       	brne	.+94     	; 0x2984 <strtod+0x15a>
    2926:	08 94       	sec
    2928:	81 1c       	adc	r8, r1
    292a:	91 1c       	adc	r9, r1
    292c:	2b c0       	rjmp	.+86     	; 0x2984 <strtod+0x15a>
    292e:	23 2b       	or	r18, r19
    2930:	19 f0       	breq	.+6      	; 0x2938 <strtod+0x10e>
    2932:	08 94       	sec
    2934:	81 08       	sbc	r8, r1
    2936:	91 08       	sbc	r9, r1
    2938:	db 01       	movw	r26, r22
    293a:	ca 01       	movw	r24, r20
    293c:	12 e0       	ldi	r17, 0x02	; 2
    293e:	88 0f       	add	r24, r24
    2940:	99 1f       	adc	r25, r25
    2942:	aa 1f       	adc	r26, r26
    2944:	bb 1f       	adc	r27, r27
    2946:	1a 95       	dec	r17
    2948:	d1 f7       	brne	.-12     	; 0x293e <strtod+0x114>
    294a:	48 0f       	add	r20, r24
    294c:	59 1f       	adc	r21, r25
    294e:	6a 1f       	adc	r22, r26
    2950:	7b 1f       	adc	r23, r27
    2952:	44 0f       	add	r20, r20
    2954:	55 1f       	adc	r21, r21
    2956:	66 1f       	adc	r22, r22
    2958:	77 1f       	adc	r23, r23
    295a:	4e 0f       	add	r20, r30
    295c:	51 1d       	adc	r21, r1
    295e:	61 1d       	adc	r22, r1
    2960:	71 1d       	adc	r23, r1
    2962:	48 39       	cpi	r20, 0x98	; 152
    2964:	29 e9       	ldi	r18, 0x99	; 153
    2966:	52 07       	cpc	r21, r18
    2968:	29 e9       	ldi	r18, 0x99	; 153
    296a:	62 07       	cpc	r22, r18
    296c:	29 e1       	ldi	r18, 0x19	; 25
    296e:	72 07       	cpc	r23, r18
    2970:	48 f0       	brcs	.+18     	; 0x2984 <strtod+0x15a>
    2972:	84 e0       	ldi	r24, 0x04	; 4
    2974:	e8 2a       	or	r14, r24
    2976:	06 c0       	rjmp	.+12     	; 0x2984 <strtod+0x15a>
    2978:	ee 3f       	cpi	r30, 0xFE	; 254
    297a:	31 f4       	brne	.+12     	; 0x2988 <strtod+0x15e>
    297c:	e3 fc       	sbrc	r14, 3
    297e:	39 c0       	rjmp	.+114    	; 0x29f2 <strtod+0x1c8>
    2980:	98 e0       	ldi	r25, 0x08	; 8
    2982:	e9 2a       	or	r14, r25
    2984:	f9 90       	ld	r15, Y+
    2986:	c0 cf       	rjmp	.-128    	; 0x2908 <strtod+0xde>
    2988:	e5 33       	cpi	r30, 0x35	; 53
    298a:	11 f0       	breq	.+4      	; 0x2990 <strtod+0x166>
    298c:	e5 31       	cpi	r30, 0x15	; 21
    298e:	89 f5       	brne	.+98     	; 0x29f2 <strtod+0x1c8>
    2990:	29 91       	ld	r18, Y+
    2992:	2d 32       	cpi	r18, 0x2D	; 45
    2994:	19 f4       	brne	.+6      	; 0x299c <strtod+0x172>
    2996:	e0 e1       	ldi	r30, 0x10	; 16
    2998:	ee 2a       	or	r14, r30
    299a:	05 c0       	rjmp	.+10     	; 0x29a6 <strtod+0x17c>
    299c:	2b 32       	cpi	r18, 0x2B	; 43
    299e:	19 f0       	breq	.+6      	; 0x29a6 <strtod+0x17c>
    29a0:	81 e0       	ldi	r24, 0x01	; 1
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	03 c0       	rjmp	.+6      	; 0x29ac <strtod+0x182>
    29a6:	29 91       	ld	r18, Y+
    29a8:	82 e0       	ldi	r24, 0x02	; 2
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	e2 2f       	mov	r30, r18
    29ae:	e0 53       	subi	r30, 0x30	; 48
    29b0:	ea 30       	cpi	r30, 0x0A	; 10
    29b2:	18 f0       	brcs	.+6      	; 0x29ba <strtod+0x190>
    29b4:	c8 1b       	sub	r28, r24
    29b6:	d9 0b       	sbc	r29, r25
    29b8:	1c c0       	rjmp	.+56     	; 0x29f2 <strtod+0x1c8>
    29ba:	20 e0       	ldi	r18, 0x00	; 0
    29bc:	30 e0       	ldi	r19, 0x00	; 0
    29be:	fc e0       	ldi	r31, 0x0C	; 12
    29c0:	20 38       	cpi	r18, 0x80	; 128
    29c2:	3f 07       	cpc	r19, r31
    29c4:	5c f4       	brge	.+22     	; 0x29dc <strtod+0x1b2>
    29c6:	c9 01       	movw	r24, r18
    29c8:	88 0f       	add	r24, r24
    29ca:	99 1f       	adc	r25, r25
    29cc:	88 0f       	add	r24, r24
    29ce:	99 1f       	adc	r25, r25
    29d0:	28 0f       	add	r18, r24
    29d2:	39 1f       	adc	r19, r25
    29d4:	22 0f       	add	r18, r18
    29d6:	33 1f       	adc	r19, r19
    29d8:	2e 0f       	add	r18, r30
    29da:	31 1d       	adc	r19, r1
    29dc:	e9 91       	ld	r30, Y+
    29de:	e0 53       	subi	r30, 0x30	; 48
    29e0:	ea 30       	cpi	r30, 0x0A	; 10
    29e2:	68 f3       	brcs	.-38     	; 0x29be <strtod+0x194>
    29e4:	e4 fe       	sbrs	r14, 4
    29e6:	03 c0       	rjmp	.+6      	; 0x29ee <strtod+0x1c4>
    29e8:	30 95       	com	r19
    29ea:	21 95       	neg	r18
    29ec:	3f 4f       	sbci	r19, 0xFF	; 255
    29ee:	82 0e       	add	r8, r18
    29f0:	93 1e       	adc	r9, r19
    29f2:	ce 2c       	mov	r12, r14
    29f4:	dd 24       	eor	r13, r13
    29f6:	e1 fe       	sbrs	r14, 1
    29f8:	07 c0       	rjmp	.+14     	; 0x2a08 <strtod+0x1de>
    29fa:	a1 14       	cp	r10, r1
    29fc:	b1 04       	cpc	r11, r1
    29fe:	21 f0       	breq	.+8      	; 0x2a08 <strtod+0x1de>
    2a00:	21 97       	sbiw	r28, 0x01	; 1
    2a02:	f5 01       	movw	r30, r10
    2a04:	d1 83       	std	Z+1, r29	; 0x01
    2a06:	c0 83       	st	Z, r28
    2a08:	cb 01       	movw	r24, r22
    2a0a:	ba 01       	movw	r22, r20
    2a0c:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <__floatunsisf>
    2a10:	7b 01       	movw	r14, r22
    2a12:	8c 01       	movw	r16, r24
    2a14:	f3 e0       	ldi	r31, 0x03	; 3
    2a16:	cf 22       	and	r12, r31
    2a18:	dd 24       	eor	r13, r13
    2a1a:	23 e0       	ldi	r18, 0x03	; 3
    2a1c:	c2 16       	cp	r12, r18
    2a1e:	d1 04       	cpc	r13, r1
    2a20:	21 f4       	brne	.+8      	; 0x2a2a <strtod+0x200>
    2a22:	17 fb       	bst	r17, 7
    2a24:	10 95       	com	r17
    2a26:	17 f9       	bld	r17, 7
    2a28:	10 95       	com	r17
    2a2a:	57 01       	movw	r10, r14
    2a2c:	68 01       	movw	r12, r16
    2a2e:	c8 01       	movw	r24, r16
    2a30:	b7 01       	movw	r22, r14
    2a32:	20 e0       	ldi	r18, 0x00	; 0
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	40 e0       	ldi	r20, 0x00	; 0
    2a38:	50 e0       	ldi	r21, 0x00	; 0
    2a3a:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <__cmpsf2>
    2a3e:	88 23       	and	r24, r24
    2a40:	09 f4       	brne	.+2      	; 0x2a44 <strtod+0x21a>
    2a42:	4a c0       	rjmp	.+148    	; 0x2ad8 <strtod+0x2ae>
    2a44:	97 fe       	sbrs	r9, 7
    2a46:	0d c0       	rjmp	.+26     	; 0x2a62 <strtod+0x238>
    2a48:	23 ed       	ldi	r18, 0xD3	; 211
    2a4a:	e2 2e       	mov	r14, r18
    2a4c:	20 e0       	ldi	r18, 0x00	; 0
    2a4e:	f2 2e       	mov	r15, r18
    2a50:	90 94       	com	r9
    2a52:	81 94       	neg	r8
    2a54:	91 08       	sbc	r9, r1
    2a56:	93 94       	inc	r9
    2a58:	c0 e2       	ldi	r28, 0x20	; 32
    2a5a:	d0 e0       	ldi	r29, 0x00	; 0
    2a5c:	00 e0       	ldi	r16, 0x00	; 0
    2a5e:	10 e0       	ldi	r17, 0x00	; 0
    2a60:	12 c0       	rjmp	.+36     	; 0x2a86 <strtod+0x25c>
    2a62:	9b ee       	ldi	r25, 0xEB	; 235
    2a64:	e9 2e       	mov	r14, r25
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	f9 2e       	mov	r15, r25
    2a6a:	f6 cf       	rjmp	.-20     	; 0x2a58 <strtod+0x22e>
    2a6c:	f7 01       	movw	r30, r14
    2a6e:	25 91       	lpm	r18, Z+
    2a70:	35 91       	lpm	r19, Z+
    2a72:	45 91       	lpm	r20, Z+
    2a74:	54 91       	lpm	r21, Z+
    2a76:	c6 01       	movw	r24, r12
    2a78:	b5 01       	movw	r22, r10
    2a7a:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <__mulsf3>
    2a7e:	5b 01       	movw	r10, r22
    2a80:	6c 01       	movw	r12, r24
    2a82:	8c 1a       	sub	r8, r28
    2a84:	9d 0a       	sbc	r9, r29
    2a86:	8c 16       	cp	r8, r28
    2a88:	9d 06       	cpc	r9, r29
    2a8a:	84 f7       	brge	.-32     	; 0x2a6c <strtod+0x242>
    2a8c:	d5 95       	asr	r29
    2a8e:	c7 95       	ror	r28
    2a90:	0f 5f       	subi	r16, 0xFF	; 255
    2a92:	1f 4f       	sbci	r17, 0xFF	; 255
    2a94:	06 30       	cpi	r16, 0x06	; 6
    2a96:	11 05       	cpc	r17, r1
    2a98:	29 f0       	breq	.+10     	; 0x2aa4 <strtod+0x27a>
    2a9a:	8c ef       	ldi	r24, 0xFC	; 252
    2a9c:	9f ef       	ldi	r25, 0xFF	; 255
    2a9e:	e8 0e       	add	r14, r24
    2aa0:	f9 1e       	adc	r15, r25
    2aa2:	f1 cf       	rjmp	.-30     	; 0x2a86 <strtod+0x25c>
    2aa4:	c5 01       	movw	r24, r10
    2aa6:	d6 01       	movw	r26, r12
    2aa8:	7c 01       	movw	r14, r24
    2aaa:	8d 01       	movw	r16, r26
    2aac:	8c 2d       	mov	r24, r12
    2aae:	88 0f       	add	r24, r24
    2ab0:	8d 2d       	mov	r24, r13
    2ab2:	88 1f       	adc	r24, r24
    2ab4:	8f 3f       	cpi	r24, 0xFF	; 255
    2ab6:	51 f0       	breq	.+20     	; 0x2acc <strtod+0x2a2>
    2ab8:	c6 01       	movw	r24, r12
    2aba:	b5 01       	movw	r22, r10
    2abc:	20 e0       	ldi	r18, 0x00	; 0
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	40 e0       	ldi	r20, 0x00	; 0
    2ac2:	50 e0       	ldi	r21, 0x00	; 0
    2ac4:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <__cmpsf2>
    2ac8:	88 23       	and	r24, r24
    2aca:	31 f4       	brne	.+12     	; 0x2ad8 <strtod+0x2ae>
    2acc:	82 e2       	ldi	r24, 0x22	; 34
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	90 93 ba 0b 	sts	0x0BBA, r25
    2ad4:	80 93 b9 0b 	sts	0x0BB9, r24
    2ad8:	7e 2d       	mov	r23, r14
    2ada:	9f 2d       	mov	r25, r15
    2adc:	80 2f       	mov	r24, r16
    2ade:	61 2f       	mov	r22, r17
    2ae0:	27 2f       	mov	r18, r23
    2ae2:	39 2f       	mov	r19, r25
    2ae4:	48 2f       	mov	r20, r24
    2ae6:	56 2f       	mov	r21, r22
    2ae8:	b9 01       	movw	r22, r18
    2aea:	ca 01       	movw	r24, r20
    2aec:	df 91       	pop	r29
    2aee:	cf 91       	pop	r28
    2af0:	1f 91       	pop	r17
    2af2:	0f 91       	pop	r16
    2af4:	ff 90       	pop	r15
    2af6:	ef 90       	pop	r14
    2af8:	df 90       	pop	r13
    2afa:	cf 90       	pop	r12
    2afc:	bf 90       	pop	r11
    2afe:	af 90       	pop	r10
    2b00:	9f 90       	pop	r9
    2b02:	8f 90       	pop	r8
    2b04:	08 95       	ret

00002b06 <__ftoa_engine>:
    2b06:	28 30       	cpi	r18, 0x08	; 8
    2b08:	08 f0       	brcs	.+2      	; 0x2b0c <__ftoa_engine+0x6>
    2b0a:	27 e0       	ldi	r18, 0x07	; 7
    2b0c:	33 27       	eor	r19, r19
    2b0e:	da 01       	movw	r26, r20
    2b10:	99 0f       	add	r25, r25
    2b12:	31 1d       	adc	r19, r1
    2b14:	87 fd       	sbrc	r24, 7
    2b16:	91 60       	ori	r25, 0x01	; 1
    2b18:	00 96       	adiw	r24, 0x00	; 0
    2b1a:	61 05       	cpc	r22, r1
    2b1c:	71 05       	cpc	r23, r1
    2b1e:	39 f4       	brne	.+14     	; 0x2b2e <__ftoa_engine+0x28>
    2b20:	32 60       	ori	r19, 0x02	; 2
    2b22:	2e 5f       	subi	r18, 0xFE	; 254
    2b24:	3d 93       	st	X+, r19
    2b26:	30 e3       	ldi	r19, 0x30	; 48
    2b28:	2a 95       	dec	r18
    2b2a:	e1 f7       	brne	.-8      	; 0x2b24 <__ftoa_engine+0x1e>
    2b2c:	08 95       	ret
    2b2e:	9f 3f       	cpi	r25, 0xFF	; 255
    2b30:	30 f0       	brcs	.+12     	; 0x2b3e <__ftoa_engine+0x38>
    2b32:	80 38       	cpi	r24, 0x80	; 128
    2b34:	71 05       	cpc	r23, r1
    2b36:	61 05       	cpc	r22, r1
    2b38:	09 f0       	breq	.+2      	; 0x2b3c <__ftoa_engine+0x36>
    2b3a:	3c 5f       	subi	r19, 0xFC	; 252
    2b3c:	3c 5f       	subi	r19, 0xFC	; 252
    2b3e:	3d 93       	st	X+, r19
    2b40:	91 30       	cpi	r25, 0x01	; 1
    2b42:	08 f0       	brcs	.+2      	; 0x2b46 <__ftoa_engine+0x40>
    2b44:	80 68       	ori	r24, 0x80	; 128
    2b46:	91 1d       	adc	r25, r1
    2b48:	df 93       	push	r29
    2b4a:	cf 93       	push	r28
    2b4c:	1f 93       	push	r17
    2b4e:	0f 93       	push	r16
    2b50:	ff 92       	push	r15
    2b52:	ef 92       	push	r14
    2b54:	19 2f       	mov	r17, r25
    2b56:	98 7f       	andi	r25, 0xF8	; 248
    2b58:	96 95       	lsr	r25
    2b5a:	e9 2f       	mov	r30, r25
    2b5c:	96 95       	lsr	r25
    2b5e:	96 95       	lsr	r25
    2b60:	e9 0f       	add	r30, r25
    2b62:	ff 27       	eor	r31, r31
    2b64:	e7 5b       	subi	r30, 0xB7	; 183
    2b66:	fe 4f       	sbci	r31, 0xFE	; 254
    2b68:	99 27       	eor	r25, r25
    2b6a:	33 27       	eor	r19, r19
    2b6c:	ee 24       	eor	r14, r14
    2b6e:	ff 24       	eor	r15, r15
    2b70:	a7 01       	movw	r20, r14
    2b72:	e7 01       	movw	r28, r14
    2b74:	05 90       	lpm	r0, Z+
    2b76:	08 94       	sec
    2b78:	07 94       	ror	r0
    2b7a:	28 f4       	brcc	.+10     	; 0x2b86 <__ftoa_engine+0x80>
    2b7c:	36 0f       	add	r19, r22
    2b7e:	e7 1e       	adc	r14, r23
    2b80:	f8 1e       	adc	r15, r24
    2b82:	49 1f       	adc	r20, r25
    2b84:	51 1d       	adc	r21, r1
    2b86:	66 0f       	add	r22, r22
    2b88:	77 1f       	adc	r23, r23
    2b8a:	88 1f       	adc	r24, r24
    2b8c:	99 1f       	adc	r25, r25
    2b8e:	06 94       	lsr	r0
    2b90:	a1 f7       	brne	.-24     	; 0x2b7a <__ftoa_engine+0x74>
    2b92:	05 90       	lpm	r0, Z+
    2b94:	07 94       	ror	r0
    2b96:	28 f4       	brcc	.+10     	; 0x2ba2 <__ftoa_engine+0x9c>
    2b98:	e7 0e       	add	r14, r23
    2b9a:	f8 1e       	adc	r15, r24
    2b9c:	49 1f       	adc	r20, r25
    2b9e:	56 1f       	adc	r21, r22
    2ba0:	c1 1d       	adc	r28, r1
    2ba2:	77 0f       	add	r23, r23
    2ba4:	88 1f       	adc	r24, r24
    2ba6:	99 1f       	adc	r25, r25
    2ba8:	66 1f       	adc	r22, r22
    2baa:	06 94       	lsr	r0
    2bac:	a1 f7       	brne	.-24     	; 0x2b96 <__ftoa_engine+0x90>
    2bae:	05 90       	lpm	r0, Z+
    2bb0:	07 94       	ror	r0
    2bb2:	28 f4       	brcc	.+10     	; 0x2bbe <__ftoa_engine+0xb8>
    2bb4:	f8 0e       	add	r15, r24
    2bb6:	49 1f       	adc	r20, r25
    2bb8:	56 1f       	adc	r21, r22
    2bba:	c7 1f       	adc	r28, r23
    2bbc:	d1 1d       	adc	r29, r1
    2bbe:	88 0f       	add	r24, r24
    2bc0:	99 1f       	adc	r25, r25
    2bc2:	66 1f       	adc	r22, r22
    2bc4:	77 1f       	adc	r23, r23
    2bc6:	06 94       	lsr	r0
    2bc8:	a1 f7       	brne	.-24     	; 0x2bb2 <__ftoa_engine+0xac>
    2bca:	05 90       	lpm	r0, Z+
    2bcc:	07 94       	ror	r0
    2bce:	20 f4       	brcc	.+8      	; 0x2bd8 <__ftoa_engine+0xd2>
    2bd0:	49 0f       	add	r20, r25
    2bd2:	56 1f       	adc	r21, r22
    2bd4:	c7 1f       	adc	r28, r23
    2bd6:	d8 1f       	adc	r29, r24
    2bd8:	99 0f       	add	r25, r25
    2bda:	66 1f       	adc	r22, r22
    2bdc:	77 1f       	adc	r23, r23
    2bde:	88 1f       	adc	r24, r24
    2be0:	06 94       	lsr	r0
    2be2:	a9 f7       	brne	.-22     	; 0x2bce <__ftoa_engine+0xc8>
    2be4:	84 91       	lpm	r24, Z+
    2be6:	10 95       	com	r17
    2be8:	17 70       	andi	r17, 0x07	; 7
    2bea:	41 f0       	breq	.+16     	; 0x2bfc <__ftoa_engine+0xf6>
    2bec:	d6 95       	lsr	r29
    2bee:	c7 95       	ror	r28
    2bf0:	57 95       	ror	r21
    2bf2:	47 95       	ror	r20
    2bf4:	f7 94       	ror	r15
    2bf6:	e7 94       	ror	r14
    2bf8:	1a 95       	dec	r17
    2bfa:	c1 f7       	brne	.-16     	; 0x2bec <__ftoa_engine+0xe6>
    2bfc:	ef ee       	ldi	r30, 0xEF	; 239
    2bfe:	f0 e0       	ldi	r31, 0x00	; 0
    2c00:	68 94       	set
    2c02:	15 90       	lpm	r1, Z+
    2c04:	15 91       	lpm	r17, Z+
    2c06:	35 91       	lpm	r19, Z+
    2c08:	65 91       	lpm	r22, Z+
    2c0a:	95 91       	lpm	r25, Z+
    2c0c:	05 90       	lpm	r0, Z+
    2c0e:	7f e2       	ldi	r23, 0x2F	; 47
    2c10:	73 95       	inc	r23
    2c12:	e1 18       	sub	r14, r1
    2c14:	f1 0a       	sbc	r15, r17
    2c16:	43 0b       	sbc	r20, r19
    2c18:	56 0b       	sbc	r21, r22
    2c1a:	c9 0b       	sbc	r28, r25
    2c1c:	d0 09       	sbc	r29, r0
    2c1e:	c0 f7       	brcc	.-16     	; 0x2c10 <__ftoa_engine+0x10a>
    2c20:	e1 0c       	add	r14, r1
    2c22:	f1 1e       	adc	r15, r17
    2c24:	43 1f       	adc	r20, r19
    2c26:	56 1f       	adc	r21, r22
    2c28:	c9 1f       	adc	r28, r25
    2c2a:	d0 1d       	adc	r29, r0
    2c2c:	7e f4       	brtc	.+30     	; 0x2c4c <__ftoa_engine+0x146>
    2c2e:	70 33       	cpi	r23, 0x30	; 48
    2c30:	11 f4       	brne	.+4      	; 0x2c36 <__ftoa_engine+0x130>
    2c32:	8a 95       	dec	r24
    2c34:	e6 cf       	rjmp	.-52     	; 0x2c02 <__ftoa_engine+0xfc>
    2c36:	e8 94       	clt
    2c38:	01 50       	subi	r16, 0x01	; 1
    2c3a:	30 f0       	brcs	.+12     	; 0x2c48 <__ftoa_engine+0x142>
    2c3c:	08 0f       	add	r16, r24
    2c3e:	0a f4       	brpl	.+2      	; 0x2c42 <__ftoa_engine+0x13c>
    2c40:	00 27       	eor	r16, r16
    2c42:	02 17       	cp	r16, r18
    2c44:	08 f4       	brcc	.+2      	; 0x2c48 <__ftoa_engine+0x142>
    2c46:	20 2f       	mov	r18, r16
    2c48:	23 95       	inc	r18
    2c4a:	02 2f       	mov	r16, r18
    2c4c:	7a 33       	cpi	r23, 0x3A	; 58
    2c4e:	28 f0       	brcs	.+10     	; 0x2c5a <__ftoa_engine+0x154>
    2c50:	79 e3       	ldi	r23, 0x39	; 57
    2c52:	7d 93       	st	X+, r23
    2c54:	2a 95       	dec	r18
    2c56:	e9 f7       	brne	.-6      	; 0x2c52 <__ftoa_engine+0x14c>
    2c58:	10 c0       	rjmp	.+32     	; 0x2c7a <__ftoa_engine+0x174>
    2c5a:	7d 93       	st	X+, r23
    2c5c:	2a 95       	dec	r18
    2c5e:	89 f6       	brne	.-94     	; 0x2c02 <__ftoa_engine+0xfc>
    2c60:	06 94       	lsr	r0
    2c62:	97 95       	ror	r25
    2c64:	67 95       	ror	r22
    2c66:	37 95       	ror	r19
    2c68:	17 95       	ror	r17
    2c6a:	17 94       	ror	r1
    2c6c:	e1 18       	sub	r14, r1
    2c6e:	f1 0a       	sbc	r15, r17
    2c70:	43 0b       	sbc	r20, r19
    2c72:	56 0b       	sbc	r21, r22
    2c74:	c9 0b       	sbc	r28, r25
    2c76:	d0 09       	sbc	r29, r0
    2c78:	98 f0       	brcs	.+38     	; 0x2ca0 <__ftoa_engine+0x19a>
    2c7a:	23 95       	inc	r18
    2c7c:	7e 91       	ld	r23, -X
    2c7e:	73 95       	inc	r23
    2c80:	7a 33       	cpi	r23, 0x3A	; 58
    2c82:	08 f0       	brcs	.+2      	; 0x2c86 <__ftoa_engine+0x180>
    2c84:	70 e3       	ldi	r23, 0x30	; 48
    2c86:	7c 93       	st	X, r23
    2c88:	20 13       	cpse	r18, r16
    2c8a:	b8 f7       	brcc	.-18     	; 0x2c7a <__ftoa_engine+0x174>
    2c8c:	7e 91       	ld	r23, -X
    2c8e:	70 61       	ori	r23, 0x10	; 16
    2c90:	7d 93       	st	X+, r23
    2c92:	30 f0       	brcs	.+12     	; 0x2ca0 <__ftoa_engine+0x19a>
    2c94:	83 95       	inc	r24
    2c96:	71 e3       	ldi	r23, 0x31	; 49
    2c98:	7d 93       	st	X+, r23
    2c9a:	70 e3       	ldi	r23, 0x30	; 48
    2c9c:	2a 95       	dec	r18
    2c9e:	e1 f7       	brne	.-8      	; 0x2c98 <__ftoa_engine+0x192>
    2ca0:	11 24       	eor	r1, r1
    2ca2:	ef 90       	pop	r14
    2ca4:	ff 90       	pop	r15
    2ca6:	0f 91       	pop	r16
    2ca8:	1f 91       	pop	r17
    2caa:	cf 91       	pop	r28
    2cac:	df 91       	pop	r29
    2cae:	99 27       	eor	r25, r25
    2cb0:	87 fd       	sbrc	r24, 7
    2cb2:	90 95       	com	r25
    2cb4:	08 95       	ret

00002cb6 <isspace>:
    2cb6:	91 11       	cpse	r25, r1
    2cb8:	f6 c0       	rjmp	.+492    	; 0x2ea6 <__ctype_isfalse>
    2cba:	80 32       	cpi	r24, 0x20	; 32
    2cbc:	19 f0       	breq	.+6      	; 0x2cc4 <isspace+0xe>
    2cbe:	89 50       	subi	r24, 0x09	; 9
    2cc0:	85 50       	subi	r24, 0x05	; 5
    2cc2:	d0 f7       	brcc	.-12     	; 0x2cb8 <isspace+0x2>
    2cc4:	08 95       	ret

00002cc6 <strncasecmp_P>:
    2cc6:	fb 01       	movw	r30, r22
    2cc8:	dc 01       	movw	r26, r24
    2cca:	41 50       	subi	r20, 0x01	; 1
    2ccc:	50 40       	sbci	r21, 0x00	; 0
    2cce:	88 f0       	brcs	.+34     	; 0x2cf2 <strncasecmp_P+0x2c>
    2cd0:	8d 91       	ld	r24, X+
    2cd2:	81 34       	cpi	r24, 0x41	; 65
    2cd4:	1c f0       	brlt	.+6      	; 0x2cdc <strncasecmp_P+0x16>
    2cd6:	8b 35       	cpi	r24, 0x5B	; 91
    2cd8:	0c f4       	brge	.+2      	; 0x2cdc <strncasecmp_P+0x16>
    2cda:	80 5e       	subi	r24, 0xE0	; 224
    2cdc:	65 91       	lpm	r22, Z+
    2cde:	61 34       	cpi	r22, 0x41	; 65
    2ce0:	1c f0       	brlt	.+6      	; 0x2ce8 <strncasecmp_P+0x22>
    2ce2:	6b 35       	cpi	r22, 0x5B	; 91
    2ce4:	0c f4       	brge	.+2      	; 0x2ce8 <strncasecmp_P+0x22>
    2ce6:	60 5e       	subi	r22, 0xE0	; 224
    2ce8:	86 1b       	sub	r24, r22
    2cea:	61 11       	cpse	r22, r1
    2cec:	71 f3       	breq	.-36     	; 0x2cca <strncasecmp_P+0x4>
    2cee:	99 0b       	sbc	r25, r25
    2cf0:	08 95       	ret
    2cf2:	88 1b       	sub	r24, r24
    2cf4:	fc cf       	rjmp	.-8      	; 0x2cee <strncasecmp_P+0x28>

00002cf6 <strnlen_P>:
    2cf6:	fc 01       	movw	r30, r24
    2cf8:	05 90       	lpm	r0, Z+
    2cfa:	61 50       	subi	r22, 0x01	; 1
    2cfc:	70 40       	sbci	r23, 0x00	; 0
    2cfe:	01 10       	cpse	r0, r1
    2d00:	d8 f7       	brcc	.-10     	; 0x2cf8 <strnlen_P+0x2>
    2d02:	80 95       	com	r24
    2d04:	90 95       	com	r25
    2d06:	8e 0f       	add	r24, r30
    2d08:	9f 1f       	adc	r25, r31
    2d0a:	08 95       	ret

00002d0c <strnlen>:
    2d0c:	fc 01       	movw	r30, r24
    2d0e:	61 50       	subi	r22, 0x01	; 1
    2d10:	70 40       	sbci	r23, 0x00	; 0
    2d12:	01 90       	ld	r0, Z+
    2d14:	01 10       	cpse	r0, r1
    2d16:	d8 f7       	brcc	.-10     	; 0x2d0e <strnlen+0x2>
    2d18:	80 95       	com	r24
    2d1a:	90 95       	com	r25
    2d1c:	8e 0f       	add	r24, r30
    2d1e:	9f 1f       	adc	r25, r31
    2d20:	08 95       	ret

00002d22 <strrev>:
    2d22:	dc 01       	movw	r26, r24
    2d24:	fc 01       	movw	r30, r24
    2d26:	67 2f       	mov	r22, r23
    2d28:	71 91       	ld	r23, Z+
    2d2a:	77 23       	and	r23, r23
    2d2c:	e1 f7       	brne	.-8      	; 0x2d26 <strrev+0x4>
    2d2e:	32 97       	sbiw	r30, 0x02	; 2
    2d30:	04 c0       	rjmp	.+8      	; 0x2d3a <strrev+0x18>
    2d32:	7c 91       	ld	r23, X
    2d34:	6d 93       	st	X+, r22
    2d36:	70 83       	st	Z, r23
    2d38:	62 91       	ld	r22, -Z
    2d3a:	ae 17       	cp	r26, r30
    2d3c:	bf 07       	cpc	r27, r31
    2d3e:	c8 f3       	brcs	.-14     	; 0x2d32 <strrev+0x10>
    2d40:	08 95       	ret

00002d42 <fputc>:
    2d42:	0f 93       	push	r16
    2d44:	1f 93       	push	r17
    2d46:	cf 93       	push	r28
    2d48:	df 93       	push	r29
    2d4a:	8c 01       	movw	r16, r24
    2d4c:	eb 01       	movw	r28, r22
    2d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d50:	81 ff       	sbrs	r24, 1
    2d52:	1b c0       	rjmp	.+54     	; 0x2d8a <fputc+0x48>
    2d54:	82 ff       	sbrs	r24, 2
    2d56:	0d c0       	rjmp	.+26     	; 0x2d72 <fputc+0x30>
    2d58:	2e 81       	ldd	r18, Y+6	; 0x06
    2d5a:	3f 81       	ldd	r19, Y+7	; 0x07
    2d5c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d5e:	9d 81       	ldd	r25, Y+5	; 0x05
    2d60:	28 17       	cp	r18, r24
    2d62:	39 07       	cpc	r19, r25
    2d64:	64 f4       	brge	.+24     	; 0x2d7e <fputc+0x3c>
    2d66:	e8 81       	ld	r30, Y
    2d68:	f9 81       	ldd	r31, Y+1	; 0x01
    2d6a:	01 93       	st	Z+, r16
    2d6c:	f9 83       	std	Y+1, r31	; 0x01
    2d6e:	e8 83       	st	Y, r30
    2d70:	06 c0       	rjmp	.+12     	; 0x2d7e <fputc+0x3c>
    2d72:	e8 85       	ldd	r30, Y+8	; 0x08
    2d74:	f9 85       	ldd	r31, Y+9	; 0x09
    2d76:	80 2f       	mov	r24, r16
    2d78:	09 95       	icall
    2d7a:	89 2b       	or	r24, r25
    2d7c:	31 f4       	brne	.+12     	; 0x2d8a <fputc+0x48>
    2d7e:	8e 81       	ldd	r24, Y+6	; 0x06
    2d80:	9f 81       	ldd	r25, Y+7	; 0x07
    2d82:	01 96       	adiw	r24, 0x01	; 1
    2d84:	9f 83       	std	Y+7, r25	; 0x07
    2d86:	8e 83       	std	Y+6, r24	; 0x06
    2d88:	02 c0       	rjmp	.+4      	; 0x2d8e <fputc+0x4c>
    2d8a:	0f ef       	ldi	r16, 0xFF	; 255
    2d8c:	1f ef       	ldi	r17, 0xFF	; 255
    2d8e:	c8 01       	movw	r24, r16
    2d90:	df 91       	pop	r29
    2d92:	cf 91       	pop	r28
    2d94:	1f 91       	pop	r17
    2d96:	0f 91       	pop	r16
    2d98:	08 95       	ret

00002d9a <__ultoa_invert>:
    2d9a:	fa 01       	movw	r30, r20
    2d9c:	aa 27       	eor	r26, r26
    2d9e:	28 30       	cpi	r18, 0x08	; 8
    2da0:	51 f1       	breq	.+84     	; 0x2df6 <__ultoa_invert+0x5c>
    2da2:	20 31       	cpi	r18, 0x10	; 16
    2da4:	81 f1       	breq	.+96     	; 0x2e06 <__ultoa_invert+0x6c>
    2da6:	e8 94       	clt
    2da8:	6f 93       	push	r22
    2daa:	6e 7f       	andi	r22, 0xFE	; 254
    2dac:	6e 5f       	subi	r22, 0xFE	; 254
    2dae:	7f 4f       	sbci	r23, 0xFF	; 255
    2db0:	8f 4f       	sbci	r24, 0xFF	; 255
    2db2:	9f 4f       	sbci	r25, 0xFF	; 255
    2db4:	af 4f       	sbci	r26, 0xFF	; 255
    2db6:	b1 e0       	ldi	r27, 0x01	; 1
    2db8:	3e d0       	rcall	.+124    	; 0x2e36 <__ultoa_invert+0x9c>
    2dba:	b4 e0       	ldi	r27, 0x04	; 4
    2dbc:	3c d0       	rcall	.+120    	; 0x2e36 <__ultoa_invert+0x9c>
    2dbe:	67 0f       	add	r22, r23
    2dc0:	78 1f       	adc	r23, r24
    2dc2:	89 1f       	adc	r24, r25
    2dc4:	9a 1f       	adc	r25, r26
    2dc6:	a1 1d       	adc	r26, r1
    2dc8:	68 0f       	add	r22, r24
    2dca:	79 1f       	adc	r23, r25
    2dcc:	8a 1f       	adc	r24, r26
    2dce:	91 1d       	adc	r25, r1
    2dd0:	a1 1d       	adc	r26, r1
    2dd2:	6a 0f       	add	r22, r26
    2dd4:	71 1d       	adc	r23, r1
    2dd6:	81 1d       	adc	r24, r1
    2dd8:	91 1d       	adc	r25, r1
    2dda:	a1 1d       	adc	r26, r1
    2ddc:	20 d0       	rcall	.+64     	; 0x2e1e <__ultoa_invert+0x84>
    2dde:	09 f4       	brne	.+2      	; 0x2de2 <__ultoa_invert+0x48>
    2de0:	68 94       	set
    2de2:	3f 91       	pop	r19
    2de4:	2a e0       	ldi	r18, 0x0A	; 10
    2de6:	26 9f       	mul	r18, r22
    2de8:	11 24       	eor	r1, r1
    2dea:	30 19       	sub	r19, r0
    2dec:	30 5d       	subi	r19, 0xD0	; 208
    2dee:	31 93       	st	Z+, r19
    2df0:	de f6       	brtc	.-74     	; 0x2da8 <__ultoa_invert+0xe>
    2df2:	cf 01       	movw	r24, r30
    2df4:	08 95       	ret
    2df6:	46 2f       	mov	r20, r22
    2df8:	47 70       	andi	r20, 0x07	; 7
    2dfa:	40 5d       	subi	r20, 0xD0	; 208
    2dfc:	41 93       	st	Z+, r20
    2dfe:	b3 e0       	ldi	r27, 0x03	; 3
    2e00:	0f d0       	rcall	.+30     	; 0x2e20 <__ultoa_invert+0x86>
    2e02:	c9 f7       	brne	.-14     	; 0x2df6 <__ultoa_invert+0x5c>
    2e04:	f6 cf       	rjmp	.-20     	; 0x2df2 <__ultoa_invert+0x58>
    2e06:	46 2f       	mov	r20, r22
    2e08:	4f 70       	andi	r20, 0x0F	; 15
    2e0a:	40 5d       	subi	r20, 0xD0	; 208
    2e0c:	4a 33       	cpi	r20, 0x3A	; 58
    2e0e:	18 f0       	brcs	.+6      	; 0x2e16 <__ultoa_invert+0x7c>
    2e10:	49 5d       	subi	r20, 0xD9	; 217
    2e12:	31 fd       	sbrc	r19, 1
    2e14:	40 52       	subi	r20, 0x20	; 32
    2e16:	41 93       	st	Z+, r20
    2e18:	02 d0       	rcall	.+4      	; 0x2e1e <__ultoa_invert+0x84>
    2e1a:	a9 f7       	brne	.-22     	; 0x2e06 <__ultoa_invert+0x6c>
    2e1c:	ea cf       	rjmp	.-44     	; 0x2df2 <__ultoa_invert+0x58>
    2e1e:	b4 e0       	ldi	r27, 0x04	; 4
    2e20:	a6 95       	lsr	r26
    2e22:	97 95       	ror	r25
    2e24:	87 95       	ror	r24
    2e26:	77 95       	ror	r23
    2e28:	67 95       	ror	r22
    2e2a:	ba 95       	dec	r27
    2e2c:	c9 f7       	brne	.-14     	; 0x2e20 <__ultoa_invert+0x86>
    2e2e:	00 97       	sbiw	r24, 0x00	; 0
    2e30:	61 05       	cpc	r22, r1
    2e32:	71 05       	cpc	r23, r1
    2e34:	08 95       	ret
    2e36:	9b 01       	movw	r18, r22
    2e38:	ac 01       	movw	r20, r24
    2e3a:	0a 2e       	mov	r0, r26
    2e3c:	06 94       	lsr	r0
    2e3e:	57 95       	ror	r21
    2e40:	47 95       	ror	r20
    2e42:	37 95       	ror	r19
    2e44:	27 95       	ror	r18
    2e46:	ba 95       	dec	r27
    2e48:	c9 f7       	brne	.-14     	; 0x2e3c <__ultoa_invert+0xa2>
    2e4a:	62 0f       	add	r22, r18
    2e4c:	73 1f       	adc	r23, r19
    2e4e:	84 1f       	adc	r24, r20
    2e50:	95 1f       	adc	r25, r21
    2e52:	a0 1d       	adc	r26, r0
    2e54:	08 95       	ret

00002e56 <__cmpsf2>:
    2e56:	03 d0       	rcall	.+6      	; 0x2e5e <__fp_cmp>
    2e58:	08 f4       	brcc	.+2      	; 0x2e5c <__cmpsf2+0x6>
    2e5a:	81 e0       	ldi	r24, 0x01	; 1
    2e5c:	08 95       	ret

00002e5e <__fp_cmp>:
    2e5e:	99 0f       	add	r25, r25
    2e60:	00 08       	sbc	r0, r0
    2e62:	55 0f       	add	r21, r21
    2e64:	aa 0b       	sbc	r26, r26
    2e66:	e0 e8       	ldi	r30, 0x80	; 128
    2e68:	fe ef       	ldi	r31, 0xFE	; 254
    2e6a:	16 16       	cp	r1, r22
    2e6c:	17 06       	cpc	r1, r23
    2e6e:	e8 07       	cpc	r30, r24
    2e70:	f9 07       	cpc	r31, r25
    2e72:	c0 f0       	brcs	.+48     	; 0x2ea4 <__fp_cmp+0x46>
    2e74:	12 16       	cp	r1, r18
    2e76:	13 06       	cpc	r1, r19
    2e78:	e4 07       	cpc	r30, r20
    2e7a:	f5 07       	cpc	r31, r21
    2e7c:	98 f0       	brcs	.+38     	; 0x2ea4 <__fp_cmp+0x46>
    2e7e:	62 1b       	sub	r22, r18
    2e80:	73 0b       	sbc	r23, r19
    2e82:	84 0b       	sbc	r24, r20
    2e84:	95 0b       	sbc	r25, r21
    2e86:	39 f4       	brne	.+14     	; 0x2e96 <__fp_cmp+0x38>
    2e88:	0a 26       	eor	r0, r26
    2e8a:	61 f0       	breq	.+24     	; 0x2ea4 <__fp_cmp+0x46>
    2e8c:	23 2b       	or	r18, r19
    2e8e:	24 2b       	or	r18, r20
    2e90:	25 2b       	or	r18, r21
    2e92:	21 f4       	brne	.+8      	; 0x2e9c <__fp_cmp+0x3e>
    2e94:	08 95       	ret
    2e96:	0a 26       	eor	r0, r26
    2e98:	09 f4       	brne	.+2      	; 0x2e9c <__fp_cmp+0x3e>
    2e9a:	a1 40       	sbci	r26, 0x01	; 1
    2e9c:	a6 95       	lsr	r26
    2e9e:	8f ef       	ldi	r24, 0xFF	; 255
    2ea0:	81 1d       	adc	r24, r1
    2ea2:	81 1d       	adc	r24, r1
    2ea4:	08 95       	ret

00002ea6 <__ctype_isfalse>:
    2ea6:	99 27       	eor	r25, r25
    2ea8:	88 27       	eor	r24, r24

00002eaa <__ctype_istrue>:
    2eaa:	08 95       	ret

00002eac <_exit>:
    2eac:	f8 94       	cli

00002eae <__stop_program>:
    2eae:	ff cf       	rjmp	.-2      	; 0x2eae <__stop_program>
