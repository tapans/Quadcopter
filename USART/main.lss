
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006a  00800100  000005c2  00000656  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010e  0080016a  0080016a  000006c0  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000006c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000169  00000000  00000000  000006e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006f3  00000000  00000000  00000849  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000277  00000000  00000000  00000f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004e6  00000000  00000000  000011b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  0000169c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001f8  00000000  00000000  000017ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002e4  00000000  00000000  000019e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00001cc8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__vector_18>
  4c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ec       	ldi	r30, 0xC2	; 194
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	aa 36       	cpi	r26, 0x6A	; 106
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	12 e0       	ldi	r17, 0x02	; 2
  8c:	aa e6       	ldi	r26, 0x6A	; 106
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 37       	cpi	r26, 0x78	; 120
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 4b 01 	call	0x296	; 0x296 <main>
  9e:	0c 94 df 02 	jmp	0x5be	; 0x5be <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USART_Init>:


void USART_Init( unsigned int ubrr ) {
	
	//Set the prescaler for the BAUD as well as the BAUD
	UBRR0H = (unsigned char)(ubrr>>8); 
  a6:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr; 
  aa:	80 93 c4 00 	sts	0x00C4, r24

	/* Set frame format: 8data, 2stop bit */ 
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
  ae:	8e e0       	ldi	r24, 0x0E	; 14
  b0:	80 93 c2 00 	sts	0x00C2, r24
}
  b4:	08 95       	ret

000000b6 <enableRX>:
*	Enables RX Interrupts
*	RXEN0 - Receive Enable flag
*	RXCIE0 - Receive Complete Interrupt flag
*/	
void enableRX(void) { 
	UCSR0B |= (1<<RXEN0) | (1<<RXCIE0);
  b6:	e1 ec       	ldi	r30, 0xC1	; 193
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	80 69       	ori	r24, 0x90	; 144
  be:	80 83       	st	Z, r24
}
  c0:	08 95       	ret

000000c2 <enableTX>:
*	TXEN0 - Enables Transmitter USART0
*	UDRIE0 - Enables UDR Empty Interrupt
*/
void enableTX(void) {

	UCSR0B |= (1<<TXEN0) | (1<<UDRIE0);
  c2:	e1 ec       	ldi	r30, 0xC1	; 193
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	88 62       	ori	r24, 0x28	; 40
  ca:	80 83       	st	Z, r24
}
  cc:	08 95       	ret

000000ce <disableRX>:
*	Disables RX Interrupts
*	RXEN0 - Receive Enable flag
*	RXCIE0 - Receive Complete Interrupt flag
*/
void disableRX(void) {
	UCSR0B &= ~((1<<RXEN0) | (1<<RXCIE0));
  ce:	e1 ec       	ldi	r30, 0xC1	; 193
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	8f 76       	andi	r24, 0x6F	; 111
  d6:	80 83       	st	Z, r24
}
  d8:	08 95       	ret

000000da <disableTX>:
*	Disables Transmitter and UDR Receive Interrupt
*	TXEN0 - Enables Transmitter USART0
*	UDRIE0 - Enables UDR Empty Interrupt
*/
void disableTX(void) {
	UCSR0B &= ~((1<<TXEN0)|(1<<UDRIE0));
  da:	e1 ec       	ldi	r30, 0xC1	; 193
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	87 7d       	andi	r24, 0xD7	; 215
  e2:	80 83       	st	Z, r24
}
  e4:	08 95       	ret

000000e6 <USARTWriteChar>:


/*
*	Writes a single character to USART TX. 
*/
void USARTWriteChar(char data){
  e6:	98 2f       	mov	r25, r24
*	TXEN0 - Enables Transmitter USART0
*	UDRIE0 - Enables UDR Empty Interrupt
*/
void enableTX(void) {

	UCSR0B |= (1<<TXEN0) | (1<<UDRIE0);
  e8:	80 91 c1 00 	lds	r24, 0x00C1
  ec:	88 62       	ori	r24, 0x28	; 40
  ee:	80 93 c1 00 	sts	0x00C1, r24
*/
void USARTWriteChar(char data){
	
	enableTX();
	
	while(!(UCSR0A & (1<<UDRE0))) {
  f2:	80 91 c0 00 	lds	r24, 0x00C0
  f6:	85 ff       	sbrs	r24, 5
  f8:	fc cf       	rjmp	.-8      	; 0xf2 <USARTWriteChar+0xc>
		//wait until UDR0 is writeable
	}
	UDR0=data;
  fa:	90 93 c6 00 	sts	0x00C6, r25
*	Disables Transmitter and UDR Receive Interrupt
*	TXEN0 - Enables Transmitter USART0
*	UDRIE0 - Enables UDR Empty Interrupt
*/
void disableTX(void) {
	UCSR0B &= ~((1<<TXEN0)|(1<<UDRIE0));
  fe:	80 91 c1 00 	lds	r24, 0x00C1
 102:	87 7d       	andi	r24, 0xD7	; 215
 104:	80 93 c1 00 	sts	0x00C1, r24
	}
	UDR0=data;
	
	disableTX();
	
}
 108:	08 95       	ret

0000010a <USARTReadChar>:
/*
*	Reads a single character from RX
*/
char USARTReadChar(void){
	
   while(!(UCSR0A & (1<<RXC0))){
 10a:	80 91 c0 00 	lds	r24, 0x00C0
 10e:	87 ff       	sbrs	r24, 7
 110:	fc cf       	rjmp	.-8      	; 0x10a <USARTReadChar>
	//wait for the character
   }
   
   return UDR0;
 112:	80 91 c6 00 	lds	r24, 0x00C6
}
 116:	08 95       	ret

00000118 <init_queue>:


/*
*	Initialize a new FIFOQueue with front at 0, back at QUEUESIZE-1 and count at 0
*/
void init_queue(FIFOQueue *q) {
 118:	fc 01       	movw	r30, r24
	q->front = 0;
 11a:	e0 58       	subi	r30, 0x80	; 128
 11c:	ff 4f       	sbci	r31, 0xFF	; 255
 11e:	11 92       	st	Z+, r1
 120:	11 92       	st	Z+, r1
	q->back = QUEUESIZE - 1;
 122:	8f e7       	ldi	r24, 0x7F	; 127
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	81 93       	st	Z+, r24
 128:	91 93       	st	Z+, r25
	q->count = 0;
 12a:	11 82       	std	Z+1, r1	; 0x01
 12c:	10 82       	st	Z, r1
}
 12e:	08 95       	ret

00000130 <full>:

/*
*	Returns true if the FIFOQueue is Full, false otherwise
*/
bool full(FIFOQueue *q) {
	if(q->count >= QUEUESIZE) {
 130:	20 e0       	ldi	r18, 0x00	; 0
 132:	fc 01       	movw	r30, r24
 134:	ec 57       	subi	r30, 0x7C	; 124
 136:	ff 4f       	sbci	r31, 0xFF	; 255
 138:	80 81       	ld	r24, Z
 13a:	91 81       	ldd	r25, Z+1	; 0x01
 13c:	80 38       	cpi	r24, 0x80	; 128
 13e:	91 05       	cpc	r25, r1
 140:	0c f0       	brlt	.+2      	; 0x144 <full+0x14>
 142:	21 e0       	ldi	r18, 0x01	; 1
		return true;
	}
	return false;
}
 144:	82 2f       	mov	r24, r18
 146:	08 95       	ret

00000148 <empty>:

/*
*	Returns true if the FIFOQueue is empty, false otherwise
*/
bool empty(FIFOQueue *q) {
	if(q->count <= 0) {
 148:	20 e0       	ldi	r18, 0x00	; 0
 14a:	fc 01       	movw	r30, r24
 14c:	ec 57       	subi	r30, 0x7C	; 124
 14e:	ff 4f       	sbci	r31, 0xFF	; 255
 150:	80 81       	ld	r24, Z
 152:	91 81       	ldd	r25, Z+1	; 0x01
 154:	18 16       	cp	r1, r24
 156:	19 06       	cpc	r1, r25
 158:	0c f0       	brlt	.+2      	; 0x15c <empty+0x14>
 15a:	21 e0       	ldi	r18, 0x01	; 1
		return true;
	}
	return false;
}
 15c:	82 2f       	mov	r24, r18
 15e:	08 95       	ret

00000160 <enqueue>:

/*
*	Adds a new item to the FIFOQueue
*/
bool enqueue(FIFOQueue *q, char c) {
 160:	ef 92       	push	r14
 162:	ff 92       	push	r15
 164:	0f 93       	push	r16
 166:	1f 93       	push	r17
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	8c 01       	movw	r16, r24
 16e:	46 2f       	mov	r20, r22

/*
*	Returns true if the FIFOQueue is Full, false otherwise
*/
bool full(FIFOQueue *q) {
	if(q->count >= QUEUESIZE) {
 170:	84 e8       	ldi	r24, 0x84	; 132
 172:	e8 2e       	mov	r14, r24
 174:	f1 2c       	mov	r15, r1
 176:	e0 0e       	add	r14, r16
 178:	f1 1e       	adc	r15, r17
 17a:	d7 01       	movw	r26, r14
 17c:	cd 91       	ld	r28, X+
 17e:	dc 91       	ld	r29, X
 180:	c0 38       	cpi	r28, 0x80	; 128
 182:	d1 05       	cpc	r29, r1
 184:	44 f0       	brlt	.+16     	; 0x196 <enqueue+0x36>
 186:	80 e0       	ldi	r24, 0x00	; 0
		q->count = q->count + 1;
		return true;
	}

	return false;
}
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	1f 91       	pop	r17
 18e:	0f 91       	pop	r16
 190:	ff 90       	pop	r15
 192:	ef 90       	pop	r14
 194:	08 95       	ret
*	Adds a new item to the FIFOQueue
*/
bool enqueue(FIFOQueue *q, char c) {

	if(full(q) == false) {
		q->back = (q->back + 1) % QUEUESIZE;
 196:	98 01       	movw	r18, r16
 198:	2e 57       	subi	r18, 0x7E	; 126
 19a:	3f 4f       	sbci	r19, 0xFF	; 255
 19c:	f9 01       	movw	r30, r18
 19e:	80 81       	ld	r24, Z
 1a0:	91 81       	ldd	r25, Z+1	; 0x01
 1a2:	01 96       	adiw	r24, 0x01	; 1
 1a4:	60 e8       	ldi	r22, 0x80	; 128
 1a6:	70 e0       	ldi	r23, 0x00	; 0
 1a8:	0e 94 aa 02 	call	0x554	; 0x554 <__divmodhi4>
 1ac:	fc 01       	movw	r30, r24
 1ae:	d9 01       	movw	r26, r18
 1b0:	8d 93       	st	X+, r24
 1b2:	9c 93       	st	X, r25
		q->buffer[q->back] = c;
 1b4:	e0 0f       	add	r30, r16
 1b6:	f1 1f       	adc	r31, r17
 1b8:	40 83       	st	Z, r20
		q->count = q->count + 1;
 1ba:	21 96       	adiw	r28, 0x01	; 1
 1bc:	f7 01       	movw	r30, r14
 1be:	d1 83       	std	Z+1, r29	; 0x01
 1c0:	c0 83       	st	Z, r28
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	e1 cf       	rjmp	.-62     	; 0x188 <enqueue+0x28>

000001c6 <dequeue>:
}

/*
*	Returns true if an item was dequeued, false otherwise
*/
bool dequeue(FIFOQueue *q, char *data) {
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	ac 01       	movw	r20, r24

/*
*	Returns true if the FIFOQueue is empty, false otherwise
*/
bool empty(FIFOQueue *q) {
	if(q->count <= 0) {
 1cc:	ec 01       	movw	r28, r24
 1ce:	cc 57       	subi	r28, 0x7C	; 124
 1d0:	df 4f       	sbci	r29, 0xFF	; 255
 1d2:	88 81       	ld	r24, Y
 1d4:	99 81       	ldd	r25, Y+1	; 0x01
 1d6:	18 16       	cp	r1, r24
 1d8:	19 06       	cpc	r1, r25
 1da:	24 f0       	brlt	.+8      	; 0x1e4 <dequeue+0x1e>
 1dc:	80 e0       	ldi	r24, 0x00	; 0
		q->front = (q->front + 1) % QUEUESIZE;
		q->count = q->count - 1;
		return true;
	}
	return false;
}
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret
*	Returns true if an item was dequeued, false otherwise
*/
bool dequeue(FIFOQueue *q, char *data) {

	if(empty(q) == false) {
		*data = q->buffer[q->front];
 1e4:	9a 01       	movw	r18, r20
 1e6:	20 58       	subi	r18, 0x80	; 128
 1e8:	3f 4f       	sbci	r19, 0xFF	; 255
 1ea:	d9 01       	movw	r26, r18
 1ec:	ed 91       	ld	r30, X+
 1ee:	fc 91       	ld	r31, X
 1f0:	11 97       	sbiw	r26, 0x01	; 1
 1f2:	e4 0f       	add	r30, r20
 1f4:	f5 1f       	adc	r31, r21
 1f6:	80 81       	ld	r24, Z
 1f8:	fb 01       	movw	r30, r22
 1fa:	80 83       	st	Z, r24
		q->front = (q->front + 1) % QUEUESIZE;
 1fc:	8d 91       	ld	r24, X+
 1fe:	9c 91       	ld	r25, X
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	60 e8       	ldi	r22, 0x80	; 128
 204:	70 e0       	ldi	r23, 0x00	; 0
 206:	0e 94 aa 02 	call	0x554	; 0x554 <__divmodhi4>
 20a:	d9 01       	movw	r26, r18
 20c:	8d 93       	st	X+, r24
 20e:	9c 93       	st	X, r25
		q->count = q->count - 1;
 210:	88 81       	ld	r24, Y
 212:	99 81       	ldd	r25, Y+1	; 0x01
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	99 83       	std	Y+1, r25	; 0x01
 218:	88 83       	st	Y, r24
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	e0 cf       	rjmp	.-64     	; 0x1de <dequeue+0x18>

0000021e <terminate_queue>:
}

/*
*	Null terminates a FIFOQueue's buffer
*/
void terminate_queue(FIFOQueue *q) {
 21e:	dc 01       	movw	r26, r24

/*
*	Returns true if the FIFOQueue is Full, false otherwise
*/
bool full(FIFOQueue *q) {
	if(q->count >= QUEUESIZE) {
 220:	ac 57       	subi	r26, 0x7C	; 124
 222:	bf 4f       	sbci	r27, 0xFF	; 255
 224:	8d 91       	ld	r24, X+
 226:	9c 91       	ld	r25, X
 228:	11 97       	sbiw	r26, 0x01	; 1
 22a:	a4 58       	subi	r26, 0x84	; 132
 22c:	b0 40       	sbci	r27, 0x00	; 0
 22e:	80 38       	cpi	r24, 0x80	; 128
 230:	91 05       	cpc	r25, r1
 232:	64 f0       	brlt	.+24     	; 0x24c <terminate_queue+0x2e>
void terminate_queue(FIFOQueue *q) {
	if(full(q) == false) {
		enqueue(q, 0x0A);
		return;
	}
	q->buffer[q->back] = 0x0A;
 234:	ae 57       	subi	r26, 0x7E	; 126
 236:	bf 4f       	sbci	r27, 0xFF	; 255
 238:	ed 91       	ld	r30, X+
 23a:	fc 91       	ld	r31, X
 23c:	11 97       	sbiw	r26, 0x01	; 1
 23e:	a2 58       	subi	r26, 0x82	; 130
 240:	b0 40       	sbci	r27, 0x00	; 0
 242:	ea 0f       	add	r30, r26
 244:	fb 1f       	adc	r31, r27
 246:	8a e0       	ldi	r24, 0x0A	; 10
 248:	80 83       	st	Z, r24
 24a:	08 95       	ret
/*
*	Null terminates a FIFOQueue's buffer
*/
void terminate_queue(FIFOQueue *q) {
	if(full(q) == false) {
		enqueue(q, 0x0A);
 24c:	cd 01       	movw	r24, r26
 24e:	6a e0       	ldi	r22, 0x0A	; 10
 250:	0e 94 b0 00 	call	0x160	; 0x160 <enqueue>
 254:	08 95       	ret

00000256 <printQueue>:
}

/*
*	Prints the content of a FIFOQueue's buffer
*/
void printQueue(FIFOQueue *q) {
 256:	ef 92       	push	r14
 258:	ff 92       	push	r15
 25a:	0f 93       	push	r16
 25c:	1f 93       	push	r17
 25e:	df 93       	push	r29
 260:	cf 93       	push	r28
 262:	0f 92       	push	r0
 264:	cd b7       	in	r28, 0x3d	; 61
 266:	de b7       	in	r29, 0x3e	; 62
 268:	8c 01       	movw	r16, r24

	char c;

	while(dequeue(q, &c)) {
 26a:	7e 01       	movw	r14, r28
 26c:	08 94       	sec
 26e:	e1 1c       	adc	r14, r1
 270:	f1 1c       	adc	r15, r1
 272:	03 c0       	rjmp	.+6      	; 0x27a <printQueue+0x24>
		//printf("%c", c);
		USARTWriteChar(c);
 274:	89 81       	ldd	r24, Y+1	; 0x01
 276:	0e 94 73 00 	call	0xe6	; 0xe6 <USARTWriteChar>
*/
void printQueue(FIFOQueue *q) {

	char c;

	while(dequeue(q, &c)) {
 27a:	c8 01       	movw	r24, r16
 27c:	b7 01       	movw	r22, r14
 27e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <dequeue>
 282:	88 23       	and	r24, r24
 284:	b9 f7       	brne	.-18     	; 0x274 <printQueue+0x1e>
		//printf("%c", c);
		USARTWriteChar(c);
	}

	//printf("\n");
}
 286:	0f 90       	pop	r0
 288:	cf 91       	pop	r28
 28a:	df 91       	pop	r29
 28c:	1f 91       	pop	r17
 28e:	0f 91       	pop	r16
 290:	ff 90       	pop	r15
 292:	ef 90       	pop	r14
 294:	08 95       	ret

00000296 <main>:


void USART_Init( unsigned int ubrr ) {
	
	//Set the prescaler for the BAUD as well as the BAUD
	UBRR0H = (unsigned char)(ubrr>>8); 
 296:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr; 
 29a:	89 e1       	ldi	r24, 0x19	; 25
 29c:	80 93 c4 00 	sts	0x00C4, r24

	/* Set frame format: 8data, 2stop bit */ 
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 2a0:	8e e0       	ldi	r24, 0x0E	; 14
 2a2:	80 93 c2 00 	sts	0x00C2, r24

/*
*	Initialize a new FIFOQueue with front at 0, back at QUEUESIZE-1 and count at 0
*/
void init_queue(FIFOQueue *q) {
	q->front = 0;
 2a6:	10 92 73 02 	sts	0x0273, r1
 2aa:	10 92 72 02 	sts	0x0272, r1
	q->back = QUEUESIZE - 1;
 2ae:	8f e7       	ldi	r24, 0x7F	; 127
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	90 93 75 02 	sts	0x0275, r25
 2b6:	80 93 74 02 	sts	0x0274, r24
	q->count = 0;
 2ba:	10 92 77 02 	sts	0x0277, r1
 2be:	10 92 76 02 	sts	0x0276, r1

/*
*	Initialize a new FIFOQueue with front at 0, back at QUEUESIZE-1 and count at 0
*/
void init_queue(FIFOQueue *q) {
	q->front = 0;
 2c2:	10 92 ed 01 	sts	0x01ED, r1
 2c6:	10 92 ec 01 	sts	0x01EC, r1
	q->back = QUEUESIZE - 1;
 2ca:	90 93 ef 01 	sts	0x01EF, r25
 2ce:	80 93 ee 01 	sts	0x01EE, r24
	q->count = 0;
 2d2:	10 92 f1 01 	sts	0x01F1, r1
 2d6:	10 92 f0 01 	sts	0x01F0, r1
*	Disables Transmitter and UDR Receive Interrupt
*	TXEN0 - Enables Transmitter USART0
*	UDRIE0 - Enables UDR Empty Interrupt
*/
void disableTX(void) {
	UCSR0B &= ~((1<<TXEN0)|(1<<UDRIE0));
 2da:	80 91 c1 00 	lds	r24, 0x00C1
 2de:	87 7d       	andi	r24, 0xD7	; 215
 2e0:	80 93 c1 00 	sts	0x00C1, r24
*	Enables RX Interrupts
*	RXEN0 - Receive Enable flag
*	RXCIE0 - Receive Complete Interrupt flag
*/	
void enableRX(void) { 
	UCSR0B |= (1<<RXEN0) | (1<<RXCIE0);
 2e4:	80 91 c1 00 	lds	r24, 0x00C1
 2e8:	80 69       	ori	r24, 0x90	; 144
 2ea:	80 93 c1 00 	sts	0x00C1, r24
	
	//enable receiver
	enableRX();
	
	//set enable interrupts
	sei();
 2ee:	78 94       	sei
	
	//set pin c0 to output
	DDRC |= 1<<PINC0;
 2f0:	38 9a       	sbi	0x07, 0	; 7
	
	//light the pin
	
	while(1) {
		PORTC ^= 1<<PINC0;
 2f2:	41 e0       	ldi	r20, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2f4:	20 e9       	ldi	r18, 0x90	; 144
 2f6:	31 e0       	ldi	r19, 0x01	; 1
 2f8:	88 b1       	in	r24, 0x08	; 8
 2fa:	84 27       	eor	r24, r20
 2fc:	88 b9       	out	0x08, r24	; 8
 2fe:	80 ed       	ldi	r24, 0xD0	; 208
 300:	97 e0       	ldi	r25, 0x07	; 7
 302:	f9 01       	movw	r30, r18
 304:	31 97       	sbiw	r30, 0x01	; 1
 306:	f1 f7       	brne	.-4      	; 0x304 <main+0x6e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 308:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 30a:	d9 f7       	brne	.-10     	; 0x302 <main+0x6c>
 30c:	f5 cf       	rjmp	.-22     	; 0x2f8 <main+0x62>

0000030e <__vector_19>:
		parseCommand(&readQueue, &writeQueue);		
		
	}
}	

ISR(USART_UDRE_vect) {
 30e:	1f 92       	push	r1
 310:	0f 92       	push	r0
 312:	0f b6       	in	r0, 0x3f	; 63
 314:	0f 92       	push	r0
 316:	11 24       	eor	r1, r1
 318:	2f 93       	push	r18
 31a:	3f 93       	push	r19
 31c:	4f 93       	push	r20
 31e:	5f 93       	push	r21
 320:	6f 93       	push	r22
 322:	7f 93       	push	r23
 324:	8f 93       	push	r24
 326:	9f 93       	push	r25
 328:	af 93       	push	r26
 32a:	bf 93       	push	r27
 32c:	ef 93       	push	r30
 32e:	ff 93       	push	r31

	if(dequeue(&writeQueue, &sendByte) == false) {
 330:	8c e6       	ldi	r24, 0x6C	; 108
 332:	91 e0       	ldi	r25, 0x01	; 1
 334:	6b e6       	ldi	r22, 0x6B	; 107
 336:	71 e0       	ldi	r23, 0x01	; 1
 338:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <dequeue>
 33c:	88 23       	and	r24, r24
 33e:	29 f5       	brne	.+74     	; 0x38a <__vector_19+0x7c>

/*
*	Initialize a new FIFOQueue with front at 0, back at QUEUESIZE-1 and count at 0
*/
void init_queue(FIFOQueue *q) {
	q->front = 0;
 340:	10 92 73 02 	sts	0x0273, r1
 344:	10 92 72 02 	sts	0x0272, r1
	q->back = QUEUESIZE - 1;
 348:	8f e7       	ldi	r24, 0x7F	; 127
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	90 93 75 02 	sts	0x0275, r25
 350:	80 93 74 02 	sts	0x0274, r24
	q->count = 0;
 354:	10 92 77 02 	sts	0x0277, r1
 358:	10 92 76 02 	sts	0x0276, r1

/*
*	Initialize a new FIFOQueue with front at 0, back at QUEUESIZE-1 and count at 0
*/
void init_queue(FIFOQueue *q) {
	q->front = 0;
 35c:	10 92 ed 01 	sts	0x01ED, r1
 360:	10 92 ec 01 	sts	0x01EC, r1
	q->back = QUEUESIZE - 1;
 364:	90 93 ef 01 	sts	0x01EF, r25
 368:	80 93 ee 01 	sts	0x01EE, r24
	q->count = 0;
 36c:	10 92 f1 01 	sts	0x01F1, r1
 370:	10 92 f0 01 	sts	0x01F0, r1
*	Disables Transmitter and UDR Receive Interrupt
*	TXEN0 - Enables Transmitter USART0
*	UDRIE0 - Enables UDR Empty Interrupt
*/
void disableTX(void) {
	UCSR0B &= ~((1<<TXEN0)|(1<<UDRIE0));
 374:	80 91 c1 00 	lds	r24, 0x00C1
 378:	87 7d       	andi	r24, 0xD7	; 215
 37a:	80 93 c1 00 	sts	0x00C1, r24
*	Enables RX Interrupts
*	RXEN0 - Receive Enable flag
*	RXCIE0 - Receive Complete Interrupt flag
*/	
void enableRX(void) { 
	UCSR0B |= (1<<RXEN0) | (1<<RXCIE0);
 37e:	80 91 c1 00 	lds	r24, 0x00C1
 382:	80 69       	ori	r24, 0x90	; 144
 384:	80 93 c1 00 	sts	0x00C1, r24
 388:	04 c0       	rjmp	.+8      	; 0x392 <__vector_19+0x84>
		//UDR0 = 0x0A;
		disableTX();
		enableRX();
	}else {
		//sendByte = writeQueue.buffer[i];
		UDR0 = sendByte;
 38a:	80 91 6b 01 	lds	r24, 0x016B
 38e:	80 93 c6 00 	sts	0x00C6, r24
		
	}
	
}
 392:	ff 91       	pop	r31
 394:	ef 91       	pop	r30
 396:	bf 91       	pop	r27
 398:	af 91       	pop	r26
 39a:	9f 91       	pop	r25
 39c:	8f 91       	pop	r24
 39e:	7f 91       	pop	r23
 3a0:	6f 91       	pop	r22
 3a2:	5f 91       	pop	r21
 3a4:	4f 91       	pop	r20
 3a6:	3f 91       	pop	r19
 3a8:	2f 91       	pop	r18
 3aa:	0f 90       	pop	r0
 3ac:	0f be       	out	0x3f, r0	; 63
 3ae:	0f 90       	pop	r0
 3b0:	1f 90       	pop	r1
 3b2:	18 95       	reti

000003b4 <matchString>:
*	Returns 1 if string1 matches string2, 0 otherwise
*/

int matchString(char* string1, char* string2) {
	
	if(strncmp(string1, string2, QUEUESIZE-1) == 0) {
 3b4:	4f e7       	ldi	r20, 0x7F	; 127
 3b6:	50 e0       	ldi	r21, 0x00	; 0
 3b8:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <strncmp>
 3bc:	40 e0       	ldi	r20, 0x00	; 0
 3be:	50 e0       	ldi	r21, 0x00	; 0
 3c0:	00 97       	sbiw	r24, 0x00	; 0
 3c2:	11 f4       	brne	.+4      	; 0x3c8 <matchString+0x14>
 3c4:	41 e0       	ldi	r20, 0x01	; 1
 3c6:	50 e0       	ldi	r21, 0x00	; 0
		
		return 1;
	}
	return 0;
}
 3c8:	ca 01       	movw	r24, r20
 3ca:	08 95       	ret

000003cc <writeString>:
}

/*
*	Writes a String into a FIFOQueue's buffer
*/
void writeString(FIFOQueue *q, char* str) {
 3cc:	af 92       	push	r10
 3ce:	bf 92       	push	r11
 3d0:	cf 92       	push	r12
 3d2:	df 92       	push	r13
 3d4:	ef 92       	push	r14
 3d6:	ff 92       	push	r15
 3d8:	0f 93       	push	r16
 3da:	1f 93       	push	r17
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	6c 01       	movw	r12, r24
 3e2:	7b 01       	movw	r14, r22

	int length = strlen(str);
 3e4:	db 01       	movw	r26, r22
 3e6:	0d 90       	ld	r0, X+
 3e8:	00 20       	and	r0, r0
 3ea:	e9 f7       	brne	.-6      	; 0x3e6 <writeString+0x1a>
 3ec:	8d 01       	movw	r16, r26
 3ee:	01 50       	subi	r16, 0x01	; 1
 3f0:	10 40       	sbci	r17, 0x00	; 0
 3f2:	06 1b       	sub	r16, r22
 3f4:	17 0b       	sbc	r17, r23
 3f6:	c0 e0       	ldi	r28, 0x00	; 0
 3f8:	d0 e0       	ldi	r29, 0x00	; 0

/*
*	Returns true if the FIFOQueue is Full, false otherwise
*/
bool full(FIFOQueue *q) {
	if(q->count >= QUEUESIZE) {
 3fa:	94 e8       	ldi	r25, 0x84	; 132
 3fc:	a9 2e       	mov	r10, r25
 3fe:	b1 2c       	mov	r11, r1
 400:	ac 0c       	add	r10, r12
 402:	bd 1c       	adc	r11, r13
 404:	08 c0       	rjmp	.+16     	; 0x416 <writeString+0x4a>

	int length = strlen(str);
	int i = 0;

	while((full(q) == false) && (length-- > 0)) {
		enqueue(q, str[i]);
 406:	f7 01       	movw	r30, r14
 408:	ec 0f       	add	r30, r28
 40a:	fd 1f       	adc	r31, r29
 40c:	c6 01       	movw	r24, r12
 40e:	60 81       	ld	r22, Z
 410:	0e 94 b0 00 	call	0x160	; 0x160 <enqueue>
		i++;
 414:	21 96       	adiw	r28, 0x01	; 1

/*
*	Returns true if the FIFOQueue is Full, false otherwise
*/
bool full(FIFOQueue *q) {
	if(q->count >= QUEUESIZE) {
 416:	f5 01       	movw	r30, r10
 418:	80 81       	ld	r24, Z
 41a:	91 81       	ldd	r25, Z+1	; 0x01
 41c:	80 38       	cpi	r24, 0x80	; 128
 41e:	91 05       	cpc	r25, r1
 420:	74 f0       	brlt	.+28     	; 0x43e <writeString+0x72>
	while((full(q) == false) && (length-- > 0)) {
		enqueue(q, str[i]);
		i++;
	}

	terminate_queue(q);
 422:	c6 01       	movw	r24, r12
 424:	0e 94 0f 01 	call	0x21e	; 0x21e <terminate_queue>

}
 428:	df 91       	pop	r29
 42a:	cf 91       	pop	r28
 42c:	1f 91       	pop	r17
 42e:	0f 91       	pop	r16
 430:	ff 90       	pop	r15
 432:	ef 90       	pop	r14
 434:	df 90       	pop	r13
 436:	cf 90       	pop	r12
 438:	bf 90       	pop	r11
 43a:	af 90       	pop	r10
 43c:	08 95       	ret
void writeString(FIFOQueue *q, char* str) {

	int length = strlen(str);
	int i = 0;

	while((full(q) == false) && (length-- > 0)) {
 43e:	c8 01       	movw	r24, r16
 440:	8c 1b       	sub	r24, r28
 442:	9d 0b       	sbc	r25, r29
 444:	18 16       	cp	r1, r24
 446:	19 06       	cpc	r1, r25
 448:	f4 f2       	brlt	.-68     	; 0x406 <writeString+0x3a>
 44a:	eb cf       	rjmp	.-42     	; 0x422 <writeString+0x56>

0000044c <parseCommand>:


/*
*	Handles data that is read from RX
*/
void parseCommand(FIFOQueue* readQueue, FIFOQueue* writeQueue2) {
 44c:	0f 93       	push	r16
 44e:	1f 93       	push	r17
 450:	18 2f       	mov	r17, r24
 452:	09 2f       	mov	r16, r25
*	Disables RX Interrupts
*	RXEN0 - Receive Enable flag
*	RXCIE0 - Receive Complete Interrupt flag
*/
void disableRX(void) {
	UCSR0B &= ~((1<<RXEN0) | (1<<RXCIE0));
 454:	80 91 c1 00 	lds	r24, 0x00C1
 458:	8f 76       	andi	r24, 0x6F	; 111
 45a:	80 93 c1 00 	sts	0x00C1, r24
	
	//temporarily disable RX Interrupts
	disableRX();

	//terminate the readQueue so comparison can occur
	terminate_queue(readQueue);
 45e:	81 2f       	mov	r24, r17
 460:	0e 94 0f 01 	call	0x21e	; 0x21e <terminate_queue>
*	Returns 1 if string1 matches string2, 0 otherwise
*/

int matchString(char* string1, char* string2) {
	
	if(strncmp(string1, string2, QUEUESIZE-1) == 0) {
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	91 e0       	ldi	r25, 0x01	; 1
 468:	61 2f       	mov	r22, r17
 46a:	70 2f       	mov	r23, r16
 46c:	4f e7       	ldi	r20, 0x7F	; 127
 46e:	50 e0       	ldi	r21, 0x00	; 0
 470:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <strncmp>
 474:	00 97       	sbiw	r24, 0x00	; 0
 476:	c1 f4       	brne	.+48     	; 0x4a8 <parseCommand+0x5c>
	terminate_queue(readQueue);
	
	if(matchString("HELO root root", readQueue->buffer)) {
	
		//send acknowledge
		writeString(&writeQueue, "ACK");							
 478:	8c e6       	ldi	r24, 0x6C	; 108
 47a:	91 e0       	ldi	r25, 0x01	; 1
 47c:	6f e0       	ldi	r22, 0x0F	; 15
 47e:	71 e0       	ldi	r23, 0x01	; 1
 480:	09 c0       	rjmp	.+18     	; 0x494 <parseCommand+0x48>
	
	}else if(matchString("hello", readQueue->buffer)) {
		
		writeString(&writeQueue, "Hello from the atmega328");
 482:	8c e6       	ldi	r24, 0x6C	; 108
 484:	91 e0       	ldi	r25, 0x01	; 1
 486:	63 e1       	ldi	r22, 0x13	; 19
 488:	71 e0       	ldi	r23, 0x01	; 1
 48a:	04 c0       	rjmp	.+8      	; 0x494 <parseCommand+0x48>
		
	}else if(matchString("status", readQueue->buffer)) {
		
		//Demonstrating somewhat advanced User input and parsing		
		writeString(&writeQueue, "CPU:16MHz, BAUD: 19200, UBRR: 51"); 
 48c:	8c e6       	ldi	r24, 0x6C	; 108
 48e:	91 e0       	ldi	r25, 0x01	; 1
 490:	6c e2       	ldi	r22, 0x2C	; 44
 492:	71 e0       	ldi	r23, 0x01	; 1
 494:	0e 94 e6 01 	call	0x3cc	; 0x3cc <writeString>
*	TXEN0 - Enables Transmitter USART0
*	UDRIE0 - Enables UDR Empty Interrupt
*/
void enableTX(void) {

	UCSR0B |= (1<<TXEN0) | (1<<UDRIE0);
 498:	80 91 c1 00 	lds	r24, 0x00C1
 49c:	88 62       	ori	r24, 0x28	; 40
 49e:	80 93 c1 00 	sts	0x00C1, r24
	
	}
	//Interrupt enabled transmission
	enableTX();

}
 4a2:	1f 91       	pop	r17
 4a4:	0f 91       	pop	r16
 4a6:	08 95       	ret
*	Returns 1 if string1 matches string2, 0 otherwise
*/

int matchString(char* string1, char* string2) {
	
	if(strncmp(string1, string2, QUEUESIZE-1) == 0) {
 4a8:	8d e4       	ldi	r24, 0x4D	; 77
 4aa:	91 e0       	ldi	r25, 0x01	; 1
 4ac:	61 2f       	mov	r22, r17
 4ae:	70 2f       	mov	r23, r16
 4b0:	4f e7       	ldi	r20, 0x7F	; 127
 4b2:	50 e0       	ldi	r21, 0x00	; 0
 4b4:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <strncmp>
 4b8:	00 97       	sbiw	r24, 0x00	; 0
 4ba:	19 f3       	breq	.-58     	; 0x482 <parseCommand+0x36>
		//Demonstrating somewhat advanced User input and parsing		
		writeString(&writeQueue, "CPU:16MHz, BAUD: 19200, UBRR: 51"); 
	
	}else {
	
		writeString(&writeQueue, "Invalid Command");
 4bc:	83 e5       	ldi	r24, 0x53	; 83
 4be:	91 e0       	ldi	r25, 0x01	; 1
 4c0:	61 2f       	mov	r22, r17
 4c2:	70 2f       	mov	r23, r16
 4c4:	4f e7       	ldi	r20, 0x7F	; 127
 4c6:	50 e0       	ldi	r21, 0x00	; 0
 4c8:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <strncmp>
 4cc:	00 97       	sbiw	r24, 0x00	; 0
 4ce:	f1 f2       	breq	.-68     	; 0x48c <parseCommand+0x40>
 4d0:	8c e6       	ldi	r24, 0x6C	; 108
 4d2:	91 e0       	ldi	r25, 0x01	; 1
 4d4:	6a e5       	ldi	r22, 0x5A	; 90
 4d6:	71 e0       	ldi	r23, 0x01	; 1
 4d8:	dd cf       	rjmp	.-70     	; 0x494 <parseCommand+0x48>

000004da <__vector_18>:
}

/*
*	Interrupt fires when Data is available in UDR1
*/
ISR(USART_RX_vect){ 
 4da:	1f 92       	push	r1
 4dc:	0f 92       	push	r0
 4de:	0f b6       	in	r0, 0x3f	; 63
 4e0:	0f 92       	push	r0
 4e2:	11 24       	eor	r1, r1
 4e4:	2f 93       	push	r18
 4e6:	3f 93       	push	r19
 4e8:	4f 93       	push	r20
 4ea:	5f 93       	push	r21
 4ec:	6f 93       	push	r22
 4ee:	7f 93       	push	r23
 4f0:	8f 93       	push	r24
 4f2:	9f 93       	push	r25
 4f4:	af 93       	push	r26
 4f6:	bf 93       	push	r27
 4f8:	ef 93       	push	r30
 4fa:	ff 93       	push	r31
	
	//Received byte gets stored here
	recByte = UDR0; 
 4fc:	60 91 c6 00 	lds	r22, 0x00C6
 500:	60 93 6a 01 	sts	0x016A, r22

/*
*	Returns true if the FIFOQueue is Full, false otherwise
*/
bool full(FIFOQueue *q) {
	if(q->count >= QUEUESIZE) {
 504:	80 91 76 02 	lds	r24, 0x0276
 508:	90 91 77 02 	lds	r25, 0x0277
 50c:	80 38       	cpi	r24, 0x80	; 128
 50e:	91 05       	cpc	r25, r1
 510:	6c f0       	brlt	.+26     	; 0x52c <__vector_18+0x52>
 512:	05 c0       	rjmp	.+10     	; 0x51e <__vector_18+0x44>
		//since the end of string was reached this must be a command
		parseCommand(&readQueue, &writeQueue); 		
		
	}else if(recByte != 0x0A) {
		//queue the data to be read
		enqueue(&readQueue, recByte); 	
 514:	82 ef       	ldi	r24, 0xF2	; 242
 516:	91 e0       	ldi	r25, 0x01	; 1
 518:	0e 94 b0 00 	call	0x160	; 0x160 <enqueue>
 51c:	0a c0       	rjmp	.+20     	; 0x532 <__vector_18+0x58>
		
	}else {
		//since the end of string was reached this must be a command
		parseCommand(&readQueue, &writeQueue);		
 51e:	82 ef       	ldi	r24, 0xF2	; 242
 520:	91 e0       	ldi	r25, 0x01	; 1
 522:	6c e6       	ldi	r22, 0x6C	; 108
 524:	71 e0       	ldi	r23, 0x01	; 1
 526:	0e 94 26 02 	call	0x44c	; 0x44c <parseCommand>
 52a:	03 c0       	rjmp	.+6      	; 0x532 <__vector_18+0x58>
	
	if(full(&readQueue) == true) { 	
		//since the end of string was reached this must be a command
		parseCommand(&readQueue, &writeQueue); 		
		
	}else if(recByte != 0x0A) {
 52c:	6a 30       	cpi	r22, 0x0A	; 10
 52e:	91 f7       	brne	.-28     	; 0x514 <__vector_18+0x3a>
 530:	f6 cf       	rjmp	.-20     	; 0x51e <__vector_18+0x44>
	}else {
		//since the end of string was reached this must be a command
		parseCommand(&readQueue, &writeQueue);		
		
	}
}	
 532:	ff 91       	pop	r31
 534:	ef 91       	pop	r30
 536:	bf 91       	pop	r27
 538:	af 91       	pop	r26
 53a:	9f 91       	pop	r25
 53c:	8f 91       	pop	r24
 53e:	7f 91       	pop	r23
 540:	6f 91       	pop	r22
 542:	5f 91       	pop	r21
 544:	4f 91       	pop	r20
 546:	3f 91       	pop	r19
 548:	2f 91       	pop	r18
 54a:	0f 90       	pop	r0
 54c:	0f be       	out	0x3f, r0	; 63
 54e:	0f 90       	pop	r0
 550:	1f 90       	pop	r1
 552:	18 95       	reti

00000554 <__divmodhi4>:
 554:	97 fb       	bst	r25, 7
 556:	09 2e       	mov	r0, r25
 558:	07 26       	eor	r0, r23
 55a:	0a d0       	rcall	.+20     	; 0x570 <__divmodhi4_neg1>
 55c:	77 fd       	sbrc	r23, 7
 55e:	04 d0       	rcall	.+8      	; 0x568 <__divmodhi4_neg2>
 560:	0c d0       	rcall	.+24     	; 0x57a <__udivmodhi4>
 562:	06 d0       	rcall	.+12     	; 0x570 <__divmodhi4_neg1>
 564:	00 20       	and	r0, r0
 566:	1a f4       	brpl	.+6      	; 0x56e <__divmodhi4_exit>

00000568 <__divmodhi4_neg2>:
 568:	70 95       	com	r23
 56a:	61 95       	neg	r22
 56c:	7f 4f       	sbci	r23, 0xFF	; 255

0000056e <__divmodhi4_exit>:
 56e:	08 95       	ret

00000570 <__divmodhi4_neg1>:
 570:	f6 f7       	brtc	.-4      	; 0x56e <__divmodhi4_exit>
 572:	90 95       	com	r25
 574:	81 95       	neg	r24
 576:	9f 4f       	sbci	r25, 0xFF	; 255
 578:	08 95       	ret

0000057a <__udivmodhi4>:
 57a:	aa 1b       	sub	r26, r26
 57c:	bb 1b       	sub	r27, r27
 57e:	51 e1       	ldi	r21, 0x11	; 17
 580:	07 c0       	rjmp	.+14     	; 0x590 <__udivmodhi4_ep>

00000582 <__udivmodhi4_loop>:
 582:	aa 1f       	adc	r26, r26
 584:	bb 1f       	adc	r27, r27
 586:	a6 17       	cp	r26, r22
 588:	b7 07       	cpc	r27, r23
 58a:	10 f0       	brcs	.+4      	; 0x590 <__udivmodhi4_ep>
 58c:	a6 1b       	sub	r26, r22
 58e:	b7 0b       	sbc	r27, r23

00000590 <__udivmodhi4_ep>:
 590:	88 1f       	adc	r24, r24
 592:	99 1f       	adc	r25, r25
 594:	5a 95       	dec	r21
 596:	a9 f7       	brne	.-22     	; 0x582 <__udivmodhi4_loop>
 598:	80 95       	com	r24
 59a:	90 95       	com	r25
 59c:	bc 01       	movw	r22, r24
 59e:	cd 01       	movw	r24, r26
 5a0:	08 95       	ret

000005a2 <strncmp>:
 5a2:	fb 01       	movw	r30, r22
 5a4:	dc 01       	movw	r26, r24
 5a6:	41 50       	subi	r20, 0x01	; 1
 5a8:	50 40       	sbci	r21, 0x00	; 0
 5aa:	30 f0       	brcs	.+12     	; 0x5b8 <strncmp+0x16>
 5ac:	8d 91       	ld	r24, X+
 5ae:	01 90       	ld	r0, Z+
 5b0:	80 19       	sub	r24, r0
 5b2:	19 f4       	brne	.+6      	; 0x5ba <strncmp+0x18>
 5b4:	00 20       	and	r0, r0
 5b6:	b9 f7       	brne	.-18     	; 0x5a6 <strncmp+0x4>
 5b8:	88 1b       	sub	r24, r24
 5ba:	99 0b       	sbc	r25, r25
 5bc:	08 95       	ret

000005be <_exit>:
 5be:	f8 94       	cli

000005c0 <__stop_program>:
 5c0:	ff cf       	rjmp	.-2      	; 0x5c0 <__stop_program>
